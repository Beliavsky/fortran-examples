

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-ee1.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------



























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_ee1_1 = e1,E1 => n1,N1	
process nmssm_ext_ee1_2 = e1,E1 => n2,N2	
process nmssm_ext_ee1_3 = e1,E1 => n3,N3	
process nmssm_ext_ee1_4 = e1,E1 => t,T		
process nmssm_ext_ee1_5 = e1,E1 => Wp,Wm	
process nmssm_ext_ee1_6 = e1,E1 => Z,Z		
process nmssm_ext_ee1_7 = e1,E1 => se1,SE1	
process nmssm_ext_ee1_8 = e1,E1 => se2,SE2	
process nmssm_ext_ee1_9 = e1,E1 => se1,SE2	
process nmssm_ext_ee1_10 = e1,E1 => smu1,SMU1	
process nmssm_ext_ee1_11 = e1,E1 => smu2,SMU2	
process nmssm_ext_ee1_12 = e1,E1 => stau1,STAU1	
process nmssm_ext_ee1_13 = e1,E1 => stau2,STAU2	
process nmssm_ext_ee1_14 = e1,E1 => stau1,STAU2	
process nmssm_ext_ee1_15 = e1,E1 => sn11,SN11	
process nmssm_ext_ee1_16 = e1,E1 => sn21,SN21	
process nmssm_ext_ee1_17 = e1,E1 => sn31,SN31	
process nmssm_ext_ee1_18 = e1,E1 => su1,su1c	
process nmssm_ext_ee1_19 = e1,E1 => su2,su2c	
process nmssm_ext_ee1_20 = e1,E1 => sc1,sc1c	
process nmssm_ext_ee1_21 = e1,E1 => sc2,sc2c	
process nmssm_ext_ee1_22 = e1,E1 => st1,st1c	
process nmssm_ext_ee1_23 = e1,E1 => st2,st2c	
process nmssm_ext_ee1_24 = e1,E1 => st1,st2c	
process nmssm_ext_ee1_25 = e1,E1 => sd1,sd1c	
process nmssm_ext_ee1_26 = e1,E1 => sd2,sd2c	
process nmssm_ext_ee1_27 = e1,E1 => ss1,ss1c	
process nmssm_ext_ee1_28 = e1,E1 => ss2,ss2c	
process nmssm_ext_ee1_29 = e1,E1 => sb1,sb1c	
process nmssm_ext_ee1_30 = e1,E1 => sb2,sb2c	
process nmssm_ext_ee1_31 = e1,E1 => sb1,sb2c	
process nmssm_ext_ee1_32 = e1,E1 => neu1,neu1	
process nmssm_ext_ee1_33 = e1,E1 => neu1,neu2	
process nmssm_ext_ee1_34 = e1,E1 => neu1,neu3	
process nmssm_ext_ee1_35 = e1,E1 => neu1,neu4	
process nmssm_ext_ee1_36 = e1,E1 => neu1,neu5	
process nmssm_ext_ee1_37 = e1,E1 => neu2,neu2	
process nmssm_ext_ee1_38 = e1,E1 => neu2,neu3	
process nmssm_ext_ee1_39 = e1,E1 => neu2,neu4	
process nmssm_ext_ee1_40 = e1,E1 => neu2,neu5	
process nmssm_ext_ee1_41 = e1,E1 => neu3,neu3	
process nmssm_ext_ee1_42 = e1,E1 => neu3,neu4	
process nmssm_ext_ee1_43 = e1,E1 => neu3,neu5	
process nmssm_ext_ee1_44 = e1,E1 => neu4,neu4	
process nmssm_ext_ee1_45 = e1,E1 => neu4,neu5	
process nmssm_ext_ee1_46 = e1,E1 => neu5,neu5	
process nmssm_ext_ee1_47 = e1,E1 => "ch1+","ch1-"
process nmssm_ext_ee1_48 = e1,E1 => "ch2+","ch2-"
process nmssm_ext_ee1_49 = e1,E1 => "ch1+","ch2-"
process nmssm_ext_ee1_50 = e1,E1 => Z,h01	
process nmssm_ext_ee1_51 = e1,E1 => Z,h02	
process nmssm_ext_ee1_52 = e1,E1 => Z,h03	
process nmssm_ext_ee1_53 = e1,E1 => A01,h01	
process nmssm_ext_ee1_54 = e1,E1 => A01,h02	
process nmssm_ext_ee1_55 = e1,E1 => A01,h03	
process nmssm_ext_ee1_56 = e1,E1 => A02,h01	
process nmssm_ext_ee1_57 = e1,E1 => A02,h02	
process nmssm_ext_ee1_58 = e1,E1 => A02,h03	
process nmssm_ext_ee1_59 = e1,E1 => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_1)
printf "************************************************************************"
printf "* Integrating e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_2)
printf "************************************************************************"
printf "* Integrating e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_3)
printf "************************************************************************"
printf "* Integrating e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_4)
printf "************************************************************************"
printf "* Integrating e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_5)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_6)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_7)
printf "************************************************************************"
printf "* Integrating e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_8)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_9)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_10)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_11)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_12)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_13)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_14)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_15)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_16)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_17)
printf "************************************************************************"
printf "* Integrating e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_18)
printf "************************************************************************"
printf "* Integrating e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_19)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_20)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_21)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_22)
printf "************************************************************************"
printf "* Integrating e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_23)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_24)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_25)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_26)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_27)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_28)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_29)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_30)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_31)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_32)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_33)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_34)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_35)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_36)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_37)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_38)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_39)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_40)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_41)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_42)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_43)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_44)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_45)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_46)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_47)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_48)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_49)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_50)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_51)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_52)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_53)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_54)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_55)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_56)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_57)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_58)
printf "************************************************************************"
printf "* Integrating e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee1_59)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E+02) ** 2 + error(nmssm_ext_ee1_1) ** 2)
printf "Expecting 5.3521893E+04"
show(integral(nmssm_ext_ee1_1))
real pull = abs (integral (nmssm_ext_ee1_1) - 5.3521893E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n1,N1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_1) == 5.3521893E+04)
printf "************************************************************************"
printf "* Checking e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.15E-04) ** 2 + error(nmssm_ext_ee1_2) ** 2)
printf "Expecting 2.7154546E+00"
show(integral(nmssm_ext_ee1_2))
real pull = abs (integral (nmssm_ext_ee1_2) - 2.7154546E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n2,N2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_2) == 2.7154546E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.32E-04) ** 2 + error(nmssm_ext_ee1_3) ** 2)
printf "Expecting 2.7160902E+00"
show(integral(nmssm_ext_ee1_3))
real pull = abs (integral (nmssm_ext_ee1_3) - 2.7160902E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n3,N3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_3) == 2.7160902E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.03E-03) ** 2 + error(nmssm_ext_ee1_4) ** 2)
printf "Expecting 1.9711937E+01"
show(integral(nmssm_ext_ee1_4))
real pull = abs (integral (nmssm_ext_ee1_4) - 1.9711937E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_4) == 1.9711937E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.22E-01) ** 2 + error(nmssm_ext_ee1_5) ** 2)
printf "Expecting 4.5554211E+02"
show(integral(nmssm_ext_ee1_5))
real pull = abs (integral (nmssm_ext_ee1_5) - 4.5554211E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_5) == 4.5554211E+02)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.06E-02) ** 2 + error(nmssm_ext_ee1_6) ** 2)
printf "Expecting 2.4906532E+01"
show(integral(nmssm_ext_ee1_6))
real pull = abs (integral (nmssm_ext_ee1_6) - 2.4906532E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_6) == 2.4906532E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.84E-02) ** 2 + error(nmssm_ext_ee1_7) ** 2)
printf "Expecting 5.8568844E+01"
show(integral(nmssm_ext_ee1_7))
real pull = abs (integral (nmssm_ext_ee1_7) - 5.8568844E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_7) == 5.8568844E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.13E-01) ** 2 + error(nmssm_ext_ee1_8) ** 2)
printf "Expecting 6.8229901E+01"
show(integral(nmssm_ext_ee1_8))
real pull = abs (integral (nmssm_ext_ee1_8) - 6.8229901E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_8) == 6.8229901E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.78E-03) ** 2 + error(nmssm_ext_ee1_9) ** 2)
printf "Expecting 3.3698124E+00"
show(integral(nmssm_ext_ee1_9))
real pull = abs (integral (nmssm_ext_ee1_9) - 3.3698124E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_9) == 3.3698124E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.77E-03) ** 2 + error(nmssm_ext_ee1_10) ** 2)
printf "Expecting 3.1962762E+00"
show(integral(nmssm_ext_ee1_10))
real pull = abs (integral (nmssm_ext_ee1_10) - 3.1962762E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_10) == 3.1962762E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.44E-03) ** 2 + error(nmssm_ext_ee1_11) ** 2)
printf "Expecting 2.8669086E+00"
show(integral(nmssm_ext_ee1_11))
real pull = abs (integral (nmssm_ext_ee1_11) - 2.8669086E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_11) == 2.8669086E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E-03) ** 2 + error(nmssm_ext_ee1_12) ** 2)
printf "Expecting 2.7144097E+00"
show(integral(nmssm_ext_ee1_12))
real pull = abs (integral (nmssm_ext_ee1_12) - 2.7144097E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_12) == 2.7144097E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.31E-03) ** 2 + error(nmssm_ext_ee1_13) ** 2)
printf "Expecting 2.6915841E+00"
show(integral(nmssm_ext_ee1_13))
real pull = abs (integral (nmssm_ext_ee1_13) - 2.6915841E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_13) == 2.6915841E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.81E-04) ** 2 + error(nmssm_ext_ee1_14) ** 2)
printf "Expecting 3.2991385E-01"
show(integral(nmssm_ext_ee1_14))
real pull = abs (integral (nmssm_ext_ee1_14) - 3.2991385E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_14) == 3.2991385E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.12E-01) ** 2 + error(nmssm_ext_ee1_15) ** 2)
printf "Expecting 1.7332945E+02"
show(integral(nmssm_ext_ee1_15))
real pull = abs (integral (nmssm_ext_ee1_15) - 1.7332945E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_15) == 1.7332945E+02)
printf "************************************************************************"
printf "* Checking e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.12E-03) ** 2 + error(nmssm_ext_ee1_16) ** 2)
printf "Expecting 1.3243721E+00"
show(integral(nmssm_ext_ee1_16))
real pull = abs (integral (nmssm_ext_ee1_16) - 1.3243721E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_16) == 1.3243721E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-03) ** 2 + error(nmssm_ext_ee1_17) ** 2)
printf "Expecting 1.3263646E+00"
show(integral(nmssm_ext_ee1_17))
real pull = abs (integral (nmssm_ext_ee1_17) - 1.3263646E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_17) == 1.3263646E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.99E-03) ** 2 + error(nmssm_ext_ee1_18) ** 2)
printf "Expecting 2.3819439E+00"
show(integral(nmssm_ext_ee1_18))
real pull = abs (integral (nmssm_ext_ee1_18) - 2.3819439E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_18) == 2.3819439E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.33E-03) ** 2 + error(nmssm_ext_ee1_19) ** 2)
printf "Expecting 1.5652821E+00"
show(integral(nmssm_ext_ee1_19))
real pull = abs (integral (nmssm_ext_ee1_19) - 1.5652821E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_19) == 1.5652821E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.03E-03) ** 2 + error(nmssm_ext_ee1_20) ** 2)
printf "Expecting 2.3819439E+00"
show(integral(nmssm_ext_ee1_20))
real pull = abs (integral (nmssm_ext_ee1_20) - 2.3819439E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_20) == 2.3819439E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.33E-03) ** 2 + error(nmssm_ext_ee1_21) ** 2)
printf "Expecting 1.5665966E+00"
show(integral(nmssm_ext_ee1_21))
real pull = abs (integral (nmssm_ext_ee1_21) - 1.5665966E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_21) == 1.5665966E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.04E-03) ** 2 + error(nmssm_ext_ee1_22) ** 2)
printf "Expecting 2.3914396E+00"
show(integral(nmssm_ext_ee1_22))
real pull = abs (integral (nmssm_ext_ee1_22) - 2.3914396E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_22) == 2.3914396E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.75E-04) ** 2 + error(nmssm_ext_ee1_23) ** 2)
printf "Expecting 7.9873153E-01"
show(integral(nmssm_ext_ee1_23))
real pull = abs (integral (nmssm_ext_ee1_23) - 7.9873153E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_23) == 7.9873153E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.47E-04) ** 2 + error(nmssm_ext_ee1_24) ** 2)
printf "Expecting 4.0418989E-01"
show(integral(nmssm_ext_ee1_24))
real pull = abs (integral (nmssm_ext_ee1_24) - 4.0418989E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_24) == 4.0418989E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.36E-03) ** 2 + error(nmssm_ext_ee1_25) ** 2)
printf "Expecting 1.6048294E+00"
show(integral(nmssm_ext_ee1_25))
real pull = abs (integral (nmssm_ext_ee1_25) - 1.6048294E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_25) == 1.6048294E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.30E-04) ** 2 + error(nmssm_ext_ee1_26) ** 2)
printf "Expecting 3.9136515E-01"
show(integral(nmssm_ext_ee1_26))
real pull = abs (integral (nmssm_ext_ee1_26) - 3.9136515E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_26) == 3.9136515E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-03) ** 2 + error(nmssm_ext_ee1_27) ** 2)
printf "Expecting 1.6044757E+00"
show(integral(nmssm_ext_ee1_27))
real pull = abs (integral (nmssm_ext_ee1_27) - 1.6044757E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_27) == 1.6044757E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.32E-04) ** 2 + error(nmssm_ext_ee1_28) ** 2)
printf "Expecting 3.9098748E-01"
show(integral(nmssm_ext_ee1_28))
real pull = abs (integral (nmssm_ext_ee1_28) - 3.9098748E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_28) == 3.9098748E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.70E-04) ** 2 + error(nmssm_ext_ee1_29) ** 2)
printf "Expecting 5.4571906E-01"
show(integral(nmssm_ext_ee1_29))
real pull = abs (integral (nmssm_ext_ee1_29) - 5.4571906E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_29) == 5.4571906E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.46E-04) ** 2 + error(nmssm_ext_ee1_30) ** 2)
printf "Expecting 6.4790435E-01"
show(integral(nmssm_ext_ee1_30))
real pull = abs (integral (nmssm_ext_ee1_30) - 6.4790435E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_30) == 6.4790435E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.45E-04) ** 2 + error(nmssm_ext_ee1_31) ** 2)
printf "Expecting 4.0084687E-01"
show(integral(nmssm_ext_ee1_31))
real pull = abs (integral (nmssm_ext_ee1_31) - 4.0084687E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_31) == 4.0084687E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-02) ** 2 + error(nmssm_ext_ee1_32) ** 2)
printf "Expecting 1.2048218E+01"
show(integral(nmssm_ext_ee1_32))
real pull = abs (integral (nmssm_ext_ee1_32) - 1.2048218E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_32) == 1.2048218E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.96E-03) ** 2 + error(nmssm_ext_ee1_33) ** 2)
printf "Expecting 1.7009856E+00"
show(integral(nmssm_ext_ee1_33))
real pull = abs (integral (nmssm_ext_ee1_33) - 1.7009856E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_33) == 1.7009856E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.83E-03) ** 2 + error(nmssm_ext_ee1_34) ** 2)
printf "Expecting 3.2924906E+00"
show(integral(nmssm_ext_ee1_34))
real pull = abs (integral (nmssm_ext_ee1_34) - 3.2924906E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_34) == 3.2924906E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.52E-04) ** 2 + error(nmssm_ext_ee1_35) ** 2)
printf "Expecting 2.4130666E-01"
show(integral(nmssm_ext_ee1_35))
real pull = abs (integral (nmssm_ext_ee1_35) - 2.4130666E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_35) == 2.4130666E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.60E-05) ** 2 + error(nmssm_ext_ee1_36) ** 2)
printf "Expecting 1.0399155E-01"
show(integral(nmssm_ext_ee1_36))
real pull = abs (integral (nmssm_ext_ee1_36) - 1.0399155E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_36) == 1.0399155E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.91E-04) ** 2 + error(nmssm_ext_ee1_37) ** 2)
printf "Expecting 2.5286887E-01"
show(integral(nmssm_ext_ee1_37))
real pull = abs (integral (nmssm_ext_ee1_37) - 2.5286887E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_37) == 2.5286887E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.90E-03) ** 2 + error(nmssm_ext_ee1_38) ** 2)
printf "Expecting 2.4889892E+00"
show(integral(nmssm_ext_ee1_38))
real pull = abs (integral (nmssm_ext_ee1_38) - 2.4889892E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_38) == 2.4889892E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.17E-04) ** 2 + error(nmssm_ext_ee1_39) ** 2)
printf "Expecting 1.3103275E-01"
show(integral(nmssm_ext_ee1_39))
real pull = abs (integral (nmssm_ext_ee1_39) - 1.3103275E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_39) == 1.3103275E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.36E-05) ** 2 + error(nmssm_ext_ee1_40) ** 2)
printf "Expecting 5.7754667E-02"
show(integral(nmssm_ext_ee1_40))
real pull = abs (integral (nmssm_ext_ee1_40) - 5.7754667E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_40) == 5.7754667E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.74E-03) ** 2 + error(nmssm_ext_ee1_41) ** 2)
printf "Expecting 8.4042542E+00"
show(integral(nmssm_ext_ee1_41))
real pull = abs (integral (nmssm_ext_ee1_41) - 8.4042542E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_41) == 8.4042542E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.44E-04) ** 2 + error(nmssm_ext_ee1_42) ** 2)
printf "Expecting 4.9416895E-01"
show(integral(nmssm_ext_ee1_42))
real pull = abs (integral (nmssm_ext_ee1_42) - 4.9416895E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_42) == 4.9416895E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.49E-04) ** 2 + error(nmssm_ext_ee1_43) ** 2)
printf "Expecting 1.6679747E-01"
show(integral(nmssm_ext_ee1_43))
real pull = abs (integral (nmssm_ext_ee1_43) - 1.6679747E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_43) == 1.6679747E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.64E-06) ** 2 + error(nmssm_ext_ee1_44) ** 2)
printf "Expecting 3.2678974E-03"
show(integral(nmssm_ext_ee1_44))
real pull = abs (integral (nmssm_ext_ee1_44) - 3.2678974E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_44) == 3.2678974E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.57E-03) ** 2 + error(nmssm_ext_ee1_45) ** 2)
printf "Expecting 4.8893282E+00"
show(integral(nmssm_ext_ee1_45))
real pull = abs (integral (nmssm_ext_ee1_45) - 4.8893282E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_45) == 4.8893282E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.19E-08) ** 2 + error(nmssm_ext_ee1_46) ** 2)
printf "Expecting 5.8502305E-05"
show(integral(nmssm_ext_ee1_46))
real pull = abs (integral (nmssm_ext_ee1_46) - 5.8502305E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_46) == 5.8502305E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.89E-02) ** 2 + error(nmssm_ext_ee1_47) ** 2)
printf "Expecting 2.2850785E+01"
show(integral(nmssm_ext_ee1_47))
real pull = abs (integral (nmssm_ext_ee1_47) - 2.2850785E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_47) == 2.2850785E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.03E-02) ** 2 + error(nmssm_ext_ee1_48) ** 2)
printf "Expecting 1.2598006E+01"
show(integral(nmssm_ext_ee1_48))
real pull = abs (integral (nmssm_ext_ee1_48) - 1.2598006E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_48) == 1.2598006E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.16E-04) ** 2 + error(nmssm_ext_ee1_49) ** 2)
printf "Expecting 7.5164320E-01"
show(integral(nmssm_ext_ee1_49))
real pull = abs (integral (nmssm_ext_ee1_49) - 7.5164320E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_49) == 7.5164320E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.13E-03) ** 2 + error(nmssm_ext_ee1_50) ** 2)
printf "Expecting 1.3302479E+00"
show(integral(nmssm_ext_ee1_50))
real pull = abs (integral (nmssm_ext_ee1_50) - 1.3302479E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_50) == 1.3302479E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-05) ** 2 + error(nmssm_ext_ee1_51) ** 2)
printf "Expecting 2.8504985E-02"
show(integral(nmssm_ext_ee1_51))
real pull = abs (integral (nmssm_ext_ee1_51) - 2.8504985E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_51) == 2.8504985E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.21E-10) ** 2 + error(nmssm_ext_ee1_52) ** 2)
printf "Expecting 3.8558359E-07"
show(integral(nmssm_ext_ee1_52))
real pull = abs (integral (nmssm_ext_ee1_52) - 3.8558359E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_52) == 3.8558359E-07)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.59E-10) ** 2 + error(nmssm_ext_ee1_53) ** 2)
printf "Expecting 7.7307473E-07"
show(integral(nmssm_ext_ee1_53))
real pull = abs (integral (nmssm_ext_ee1_53) - 7.7307473E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_53) == 7.7307473E-07)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.61E-08) ** 2 + error(nmssm_ext_ee1_54) ** 2)
printf "Expecting 3.0387620E-05"
show(integral(nmssm_ext_ee1_54))
real pull = abs (integral (nmssm_ext_ee1_54) - 3.0387620E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_54) == 3.0387620E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.34E-06) ** 2 + error(nmssm_ext_ee1_55) ** 2)
printf "Expecting 5.0789448E-03"
show(integral(nmssm_ext_ee1_55))
real pull = abs (integral (nmssm_ext_ee1_55) - 5.0789448E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_55) == 5.0789448E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.95E-08) ** 2 + error(nmssm_ext_ee1_56) ** 2)
printf "Expecting 5.7728434E-05"
show(integral(nmssm_ext_ee1_56))
real pull = abs (integral (nmssm_ext_ee1_56) - 5.7728434E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_56) == 5.7728434E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.92E-06) ** 2 + error(nmssm_ext_ee1_57) ** 2)
printf "Expecting 2.2687853E-03"
show(integral(nmssm_ext_ee1_57))
real pull = abs (integral (nmssm_ext_ee1_57) - 2.2687853E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_57) == 2.2687853E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-04) ** 2 + error(nmssm_ext_ee1_58) ** 2)
printf "Expecting 1.6113881E-01"
show(integral(nmssm_ext_ee1_58))
real pull = abs (integral (nmssm_ext_ee1_58) - 1.6113881E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_58) == 1.6113881E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.38E-04) ** 2 + error(nmssm_ext_ee1_59) ** 2)
printf "Expecting 3.9652879E-01"
show(integral(nmssm_ext_ee1_59))
real pull = abs (integral (nmssm_ext_ee1_59) - 3.9652879E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee1_59) == 3.9652879E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
