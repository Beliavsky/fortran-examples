

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-wz.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------






























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_wz_1 = Wm,Z => se1,SN11	
process nmssm_ext_wz_2 = Wm,Z => smu1,SN21	
process nmssm_ext_wz_3 = Wm,Z => stau1,SN31	
process nmssm_ext_wz_4 = Wm,Z => stau2,SN31	
process nmssm_ext_wz_5 = Wm,Z => sd1,su1c	
process nmssm_ext_wz_6 = Wm,Z => ss1,sc1c	
process nmssm_ext_wz_7 = Wm,Z => sb1,st1c	
process nmssm_ext_wz_8 = Wm,Z => sb2,st2c	
process nmssm_ext_wz_9 = Wm,Z => sb1,st2c	
process nmssm_ext_wz_10 = Wm,Z => sb2,st1c	
process nmssm_ext_wz_11 = Wm,Z => "ch1-",neu1	
process nmssm_ext_wz_12 = Wm,Z => "ch1-",neu2	
process nmssm_ext_wz_13 = Wm,Z => "ch1-",neu3	
process nmssm_ext_wz_14 = Wm,Z => "ch1-",neu4	
process nmssm_ext_wz_15 = Wm,Z => "ch1-",neu5	
process nmssm_ext_wz_16 = Wm,Z => "ch2-",neu1	
process nmssm_ext_wz_17 = Wm,Z => "ch2-",neu2	
process nmssm_ext_wz_18 = Wm,Z => "ch2-",neu3	
process nmssm_ext_wz_19 = Wm,Z => "ch2-",neu4	
process nmssm_ext_wz_20 = Wm,Z => "ch2-",neu5	
process nmssm_ext_wz_21 = Wm,Z => Hm,h01	
process nmssm_ext_wz_22 = Wm,Z => Hm,h02	
process nmssm_ext_wz_23 = Wm,Z => Hm,h03	
process nmssm_ext_wz_24 = Wm,Z => Hm,A01	
process nmssm_ext_wz_25 = Wm,Z => Hm,A02	
process nmssm_ext_wz_26 = Wm,Z => Wm,h01	
process nmssm_ext_wz_27 = Wm,Z => Wm,h02	
process nmssm_ext_wz_28 = Wm,Z => Wm,h03	
process nmssm_ext_wz_29 = Wm,Z => Wm,A01	
process nmssm_ext_wz_30 = Wm,Z => Wm,A02	
process nmssm_ext_wz_31 = Wm,Z => Hm,Z		
process nmssm_ext_wz_32 = Wm,Z => se1,SN11	
process nmssm_ext_wz_33 = Wm,Z => smu1,SN21	
process nmssm_ext_wz_34 = Wm,Z => stau1,SN31	
process nmssm_ext_wz_35 = Wm,Z => stau2,SN31	
process nmssm_ext_wz_36 = Wm,Z => sd1,su1c	
process nmssm_ext_wz_37 = Wm,Z => ss1,sc1c	
process nmssm_ext_wz_38 = Wm,Z => sb1,st1c	
process nmssm_ext_wz_39 = Wm,Z => sb2,st2c	
process nmssm_ext_wz_40 = Wm,Z => sb1,st2c	
process nmssm_ext_wz_41 = Wm,Z => sb2,st1c	
process nmssm_ext_wz_42 = Wm,Z => "ch1-",neu1	
process nmssm_ext_wz_43 = Wm,Z => "ch1-",neu2	
process nmssm_ext_wz_44 = Wm,Z => "ch1-",neu3	
process nmssm_ext_wz_45 = Wm,Z => "ch1-",neu4	
process nmssm_ext_wz_46 = Wm,Z => "ch1-",neu5	
process nmssm_ext_wz_47 = Wm,Z => "ch2-",neu1	
process nmssm_ext_wz_48 = Wm,Z => "ch2-",neu2	
process nmssm_ext_wz_49 = Wm,Z => "ch2-",neu3	
process nmssm_ext_wz_50 = Wm,Z => "ch2-",neu4	
process nmssm_ext_wz_51 = Wm,Z => "ch2-",neu5	
process nmssm_ext_wz_52 = Wm,Z => Hm,h01	
process nmssm_ext_wz_53 = Wm,Z => Hm,h02	
process nmssm_ext_wz_54 = Wm,Z => Hm,h03	
process nmssm_ext_wz_55 = Wm,Z => Hm,A01	
process nmssm_ext_wz_56 = Wm,Z => Hm,A02	
process nmssm_ext_wz_57 = Wm,Z => Wm,h01	
process nmssm_ext_wz_58 = Wm,Z => Wm,h02	
process nmssm_ext_wz_59 = Wm,Z => Wm,h03	
process nmssm_ext_wz_60 = Wm,Z => Wm,A01	
process nmssm_ext_wz_61 = Wm,Z => Wm,A02	
process nmssm_ext_wz_62 = Wm,Z => Hm,Z		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_1)
printf "************************************************************************"
printf "* Integrating Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_2)
printf "************************************************************************"
printf "* Integrating Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_3)
printf "************************************************************************"
printf "* Integrating Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_4)
printf "************************************************************************"
printf "* Integrating Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_5)
printf "************************************************************************"
printf "* Integrating Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_6)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_7)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_8)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_9)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_10)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_11)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_12)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_13)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_14)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_15)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_16)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_17)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_18)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_19)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_20)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_21)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_22)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_23)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_24)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_25)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_26)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_27)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_28)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_29)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_30)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_31)
printf "************************************************************************"
printf "* Integrating Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_32)
printf "************************************************************************"
printf "* Integrating Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_33)
printf "************************************************************************"
printf "* Integrating Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_34)
printf "************************************************************************"
printf "* Integrating Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_35)
printf "************************************************************************"
printf "* Integrating Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_36)
printf "************************************************************************"
printf "* Integrating Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_37)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_38)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_39)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_40)
printf "************************************************************************"
printf "* Integrating Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_41)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_42)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_43)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_44)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_45)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_46)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_47)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_48)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_49)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_50)
printf "************************************************************************"
printf "* Integrating Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_51)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_52)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_53)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_54)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_55)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_56)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_57)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_58)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_59)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_60)
printf "************************************************************************"
printf "* Integrating Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_61)
printf "************************************************************************"
printf "* Integrating Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Z
seed = 0
integrate (nmssm_ext_wz_62)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.36E-03) ** 2 + error(nmssm_ext_wz_1) ** 2)
printf "Expecting 6.1823728E+00"
show(integral(nmssm_ext_wz_1))
real pull = abs (integral (nmssm_ext_wz_1) - 6.1823728E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => se1,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_1) == 6.1823728E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.36E-03) ** 2 + error(nmssm_ext_wz_2) ** 2)
printf "Expecting 6.0174555E+00"
show(integral(nmssm_ext_wz_2))
real pull = abs (integral (nmssm_ext_wz_2) - 6.0174555E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => smu1,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_2) == 6.0174555E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.16E-03) ** 2 + error(nmssm_ext_wz_3) ** 2)
printf "Expecting 3.0583758E+00"
show(integral(nmssm_ext_wz_3))
real pull = abs (integral (nmssm_ext_wz_3) - 3.0583758E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => stau1,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_3) == 3.0583758E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.14E-03) ** 2 + error(nmssm_ext_wz_4) ** 2)
printf "Expecting 3.1677196E+00"
show(integral(nmssm_ext_wz_4))
real pull = abs (integral (nmssm_ext_wz_4) - 3.1677196E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => stau2,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_4) == 3.1677196E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.56E-03) ** 2 + error(nmssm_ext_wz_5) ** 2)
printf "Expecting 5.8539943E+00"
show(integral(nmssm_ext_wz_5))
real pull = abs (integral (nmssm_ext_wz_5) - 5.8539943E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sd1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_5) == 5.8539943E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.57E-03) ** 2 + error(nmssm_ext_wz_6) ** 2)
printf "Expecting 5.8484252E+00"
show(integral(nmssm_ext_wz_6))
real pull = abs (integral (nmssm_ext_wz_6) - 5.8484252E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_6) == 5.8484252E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.27E-02) ** 2 + error(nmssm_ext_wz_7) ** 2)
printf "Expecting 5.0997897E+01"
show(integral(nmssm_ext_wz_7))
real pull = abs (integral (nmssm_ext_wz_7) - 5.0997897E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_7) == 5.0997897E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.33E-02) ** 2 + error(nmssm_ext_wz_8) ** 2)
printf "Expecting 1.0032500E+02"
show(integral(nmssm_ext_wz_8))
real pull = abs (integral (nmssm_ext_wz_8) - 1.0032500E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_8) == 1.0032500E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.22E-02) ** 2 + error(nmssm_ext_wz_9) ** 2)
printf "Expecting 7.8599193E+01"
show(integral(nmssm_ext_wz_9))
real pull = abs (integral (nmssm_ext_wz_9) - 7.8599193E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_9) == 7.8599193E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.44E-02) ** 2 + error(nmssm_ext_wz_10) ** 2)
printf "Expecting 5.7834983E+01"
show(integral(nmssm_ext_wz_10))
real pull = abs (integral (nmssm_ext_wz_10) - 5.7834983E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb2,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_10) == 5.7834983E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.21E-02) ** 2 + error(nmssm_ext_wz_11) ** 2)
printf "Expecting 1.2799495E+01"
show(integral(nmssm_ext_wz_11))
real pull = abs (integral (nmssm_ext_wz_11) - 1.2799495E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_11) == 1.2799495E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.23E-02) ** 2 + error(nmssm_ext_wz_12) ** 2)
printf "Expecting 5.7350699E+01"
show(integral(nmssm_ext_wz_12))
real pull = abs (integral (nmssm_ext_wz_12) - 5.7350699E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_12) == 5.7350699E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.06E-01) ** 2 + error(nmssm_ext_wz_13) ** 2)
printf "Expecting 4.2624862E+02"
show(integral(nmssm_ext_wz_13))
real pull = abs (integral (nmssm_ext_wz_13) - 4.2624862E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_13) == 4.2624862E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.16E-02) ** 2 + error(nmssm_ext_wz_14) ** 2)
printf "Expecting 1.1574215E+02"
show(integral(nmssm_ext_wz_14))
real pull = abs (integral (nmssm_ext_wz_14) - 1.1574215E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_14) == 1.1574215E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.62E-02) ** 2 + error(nmssm_ext_wz_15) ** 2)
printf "Expecting 1.9356826E+02"
show(integral(nmssm_ext_wz_15))
real pull = abs (integral (nmssm_ext_wz_15) - 1.9356826E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_15) == 1.9356826E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.77E-03) ** 2 + error(nmssm_ext_wz_16) ** 2)
printf "Expecting 8.6745758E+00"
show(integral(nmssm_ext_wz_16))
real pull = abs (integral (nmssm_ext_wz_16) - 8.6745758E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_16) == 8.6745758E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.52E-02) ** 2 + error(nmssm_ext_wz_17) ** 2)
printf "Expecting 3.6788337E+01"
show(integral(nmssm_ext_wz_17))
real pull = abs (integral (nmssm_ext_wz_17) - 3.6788337E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_17) == 3.6788337E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.93E-02) ** 2 + error(nmssm_ext_wz_18) ** 2)
printf "Expecting 1.1242986E+02"
show(integral(nmssm_ext_wz_18))
real pull = abs (integral (nmssm_ext_wz_18) - 1.1242986E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_18) == 1.1242986E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.71E-02) ** 2 + error(nmssm_ext_wz_19) ** 2)
printf "Expecting 7.5919004E+01"
show(integral(nmssm_ext_wz_19))
real pull = abs (integral (nmssm_ext_wz_19) - 7.5919004E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_19) == 7.5919004E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.18E-02) ** 2 + error(nmssm_ext_wz_20) ** 2)
printf "Expecting 4.4208533E+01"
show(integral(nmssm_ext_wz_20))
real pull = abs (integral (nmssm_ext_wz_20) - 4.4208533E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_20) == 4.4208533E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.93E-06) ** 2 + error(nmssm_ext_wz_21) ** 2)
printf "Expecting 8.3326664E-03"
show(integral(nmssm_ext_wz_21))
real pull = abs (integral (nmssm_ext_wz_21) - 8.3326664E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_21) == 8.3326664E-03)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.96E-04) ** 2 + error(nmssm_ext_wz_22) ** 2)
printf "Expecting 3.2535350E-01"
show(integral(nmssm_ext_wz_22))
real pull = abs (integral (nmssm_ext_wz_22) - 3.2535350E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_22) == 3.2535350E-01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.56E-03) ** 2 + error(nmssm_ext_wz_23) ** 2)
printf "Expecting 4.2075824E+00"
show(integral(nmssm_ext_wz_23))
real pull = abs (integral (nmssm_ext_wz_23) - 4.2075824E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_23) == 4.2075824E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.43E-04) ** 2 + error(nmssm_ext_wz_24) ** 2)
printf "Expecting 7.3823137E-01"
show(integral(nmssm_ext_wz_24))
real pull = abs (integral (nmssm_ext_wz_24) - 7.3823137E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_24) == 7.3823137E-01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.68E-03) ** 2 + error(nmssm_ext_wz_25) ** 2)
printf "Expecting 2.3423849E+00"
show(integral(nmssm_ext_wz_25))
real pull = abs (integral (nmssm_ext_wz_25) - 2.3423849E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_25) == 2.3423849E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.76E+02) ** 2 + error(nmssm_ext_wz_26) ** 2)
printf "Expecting 7.9377656E+04"
show(integral(nmssm_ext_wz_26))
real pull = abs (integral (nmssm_ext_wz_26) - 7.9377656E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_26) == 7.9377656E+04)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.78E+00) ** 2 + error(nmssm_ext_wz_27) ** 2)
printf "Expecting 1.6924572E+03"
show(integral(nmssm_ext_wz_27))
real pull = abs (integral (nmssm_ext_wz_27) - 1.6924572E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_27) == 1.6924572E+03)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.04E-05) ** 2 + error(nmssm_ext_wz_28) ** 2)
printf "Expecting 3.5044992E-02"
show(integral(nmssm_ext_wz_28))
real pull = abs (integral (nmssm_ext_wz_28) - 3.5044992E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_28) == 3.5044992E-02)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.55E-07) ** 2 + error(nmssm_ext_wz_29) ** 2)
printf "Expecting 1.3415206E-04"
show(integral(nmssm_ext_wz_29))
real pull = abs (integral (nmssm_ext_wz_29) - 1.3415206E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_29) == 1.3415206E-04)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.63E-05) ** 2 + error(nmssm_ext_wz_30) ** 2)
printf "Expecting 3.4721284E-02"
show(integral(nmssm_ext_wz_30))
real pull = abs (integral (nmssm_ext_wz_30) - 3.4721284E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_30) == 3.4721284E-02)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.73E-05) ** 2 + error(nmssm_ext_wz_31) ** 2)
printf "Expecting 3.5638173E-02"
show(integral(nmssm_ext_wz_31))
real pull = abs (integral (nmssm_ext_wz_31) - 3.5638173E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_31) == 3.5638173E-02)
printf "************************************************************************"
printf "* Checking Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.79E-03) ** 2 + error(nmssm_ext_wz_32) ** 2)
printf "Expecting 2.3723458E+00"
show(integral(nmssm_ext_wz_32))
real pull = abs (integral (nmssm_ext_wz_32) - 2.3723458E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => se1,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_32) == 2.3723458E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.77E-03) ** 2 + error(nmssm_ext_wz_33) ** 2)
printf "Expecting 2.3079440E+00"
show(integral(nmssm_ext_wz_33))
real pull = abs (integral (nmssm_ext_wz_33) - 2.3079440E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => smu1,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_33) == 2.3079440E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-03) ** 2 + error(nmssm_ext_wz_34) ** 2)
printf "Expecting 1.1719223E+00"
show(integral(nmssm_ext_wz_34))
real pull = abs (integral (nmssm_ext_wz_34) - 1.1719223E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => stau1,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_34) == 1.1719223E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_wz_35) ** 2)
printf "Expecting 1.2065173E+00"
show(integral(nmssm_ext_wz_35))
real pull = abs (integral (nmssm_ext_wz_35) - 1.2065173E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => stau2,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_35) == 1.2065173E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.53E-03) ** 2 + error(nmssm_ext_wz_36) ** 2)
printf "Expecting 3.5116862E+00"
show(integral(nmssm_ext_wz_36))
real pull = abs (integral (nmssm_ext_wz_36) - 3.5116862E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sd1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_36) == 3.5116862E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.51E-03) ** 2 + error(nmssm_ext_wz_37) ** 2)
printf "Expecting 3.5130672E+00"
show(integral(nmssm_ext_wz_37))
real pull = abs (integral (nmssm_ext_wz_37) - 3.5130672E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ss1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_37) == 3.5130672E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.51E-03) ** 2 + error(nmssm_ext_wz_38) ** 2)
printf "Expecting 1.1442296E+01"
show(integral(nmssm_ext_wz_38))
real pull = abs (integral (nmssm_ext_wz_38) - 1.1442296E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_38) == 1.1442296E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.78E-02) ** 2 + error(nmssm_ext_wz_39) ** 2)
printf "Expecting 2.3471568E+01"
show(integral(nmssm_ext_wz_39))
real pull = abs (integral (nmssm_ext_wz_39) - 2.3471568E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_39) == 2.3471568E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-02) ** 2 + error(nmssm_ext_wz_40) ** 2)
printf "Expecting 1.7936197E+01"
show(integral(nmssm_ext_wz_40))
real pull = abs (integral (nmssm_ext_wz_40) - 1.7936197E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_40) == 1.7936197E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.51E-03) ** 2 + error(nmssm_ext_wz_41) ** 2)
printf "Expecting 1.2779349E+01"
show(integral(nmssm_ext_wz_41))
real pull = abs (integral (nmssm_ext_wz_41) - 1.2779349E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => sb2,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_41) == 1.2779349E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.51E-03) ** 2 + error(nmssm_ext_wz_42) ** 2)
printf "Expecting 5.5856617E+00"
show(integral(nmssm_ext_wz_42))
real pull = abs (integral (nmssm_ext_wz_42) - 5.5856617E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_42) == 5.5856617E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.20E-02) ** 2 + error(nmssm_ext_wz_43) ** 2)
printf "Expecting 2.5887192E+01"
show(integral(nmssm_ext_wz_43))
real pull = abs (integral (nmssm_ext_wz_43) - 2.5887192E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_43) == 2.5887192E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.32E-01) ** 2 + error(nmssm_ext_wz_44) ** 2)
printf "Expecting 1.8741212E+02"
show(integral(nmssm_ext_wz_44))
real pull = abs (integral (nmssm_ext_wz_44) - 1.8741212E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_44) == 1.8741212E+02)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.04E-02) ** 2 + error(nmssm_ext_wz_45) ** 2)
printf "Expecting 5.2929252E+01"
show(integral(nmssm_ext_wz_45))
real pull = abs (integral (nmssm_ext_wz_45) - 5.2929252E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_45) == 5.2929252E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.60E-02) ** 2 + error(nmssm_ext_wz_46) ** 2)
printf "Expecting 8.6822394E+01"
show(integral(nmssm_ext_wz_46))
real pull = abs (integral (nmssm_ext_wz_46) - 8.6822394E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch1-,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_46) == 8.6822394E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.72E-03) ** 2 + error(nmssm_ext_wz_47) ** 2)
printf "Expecting 4.2531655E+00"
show(integral(nmssm_ext_wz_47))
real pull = abs (integral (nmssm_ext_wz_47) - 4.2531655E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_47) == 4.2531655E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.07E-03) ** 2 + error(nmssm_ext_wz_48) ** 2)
printf "Expecting 1.8621651E+01"
show(integral(nmssm_ext_wz_48))
real pull = abs (integral (nmssm_ext_wz_48) - 1.8621651E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_48) == 1.8621651E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.50E-02) ** 2 + error(nmssm_ext_wz_49) ** 2)
printf "Expecting 5.0990585E+01"
show(integral(nmssm_ext_wz_49))
real pull = abs (integral (nmssm_ext_wz_49) - 5.0990585E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_49) == 5.0990585E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.23E-02) ** 2 + error(nmssm_ext_wz_50) ** 2)
printf "Expecting 3.8780175E+01"
show(integral(nmssm_ext_wz_50))
real pull = abs (integral (nmssm_ext_wz_50) - 3.8780175E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_50) == 3.8780175E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.19E-03) ** 2 + error(nmssm_ext_wz_51) ** 2)
printf "Expecting 2.3030112E+01"
show(integral(nmssm_ext_wz_51))
real pull = abs (integral (nmssm_ext_wz_51) - 2.3030112E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => ch2-,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_51) == 2.3030112E+01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.05E-06) ** 2 + error(nmssm_ext_wz_52) ** 2)
printf "Expecting 3.0693647E-03"
show(integral(nmssm_ext_wz_52))
real pull = abs (integral (nmssm_ext_wz_52) - 3.0693647E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_52) == 3.0693647E-03)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.00E-05) ** 2 + error(nmssm_ext_wz_53) ** 2)
printf "Expecting 1.2069146E-01"
show(integral(nmssm_ext_wz_53))
real pull = abs (integral (nmssm_ext_wz_53) - 1.2069146E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_53) == 1.2069146E-01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.16E-03) ** 2 + error(nmssm_ext_wz_54) ** 2)
printf "Expecting 2.1415142E+00"
show(integral(nmssm_ext_wz_54))
real pull = abs (integral (nmssm_ext_wz_54) - 2.1415142E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_54) == 2.1415142E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.73E-04) ** 2 + error(nmssm_ext_wz_55) ** 2)
printf "Expecting 2.7179804E-01"
show(integral(nmssm_ext_wz_55))
real pull = abs (integral (nmssm_ext_wz_55) - 2.7179804E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_55) == 2.7179804E-01)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.44E-04) ** 2 + error(nmssm_ext_wz_56) ** 2)
printf "Expecting 1.2822785E+00"
show(integral(nmssm_ext_wz_56))
real pull = abs (integral (nmssm_ext_wz_56) - 1.2822785E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_56) == 1.2822785E+00)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.08E+02) ** 2 + error(nmssm_ext_wz_57) ** 2)
printf "Expecting 7.9407356E+04"
show(integral(nmssm_ext_wz_57))
real pull = abs (integral (nmssm_ext_wz_57) - 7.9407356E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_57) == 7.9407356E+04)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E+00) ** 2 + error(nmssm_ext_wz_58) ** 2)
printf "Expecting 1.7051486E+03"
show(integral(nmssm_ext_wz_58))
real pull = abs (integral (nmssm_ext_wz_58) - 1.7051486E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_58) == 1.7051486E+03)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.23E-05) ** 2 + error(nmssm_ext_wz_59) ** 2)
printf "Expecting 3.9902925E-02"
show(integral(nmssm_ext_wz_59))
real pull = abs (integral (nmssm_ext_wz_59) - 3.9902925E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_59) == 3.9902925E-02)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.93E-08) ** 2 + error(nmssm_ext_wz_60) ** 2)
printf "Expecting 6.9977224E-05"
show(integral(nmssm_ext_wz_60))
real pull = abs (integral (nmssm_ext_wz_60) - 6.9977224E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_60) == 6.9977224E-05)
printf "************************************************************************"
printf "* Checking Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.25E-05) ** 2 + error(nmssm_ext_wz_61) ** 2)
printf "Expecting 1.3608286E-02"
show(integral(nmssm_ext_wz_61))
real pull = abs (integral (nmssm_ext_wz_61) - 1.3608286E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Wm,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_61) == 1.3608286E-02)
printf "************************************************************************"
printf "* Checking Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.25E-05) ** 2 + error(nmssm_ext_wz_62) ** 2)
printf "Expecting 1.3989255E-02"
show(integral(nmssm_ext_wz_62))
real pull = abs (integral (nmssm_ext_wz_62) - 1.3989255E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Z => Hm,Z		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_wz_62) == 1.3989255E-02)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
