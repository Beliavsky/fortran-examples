

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-ga.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -----------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                 -----
! -----------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -----------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
! show(real)
! -----------------------------------------------------------------------
iterations = 3:50000
! -----------------------------------------------------------------------


























! -----------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_ga_1 = gl,A => t,T	     
process nmssm_ext_ga_2 = gl,A => su1,su1c   
process nmssm_ext_ga_3 = gl,A => su2,su2c   
process nmssm_ext_ga_4 = gl,A => sc1,sc1c   
process nmssm_ext_ga_5 = gl,A => sc2,sc2c   
process nmssm_ext_ga_6 = gl,A => st1,st1c   
process nmssm_ext_ga_7 = gl,A => st2,st2c   
process nmssm_ext_ga_8 = gl,A => sd1,sd1c   
process nmssm_ext_ga_9 = gl,A => sd2,sd2c   
process nmssm_ext_ga_10 = gl,A => ss1,ss1c   
process nmssm_ext_ga_11 = gl,A => ss2,ss2c   
process nmssm_ext_ga_12 = gl,A => sb1,sb1c   
process nmssm_ext_ga_13 = gl,A => sb2,sb2c   
process nmssm_ext_ga_14 = gl,A => t,T	     
process nmssm_ext_ga_15 = gl,A => su1,su1c   
process nmssm_ext_ga_16 = gl,A => su2,su2c   
process nmssm_ext_ga_17 = gl,A => sc1,sc1c   
process nmssm_ext_ga_18 = gl,A => sc2,sc2c   
process nmssm_ext_ga_19 = gl,A => st1,st1c   
process nmssm_ext_ga_20 = gl,A => st2,st2c   
process nmssm_ext_ga_21 = gl,A => sd1,sd1c   
process nmssm_ext_ga_22 = gl,A => sd2,sd2c   
process nmssm_ext_ga_23 = gl,A => ss1,ss1c   
process nmssm_ext_ga_24 = gl,A => ss2,ss2c   
process nmssm_ext_ga_25 = gl,A => sb1,sb1c   
process nmssm_ext_ga_26 = gl,A => sb2,sb2c   
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating gl,A => t,T	      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_1)
printf "************************************************************************"
printf "* Integrating gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_2)
printf "************************************************************************"
printf "* Integrating gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_3)
printf "************************************************************************"
printf "* Integrating gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_4)
printf "************************************************************************"
printf "* Integrating gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_5)
printf "************************************************************************"
printf "* Integrating gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_6)
printf "************************************************************************"
printf "* Integrating gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_7)
printf "************************************************************************"
printf "* Integrating gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_8)
printf "************************************************************************"
printf "* Integrating gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_9)
printf "************************************************************************"
printf "* Integrating gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_10)
printf "************************************************************************"
printf "* Integrating gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_11)
printf "************************************************************************"
printf "* Integrating gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_12)
printf "************************************************************************"
printf "* Integrating gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_13)
printf "************************************************************************"
printf "* Integrating gl,A => t,T	      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_14)
printf "************************************************************************"
printf "* Integrating gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_15)
printf "************************************************************************"
printf "* Integrating gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_16)
printf "************************************************************************"
printf "* Integrating gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_17)
printf "************************************************************************"
printf "* Integrating gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_18)
printf "************************************************************************"
printf "* Integrating gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_19)
printf "************************************************************************"
printf "* Integrating gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_20)
printf "************************************************************************"
printf "* Integrating gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_21)
printf "************************************************************************"
printf "* Integrating gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_22)
printf "************************************************************************"
printf "* Integrating gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_23)
printf "************************************************************************"
printf "* Integrating gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_24)
printf "************************************************************************"
printf "* Integrating gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_25)
printf "************************************************************************"
printf "* Integrating gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,A
seed = 0
integrate (nmssm_ext_ga_26)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking gl,A => t,T	      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-01) ** 2 + error(nmssm_ext_ga_1) ** 2)
printf "Expecting 5.2971809E+02"
show(integral(nmssm_ext_ga_1))
real pull = abs (integral (nmssm_ext_ga_1) - 5.2971809E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => t,T	      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => t,T	      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => t,T	      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => t,T	      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => t,T	      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_1) == 5.2971809E+02)
printf "************************************************************************"
printf "* Checking gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.92E-03) ** 2 + error(nmssm_ext_ga_2) ** 2)
printf "Expecting 2.2573580E+01"
show(integral(nmssm_ext_ga_2))
real pull = abs (integral (nmssm_ext_ga_2) - 2.2573580E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => su1,su1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_2) == 2.2573580E+01)
printf "************************************************************************"
printf "* Checking gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.84E-03) ** 2 + error(nmssm_ext_ga_3) ** 2)
printf "Expecting 2.2572249E+01"
show(integral(nmssm_ext_ga_3))
real pull = abs (integral (nmssm_ext_ga_3) - 2.2572249E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => su2,su2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_3) == 2.2572249E+01)
printf "************************************************************************"
printf "* Checking gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.71E-03) ** 2 + error(nmssm_ext_ga_4) ** 2)
printf "Expecting 2.2579369E+01"
show(integral(nmssm_ext_ga_4))
real pull = abs (integral (nmssm_ext_ga_4) - 2.2579369E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sc1,sc1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_4) == 2.2579369E+01)
printf "************************************************************************"
printf "* Checking gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.09E-03) ** 2 + error(nmssm_ext_ga_5) ** 2)
printf "Expecting 2.2578124E+01"
show(integral(nmssm_ext_ga_5))
real pull = abs (integral (nmssm_ext_ga_5) - 2.2578124E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sc2,sc2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_5) == 2.2578124E+01)
printf "************************************************************************"
printf "* Checking gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-02) ** 2 + error(nmssm_ext_ga_6) ** 2)
printf "Expecting 2.6687660E+01"
show(integral(nmssm_ext_ga_6))
real pull = abs (integral (nmssm_ext_ga_6) - 2.6687660E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => st1,st1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_6) == 2.6687660E+01)
printf "************************************************************************"
printf "* Checking gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.24E-03) ** 2 + error(nmssm_ext_ga_7) ** 2)
printf "Expecting 2.0965880E+01"
show(integral(nmssm_ext_ga_7))
real pull = abs (integral (nmssm_ext_ga_7) - 2.0965880E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => st2,st2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_7) == 2.0965880E+01)
printf "************************************************************************"
printf "* Checking gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-03) ** 2 + error(nmssm_ext_ga_8) ** 2)
printf "Expecting 5.6383495E+00"
show(integral(nmssm_ext_ga_8))
real pull = abs (integral (nmssm_ext_ga_8) - 5.6383495E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sd1,sd1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_8) == 5.6383495E+00)
printf "************************************************************************"
printf "* Checking gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-03) ** 2 + error(nmssm_ext_ga_9) ** 2)
printf "Expecting 5.6459148E+00"
show(integral(nmssm_ext_ga_9))
real pull = abs (integral (nmssm_ext_ga_9) - 5.6459148E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sd2,sd2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_9) == 5.6459148E+00)
printf "************************************************************************"
printf "* Checking gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.93E-03) ** 2 + error(nmssm_ext_ga_10) ** 2)
printf "Expecting 5.6394649E+00"
show(integral(nmssm_ext_ga_10))
real pull = abs (integral (nmssm_ext_ga_10) - 5.6394649E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => ss1,ss1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_10) == 5.6394649E+00)
printf "************************************************************************"
printf "* Checking gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.93E-03) ** 2 + error(nmssm_ext_ga_11) ** 2)
printf "Expecting 5.6431251E+00"
show(integral(nmssm_ext_ga_11))
real pull = abs (integral (nmssm_ext_ga_11) - 5.6431251E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => ss2,ss2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_11) == 5.6431251E+00)
printf "************************************************************************"
printf "* Checking gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.93E-03) ** 2 + error(nmssm_ext_ga_12) ** 2)
printf "Expecting 5.6568356E+00"
show(integral(nmssm_ext_ga_12))
real pull = abs (integral (nmssm_ext_ga_12) - 5.6568356E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sb1,sb1c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_12) == 5.6568356E+00)
printf "************************************************************************"
printf "* Checking gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-03) ** 2 + error(nmssm_ext_ga_13) ** 2)
printf "Expecting 5.6280896E+00"
show(integral(nmssm_ext_ga_13))
real pull = abs (integral (nmssm_ext_ga_13) - 5.6280896E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sb2,sb2c    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_13) == 5.6280896E+00)
printf "************************************************************************"
printf "* Checking gl,A => t,T	      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.72E-03) ** 2 + error(nmssm_ext_ga_14) ** 2)
printf "Expecting 2.3006541E+02"
show(integral(nmssm_ext_ga_14))
real pull = abs (integral (nmssm_ext_ga_14) - 2.3006541E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => t,T	      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => t,T	      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => t,T	      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => t,T	      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => t,T	      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_14) == 2.3006541E+02)
printf "************************************************************************"
printf "* Checking gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.21E-04) ** 2 + error(nmssm_ext_ga_15) ** 2)
printf "Expecting 1.1863544E+01"
show(integral(nmssm_ext_ga_15))
real pull = abs (integral (nmssm_ext_ga_15) - 1.1863544E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => su1,su1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_15) == 1.1863544E+01)
printf "************************************************************************"
printf "* Checking gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.32E-04) ** 2 + error(nmssm_ext_ga_16) ** 2)
printf "Expecting 1.1858754E+01"
show(integral(nmssm_ext_ga_16))
real pull = abs (integral (nmssm_ext_ga_16) - 1.1858754E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => su2,su2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_16) == 1.1858754E+01)
printf "************************************************************************"
printf "* Checking gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.10E-04) ** 2 + error(nmssm_ext_ga_17) ** 2)
printf "Expecting 1.1864777E+01"
show(integral(nmssm_ext_ga_17))
real pull = abs (integral (nmssm_ext_ga_17) - 1.1864777E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sc1,sc1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 5 * error_sum
expect (integral (nmssm_ext_ga_17) == 1.1864777E+01)
printf "************************************************************************"
printf "* Checking gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.18E-04) ** 2 + error(nmssm_ext_ga_18) ** 2)
printf "Expecting 1.1860867E+01"
show(integral(nmssm_ext_ga_18))
real pull = abs (integral (nmssm_ext_ga_18) - 1.1860867E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sc2,sc2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_18) == 1.1860867E+01)
printf "************************************************************************"
printf "* Checking gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.41E-04) ** 2 + error(nmssm_ext_ga_19) ** 2)
printf "Expecting 1.3848759E+01"
show(integral(nmssm_ext_ga_19))
real pull = abs (integral (nmssm_ext_ga_19) - 1.3848759E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => st1,st1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_19) == 1.3848759E+01)
printf "************************************************************************"
printf "* Checking gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.70E-04) ** 2 + error(nmssm_ext_ga_20) ** 2)
printf "Expecting 1.0334309E+01"
show(integral(nmssm_ext_ga_20))
real pull = abs (integral (nmssm_ext_ga_20) - 1.0334309E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => st2,st2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_20) == 1.0334309E+01)
printf "************************************************************************"
printf "* Checking gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.27E-04) ** 2 + error(nmssm_ext_ga_21) ** 2)
printf "Expecting 2.9620062E+00"
show(integral(nmssm_ext_ga_21))
real pull = abs (integral (nmssm_ext_ga_21) - 2.9620062E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sd1,sd1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_21) == 2.9620062E+00)
printf "************************************************************************"
printf "* Checking gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E-04) ** 2 + error(nmssm_ext_ga_22) ** 2)
printf "Expecting 2.9639171E+00"
show(integral(nmssm_ext_ga_22))
real pull = abs (integral (nmssm_ext_ga_22) - 2.9639171E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sd2,sd2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_22) == 2.9639171E+00)
printf "************************************************************************"
printf "* Checking gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E-04) ** 2 + error(nmssm_ext_ga_23) ** 2)
printf "Expecting 2.9622609E+00"
show(integral(nmssm_ext_ga_23))
real pull = abs (integral (nmssm_ext_ga_23) - 2.9622609E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => ss1,ss1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_23) == 2.9622609E+00)
printf "************************************************************************"
printf "* Checking gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E-04) ** 2 + error(nmssm_ext_ga_24) ** 2)
printf "Expecting 2.9639384E+00"
show(integral(nmssm_ext_ga_24))
real pull = abs (integral (nmssm_ext_ga_24) - 2.9639384E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => ss2,ss2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_24) == 2.9639384E+00)
printf "************************************************************************"
printf "* Checking gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E-04) ** 2 + error(nmssm_ext_ga_25) ** 2)
printf "Expecting 2.9723032E+00"
show(integral(nmssm_ext_ga_25))
real pull = abs (integral (nmssm_ext_ga_25) - 2.9723032E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sb1,sb1c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ga_25) == 2.9723032E+00)
printf "************************************************************************"
printf "* Checking gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.27E-04) ** 2 + error(nmssm_ext_ga_26) ** 2)
printf "Expecting 2.9535715E+00"
show(integral(nmssm_ext_ga_26))
real pull = abs (integral (nmssm_ext_ga_26) - 2.9535715E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,A => sb2,sb2c    @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_ga_26) == 2.9535715E+00)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
