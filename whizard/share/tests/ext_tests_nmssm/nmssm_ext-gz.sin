

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-gz.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------






























! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_gz_1 = gl,Z => t,T		
process nmssm_ext_gz_2 = gl,Z => su1,su1c	
process nmssm_ext_gz_3 = gl,Z => su2,su2c	
process nmssm_ext_gz_4 = gl,Z => sc1,sc1c	
process nmssm_ext_gz_5 = gl,Z => sc2,sc2c	
process nmssm_ext_gz_6 = gl,Z => st1,st1c	
process nmssm_ext_gz_7 = gl,Z => st2,st2c	
process nmssm_ext_gz_8 = gl,Z => st1,st2c	
process nmssm_ext_gz_9 = gl,Z => sd1,sd1c	
process nmssm_ext_gz_10 = gl,Z => sd2,sd2c	
process nmssm_ext_gz_11 = gl,Z => ss1,ss1c	
process nmssm_ext_gz_12 = gl,Z => ss2,ss2c	
process nmssm_ext_gz_13 = gl,Z => sb1,sb1c	
process nmssm_ext_gz_14 = gl,Z => sb2,sb2c	
process nmssm_ext_gz_15 = gl,Z => sb1,sb2c	
process nmssm_ext_gz_16 = gl,Z => t,T		
process nmssm_ext_gz_17 = gl,Z => su1,su1c	
process nmssm_ext_gz_18 = gl,Z => su2,su2c	
process nmssm_ext_gz_19 = gl,Z => sc1,sc1c	
process nmssm_ext_gz_20 = gl,Z => sc2,sc2c	
process nmssm_ext_gz_21 = gl,Z => st1,st1c	
process nmssm_ext_gz_22 = gl,Z => st2,st2c	
process nmssm_ext_gz_23 = gl,Z => st1,st2c	
process nmssm_ext_gz_24 = gl,Z => sd1,sd1c	
process nmssm_ext_gz_25 = gl,Z => sd2,sd2c	
process nmssm_ext_gz_26 = gl,Z => ss1,ss1c	
process nmssm_ext_gz_27 = gl,Z => ss2,ss2c	
process nmssm_ext_gz_28 = gl,Z => sb1,sb1c	
process nmssm_ext_gz_29 = gl,Z => sb2,sb2c	
process nmssm_ext_gz_30 = gl,Z => sb1,sb2c	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_1)
printf "************************************************************************"
printf "* Integrating gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_2)
printf "************************************************************************"
printf "* Integrating gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_3)
printf "************************************************************************"
printf "* Integrating gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_4)
printf "************************************************************************"
printf "* Integrating gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_5)
printf "************************************************************************"
printf "* Integrating gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_6)
printf "************************************************************************"
printf "* Integrating gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_7)
printf "************************************************************************"
printf "* Integrating gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_8)
printf "************************************************************************"
printf "* Integrating gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_9)
printf "************************************************************************"
printf "* Integrating gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_10)
printf "************************************************************************"
printf "* Integrating gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_11)
printf "************************************************************************"
printf "* Integrating gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_12)
printf "************************************************************************"
printf "* Integrating gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_13)
printf "************************************************************************"
printf "* Integrating gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_14)
printf "************************************************************************"
printf "* Integrating gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_15)
printf "************************************************************************"
printf "* Integrating gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_16)
printf "************************************************************************"
printf "* Integrating gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_17)
printf "************************************************************************"
printf "* Integrating gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_18)
printf "************************************************************************"
printf "* Integrating gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_19)
printf "************************************************************************"
printf "* Integrating gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_20)
printf "************************************************************************"
printf "* Integrating gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_21)
printf "************************************************************************"
printf "* Integrating gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_22)
printf "************************************************************************"
printf "* Integrating gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_23)
printf "************************************************************************"
printf "* Integrating gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_24)
printf "************************************************************************"
printf "* Integrating gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_25)
printf "************************************************************************"
printf "* Integrating gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_26)
printf "************************************************************************"
printf "* Integrating gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_27)
printf "************************************************************************"
printf "* Integrating gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_28)
printf "************************************************************************"
printf "* Integrating gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_29)
printf "************************************************************************"
printf "* Integrating gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,Z
seed = 0
integrate (nmssm_ext_gz_30)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.53E-01) ** 2 + error(nmssm_ext_gz_1) ** 2)
printf "Expecting 2.6515166E+03"
show(integral(nmssm_ext_gz_1))
real pull = abs (integral (nmssm_ext_gz_1) - 2.6515166E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_1) == 2.6515166E+03)
printf "************************************************************************"
printf "* Checking gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.82E-03) ** 2 + error(nmssm_ext_gz_2) ** 2)
printf "Expecting 2.2437656E+01"
show(integral(nmssm_ext_gz_2))
real pull = abs (integral (nmssm_ext_gz_2) - 2.2437656E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_2) == 2.2437656E+01)
printf "************************************************************************"
printf "* Checking gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.59E-03) ** 2 + error(nmssm_ext_gz_3) ** 2)
printf "Expecting 4.5932203E+00"
show(integral(nmssm_ext_gz_3))
real pull = abs (integral (nmssm_ext_gz_3) - 4.5932203E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_3) == 4.5932203E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.93E-03) ** 2 + error(nmssm_ext_gz_4) ** 2)
printf "Expecting 2.2427425E+01"
show(integral(nmssm_ext_gz_4))
real pull = abs (integral (nmssm_ext_gz_4) - 2.2427425E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_4) == 2.2427425E+01)
printf "************************************************************************"
printf "* Checking gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.55E-03) ** 2 + error(nmssm_ext_gz_5) ** 2)
printf "Expecting 4.5934159E+00"
show(integral(nmssm_ext_gz_5))
real pull = abs (integral (nmssm_ext_gz_5) - 4.5934159E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_5) == 4.5934159E+00)
printf "************************************************************************"
printf "* Checking gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.08E-03) ** 2 + error(nmssm_ext_gz_6) ** 2)
printf "Expecting 2.0002664E+00"
show(integral(nmssm_ext_gz_6))
real pull = abs (integral (nmssm_ext_gz_6) - 2.0002664E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_6) == 2.0002664E+00)
printf "************************************************************************"
printf "* Checking gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.67E-04) ** 2 + error(nmssm_ext_gz_7) ** 2)
printf "Expecting 1.5509284E+00"
show(integral(nmssm_ext_gz_7))
real pull = abs (integral (nmssm_ext_gz_7) - 1.5509284E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_7) == 1.5509284E+00)
printf "************************************************************************"
printf "* Checking gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.16E-01) ** 2 + error(nmssm_ext_gz_8) ** 2)
printf "Expecting 2.1652096E+02"
show(integral(nmssm_ext_gz_8))
real pull = abs (integral (nmssm_ext_gz_8) - 2.1652096E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_8) == 2.1652096E+02)
printf "************************************************************************"
printf "* Checking gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-02) ** 2 + error(nmssm_ext_gz_9) ** 2)
printf "Expecting 3.3719697E+01"
show(integral(nmssm_ext_gz_9))
real pull = abs (integral (nmssm_ext_gz_9) - 3.3719697E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_9) == 3.3719697E+01)
printf "************************************************************************"
printf "* Checking gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.69E-04) ** 2 + error(nmssm_ext_gz_10) ** 2)
printf "Expecting 1.1478395E+00"
show(integral(nmssm_ext_gz_10))
real pull = abs (integral (nmssm_ext_gz_10) - 1.1478395E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_10) == 1.1478395E+00)
printf "************************************************************************"
printf "* Checking gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.08E-02) ** 2 + error(nmssm_ext_gz_11) ** 2)
printf "Expecting 3.3732569E+01"
show(integral(nmssm_ext_gz_11))
real pull = abs (integral (nmssm_ext_gz_11) - 3.3732569E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_11) == 3.3732569E+01)
printf "************************************************************************"
printf "* Checking gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.06E-04) ** 2 + error(nmssm_ext_gz_12) ** 2)
printf "Expecting 1.1474302E+00"
show(integral(nmssm_ext_gz_12))
real pull = abs (integral (nmssm_ext_gz_12) - 1.1474302E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_12) == 1.1474302E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.42E-03) ** 2 + error(nmssm_ext_gz_13) ** 2)
printf "Expecting 4.1904564E+00"
show(integral(nmssm_ext_gz_13))
real pull = abs (integral (nmssm_ext_gz_13) - 4.1904564E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_13) == 4.1904564E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.42E-03) ** 2 + error(nmssm_ext_gz_14) ** 2)
printf "Expecting 7.2280282E+00"
show(integral(nmssm_ext_gz_14))
real pull = abs (integral (nmssm_ext_gz_14) - 7.2280282E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_14) == 7.2280282E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.29E-03) ** 2 + error(nmssm_ext_gz_15) ** 2)
printf "Expecting 1.1808205E+01"
show(integral(nmssm_ext_gz_15))
real pull = abs (integral (nmssm_ext_gz_15) - 1.1808205E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_15) == 1.1808205E+01)
printf "************************************************************************"
printf "* Checking gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.03E-01) ** 2 + error(nmssm_ext_gz_16) ** 2)
printf "Expecting 1.1306609E+03"
show(integral(nmssm_ext_gz_16))
real pull = abs (integral (nmssm_ext_gz_16) - 1.1306609E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_16) == 1.1306609E+03)
printf "************************************************************************"
printf "* Checking gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.31E-03) ** 2 + error(nmssm_ext_gz_17) ** 2)
printf "Expecting 1.1783452E+01"
show(integral(nmssm_ext_gz_17))
real pull = abs (integral (nmssm_ext_gz_17) - 1.1783452E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_17) == 1.1783452E+01)
printf "************************************************************************"
printf "* Checking gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.91E-03) ** 2 + error(nmssm_ext_gz_18) ** 2)
printf "Expecting 2.4117499E+00"
show(integral(nmssm_ext_gz_18))
real pull = abs (integral (nmssm_ext_gz_18) - 2.4117499E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_18) == 2.4117499E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.22E-03) ** 2 + error(nmssm_ext_gz_19) ** 2)
printf "Expecting 1.1801173E+01"
show(integral(nmssm_ext_gz_19))
real pull = abs (integral (nmssm_ext_gz_19) - 1.1801173E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_19) == 1.1801173E+01)
printf "************************************************************************"
printf "* Checking gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-03) ** 2 + error(nmssm_ext_gz_20) ** 2)
printf "Expecting 2.4149850E+00"
show(integral(nmssm_ext_gz_20))
real pull = abs (integral (nmssm_ext_gz_20) - 2.4149850E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_20) == 2.4149850E+00)
printf "************************************************************************"
printf "* Checking gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-03) ** 2 + error(nmssm_ext_gz_21) ** 2)
printf "Expecting 1.0383736E+00"
show(integral(nmssm_ext_gz_21))
real pull = abs (integral (nmssm_ext_gz_21) - 1.0383736E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_21) == 1.0383736E+00)
printf "************************************************************************"
printf "* Checking gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.53E-04) ** 2 + error(nmssm_ext_gz_22) ** 2)
printf "Expecting 7.6521954E-01"
show(integral(nmssm_ext_gz_22))
real pull = abs (integral (nmssm_ext_gz_22) - 7.6521954E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_22) == 7.6521954E-01)
printf "************************************************************************"
printf "* Checking gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.56E-02) ** 2 + error(nmssm_ext_gz_23) ** 2)
printf "Expecting 7.5870194E+01"
show(integral(nmssm_ext_gz_23))
real pull = abs (integral (nmssm_ext_gz_23) - 7.5870194E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_23) == 7.5870194E+01)
printf "************************************************************************"
printf "* Checking gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.43E-02) ** 2 + error(nmssm_ext_gz_24) ** 2)
printf "Expecting 1.7696149E+01"
show(integral(nmssm_ext_gz_24))
real pull = abs (integral (nmssm_ext_gz_24) - 1.7696149E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_24) == 1.7696149E+01)
printf "************************************************************************"
printf "* Checking gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.79E-04) ** 2 + error(nmssm_ext_gz_25) ** 2)
printf "Expecting 6.0260176E-01"
show(integral(nmssm_ext_gz_25))
real pull = abs (integral (nmssm_ext_gz_25) - 6.0260176E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_25) == 6.0260176E-01)
printf "************************************************************************"
printf "* Checking gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.41E-02) ** 2 + error(nmssm_ext_gz_26) ** 2)
printf "Expecting 1.7708484E+01"
show(integral(nmssm_ext_gz_26))
real pull = abs (integral (nmssm_ext_gz_26) - 1.7708484E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_26) == 1.7708484E+01)
printf "************************************************************************"
printf "* Checking gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.78E-04) ** 2 + error(nmssm_ext_gz_27) ** 2)
printf "Expecting 6.0299570E-01"
show(integral(nmssm_ext_gz_27))
real pull = abs (integral (nmssm_ext_gz_27) - 6.0299570E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_27) == 6.0299570E-01)
printf "************************************************************************"
printf "* Checking gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.73E-03) ** 2 + error(nmssm_ext_gz_28) ** 2)
printf "Expecting 2.2030422E+00"
show(integral(nmssm_ext_gz_28))
real pull = abs (integral (nmssm_ext_gz_28) - 2.2030422E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_28) == 2.2030422E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.94E-03) ** 2 + error(nmssm_ext_gz_29) ** 2)
printf "Expecting 3.7950412E+00"
show(integral(nmssm_ext_gz_29))
real pull = abs (integral (nmssm_ext_gz_29) - 3.7950412E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_29) == 3.7950412E+00)
printf "************************************************************************"
printf "* Checking gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.92E-03) ** 2 + error(nmssm_ext_gz_30) ** 2)
printf "Expecting 6.1859449E+00"
show(integral(nmssm_ext_gz_30))
real pull = abs (integral (nmssm_ext_gz_30) - 6.1859449E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gz_30) == 6.1859449E+00)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
