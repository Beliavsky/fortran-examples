

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-dd1.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------



























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_dd1_1 = d,D => n1,N1		
process nmssm_ext_dd1_2 = d,D => n2,N2		
process nmssm_ext_dd1_3 = d,D => n3,N3		
process nmssm_ext_dd1_4 = d,D => t,T		
process nmssm_ext_dd1_5 = d,D => Wp,Wm		
process nmssm_ext_dd1_6 = d,D => Z,Z		
process nmssm_ext_dd1_7 = d,D => se1,SE1	
process nmssm_ext_dd1_8 = d,D => se2,SE2	
process nmssm_ext_dd1_9 = d,D => smu1,SMU1	
process nmssm_ext_dd1_10 = d,D => smu2,SMU2	
process nmssm_ext_dd1_11 = d,D => stau1,STAU1	
process nmssm_ext_dd1_12 = d,D => stau2,STAU2	
process nmssm_ext_dd1_13 = d,D => stau1,STAU2	
process nmssm_ext_dd1_14 = d,D => sn11,SN11	
process nmssm_ext_dd1_15 = d,D => sn21,SN21	
process nmssm_ext_dd1_16 = d,D => sn31,SN31	
process nmssm_ext_dd1_17 = d,D => su1,su1c	
process nmssm_ext_dd1_18 = d,D => su2,su2c	
process nmssm_ext_dd1_19 = d,D => sc1,sc1c	
process nmssm_ext_dd1_20 = d,D => sc2,sc2c	
process nmssm_ext_dd1_21 = d,D => st1,st1c	
process nmssm_ext_dd1_22 = d,D => st2,st2c	
process nmssm_ext_dd1_23 = d,D => st1,st2c	
process nmssm_ext_dd1_24 = d,D => sd1,sd1c	
process nmssm_ext_dd1_25 = d,D => sd2,sd2c	
process nmssm_ext_dd1_26 = d,D => ss1,ss1c	
process nmssm_ext_dd1_27 = d,D => ss2,ss2c	
process nmssm_ext_dd1_28 = d,D => sb1,sb1c	
process nmssm_ext_dd1_29 = d,D => sb2,sb2c	
process nmssm_ext_dd1_30 = d,D => sb1,sb2c	
process nmssm_ext_dd1_31 = d,D => neu1,neu1	
process nmssm_ext_dd1_32 = d,D => neu1,neu2	
process nmssm_ext_dd1_33 = d,D => neu1,neu3	
process nmssm_ext_dd1_34 = d,D => neu1,neu4	
process nmssm_ext_dd1_35 = d,D => neu1,neu5	
process nmssm_ext_dd1_36 = d,D => neu2,neu2	
process nmssm_ext_dd1_37 = d,D => neu2,neu3	
process nmssm_ext_dd1_38 = d,D => neu2,neu4	
process nmssm_ext_dd1_39 = d,D => neu2,neu5	
process nmssm_ext_dd1_40 = d,D => neu3,neu3	
process nmssm_ext_dd1_41 = d,D => neu3,neu4	
process nmssm_ext_dd1_42 = d,D => neu3,neu5	
process nmssm_ext_dd1_43 = d,D => neu4,neu4	
process nmssm_ext_dd1_44 = d,D => neu4,neu5	
process nmssm_ext_dd1_45 = d,D => neu5,neu5	
process nmssm_ext_dd1_46 = d,D => "ch1+","ch1-"  
process nmssm_ext_dd1_47 = d,D => "ch2+","ch2-"	
process nmssm_ext_dd1_48 = d,D => "ch1+","ch2-"	
process nmssm_ext_dd1_49 = d,D => sgl,sgl	
process nmssm_ext_dd1_50 = d,D => Z,h01		
process nmssm_ext_dd1_51 = d,D => Z,h02		
process nmssm_ext_dd1_52 = d,D => Z,h03		
process nmssm_ext_dd1_53 = d,D => A01,h01	
process nmssm_ext_dd1_54 = d,D => A01,h02	
process nmssm_ext_dd1_55 = d,D => A01,h03	
process nmssm_ext_dd1_56 = d,D => A02,h01	
process nmssm_ext_dd1_57 = d,D => A02,h02	
process nmssm_ext_dd1_58 = d,D => A02,h03	
process nmssm_ext_dd1_59 = d,D => Hp,Hm		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_1)
printf "************************************************************************"
printf "* Integrating d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_2)
printf "************************************************************************"
printf "* Integrating d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_3)
printf "************************************************************************"
printf "* Integrating d,D => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_4)
printf "************************************************************************"
printf "* Integrating d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_5)
printf "************************************************************************"
printf "* Integrating d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_6)
printf "************************************************************************"
printf "* Integrating d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_7)
printf "************************************************************************"
printf "* Integrating d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_8)
printf "************************************************************************"
printf "* Integrating d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_9)
printf "************************************************************************"
printf "* Integrating d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_10)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_11)
printf "************************************************************************"
printf "* Integrating d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_12)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_13)
printf "************************************************************************"
printf "* Integrating d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_14)
printf "************************************************************************"
printf "* Integrating d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_15)
printf "************************************************************************"
printf "* Integrating d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_16)
printf "************************************************************************"
printf "* Integrating d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_17)
printf "************************************************************************"
printf "* Integrating d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_18)
printf "************************************************************************"
printf "* Integrating d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_19)
printf "************************************************************************"
printf "* Integrating d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_20)
printf "************************************************************************"
printf "* Integrating d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_21)
printf "************************************************************************"
printf "* Integrating d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_22)
printf "************************************************************************"
printf "* Integrating d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_23)
printf "************************************************************************"
printf "* Integrating d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_24)
printf "************************************************************************"
printf "* Integrating d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_25)
printf "************************************************************************"
printf "* Integrating d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_26)
printf "************************************************************************"
printf "* Integrating d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_27)
printf "************************************************************************"
printf "* Integrating d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_28)
printf "************************************************************************"
printf "* Integrating d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_29)
printf "************************************************************************"
printf "* Integrating d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_30)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_31)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_32)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_33)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_34)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_35)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_36)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_37)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_38)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_39)
printf "************************************************************************"
printf "* Integrating d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_40)
printf "************************************************************************"
printf "* Integrating d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_41)
printf "************************************************************************"
printf "* Integrating d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_42)
printf "************************************************************************"
printf "* Integrating d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_43)
printf "************************************************************************"
printf "* Integrating d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_44)
printf "************************************************************************"
printf "* Integrating d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_45)
printf "************************************************************************"
printf "* Integrating d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_46)
printf "************************************************************************"
printf "* Integrating d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_47)
printf "************************************************************************"
printf "* Integrating d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_48)
printf "************************************************************************"
printf "* Integrating d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_49)
printf "************************************************************************"
printf "* Integrating d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_50)
printf "************************************************************************"
printf "* Integrating d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_51)
printf "************************************************************************"
printf "* Integrating d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_52)
printf "************************************************************************"
printf "* Integrating d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_53)
printf "************************************************************************"
printf "* Integrating d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_54)
printf "************************************************************************"
printf "* Integrating d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_55)
printf "************************************************************************"
printf "* Integrating d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_56)
printf "************************************************************************"
printf "* Integrating d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_57)
printf "************************************************************************"
printf "* Integrating d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_58)
printf "************************************************************************"
printf "* Integrating d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,D
seed = 0
integrate (nmssm_ext_dd1_59)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.71E-04) ** 2 + error(nmssm_ext_dd1_1) ** 2)
printf "Expecting 1.3300240E+00"
show(integral(nmssm_ext_dd1_1))
real pull = abs (integral (nmssm_ext_dd1_1) - 1.3300240E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => n1,N1		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_1) == 1.3300240E+00)
printf "************************************************************************"
printf "* Checking d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.95E-04) ** 2 + error(nmssm_ext_dd1_2) ** 2)
printf "Expecting 1.3287159E+00"
show(integral(nmssm_ext_dd1_2))
real pull = abs (integral (nmssm_ext_dd1_2) - 1.3287159E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => n2,N2		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_2) == 1.3287159E+00)
printf "************************************************************************"
printf "* Checking d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.96E-04) ** 2 + error(nmssm_ext_dd1_3) ** 2)
printf "Expecting 1.3285066E+00"
show(integral(nmssm_ext_dd1_3))
real pull = abs (integral (nmssm_ext_dd1_3) - 1.3285066E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => n3,N3		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_3) == 1.3285066E+00)
printf "************************************************************************"
printf "* Checking d,D => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.05E-02) ** 2 + error(nmssm_ext_dd1_4) ** 2)
printf "Expecting 5.5660195E+02"
show(integral(nmssm_ext_dd1_4))
real pull = abs (integral (nmssm_ext_dd1_4) - 5.5660195E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_4) == 5.5660195E+02)
printf "************************************************************************"
printf "* Checking d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.09E-01) ** 2 + error(nmssm_ext_dd1_5) ** 2)
printf "Expecting 1.5065884E+02"
show(integral(nmssm_ext_dd1_5))
real pull = abs (integral (nmssm_ext_dd1_5) - 1.5065884E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Wp,Wm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_5) == 1.5065884E+02)
printf "************************************************************************"
printf "* Checking d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-02) ** 2 + error(nmssm_ext_dd1_6) ** 2)
printf "Expecting 3.2931023E+01"
show(integral(nmssm_ext_dd1_6))
real pull = abs (integral (nmssm_ext_dd1_6) - 3.2931023E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_6) == 3.2931023E+01)
printf "************************************************************************"
printf "* Checking d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.70E-04) ** 2 + error(nmssm_ext_dd1_7) ** 2)
printf "Expecting 4.3665895E-01"
show(integral(nmssm_ext_dd1_7))
real pull = abs (integral (nmssm_ext_dd1_7) - 4.3665895E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_7) == 4.3665895E-01)
printf "************************************************************************"
printf "* Checking d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.02E-05) ** 2 + error(nmssm_ext_dd1_8) ** 2)
printf "Expecting 1.0630514E-01"
show(integral(nmssm_ext_dd1_8))
real pull = abs (integral (nmssm_ext_dd1_8) - 1.0630514E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_8) == 1.0630514E-01)
printf "************************************************************************"
printf "* Checking d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.70E-04) ** 2 + error(nmssm_ext_dd1_9) ** 2)
printf "Expecting 4.3644812E-01"
show(integral(nmssm_ext_dd1_9))
real pull = abs (integral (nmssm_ext_dd1_9) - 4.3644812E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_9) == 4.3644812E-01)
printf "************************************************************************"
printf "* Checking d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.10E-05) ** 2 + error(nmssm_ext_dd1_10) ** 2)
printf "Expecting 1.0630732E-01"
show(integral(nmssm_ext_dd1_10))
real pull = abs (integral (nmssm_ext_dd1_10) - 1.0630732E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_10) == 1.0630732E-01)
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.18E-05) ** 2 + error(nmssm_ext_dd1_11) ** 2)
printf "Expecting 1.0800505E-01"
show(integral(nmssm_ext_dd1_11))
real pull = abs (integral (nmssm_ext_dd1_11) - 1.0800505E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_11) == 1.0800505E-01)
printf "************************************************************************"
printf "* Checking d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.67E-05) ** 2 + error(nmssm_ext_dd1_12) ** 2)
printf "Expecting 1.1168450E-01"
show(integral(nmssm_ext_dd1_12))
real pull = abs (integral (nmssm_ext_dd1_12) - 1.1168450E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_12) == 1.1168450E-01)
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-04) ** 2 + error(nmssm_ext_dd1_13) ** 2)
printf "Expecting 1.6136740E-01"
show(integral(nmssm_ext_dd1_13))
real pull = abs (integral (nmssm_ext_dd1_13) - 1.6136740E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_13) == 1.6136740E-01)
printf "************************************************************************"
printf "* Checking d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.64E-04) ** 2 + error(nmssm_ext_dd1_14) ** 2)
printf "Expecting 6.4651612E-01"
show(integral(nmssm_ext_dd1_14))
real pull = abs (integral (nmssm_ext_dd1_14) - 6.4651612E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn11,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_14) == 6.4651612E-01)
printf "************************************************************************"
printf "* Checking d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.53E-04) ** 2 + error(nmssm_ext_dd1_15) ** 2)
printf "Expecting 6.4745457E-01"
show(integral(nmssm_ext_dd1_15))
real pull = abs (integral (nmssm_ext_dd1_15) - 6.4745457E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn21,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_15) == 6.4745457E-01)
printf "************************************************************************"
printf "* Checking d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.45E-04) ** 2 + error(nmssm_ext_dd1_16) ** 2)
printf "Expecting 6.4829456E-01"
show(integral(nmssm_ext_dd1_16))
real pull = abs (integral (nmssm_ext_dd1_16) - 6.4829456E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn31,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_16) == 6.4829456E-01)
printf "************************************************************************"
printf "* Checking d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.68E-02) ** 2 + error(nmssm_ext_dd1_17) ** 2)
printf "Expecting 5.5503948E+01"
show(integral(nmssm_ext_dd1_17))
real pull = abs (integral (nmssm_ext_dd1_17) - 5.5503948E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_17) == 5.5503948E+01)
printf "************************************************************************"
printf "* Checking d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.66E-02) ** 2 + error(nmssm_ext_dd1_18) ** 2)
printf "Expecting 5.5268553E+01"
show(integral(nmssm_ext_dd1_18))
real pull = abs (integral (nmssm_ext_dd1_18) - 5.5268553E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_18) == 5.5268553E+01)
printf "************************************************************************"
printf "* Checking d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.85E-02) ** 2 + error(nmssm_ext_dd1_19) ** 2)
printf "Expecting 5.5676113E+01"
show(integral(nmssm_ext_dd1_19))
real pull = abs (integral (nmssm_ext_dd1_19) - 5.5676113E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_19) == 5.5676113E+01)
printf "************************************************************************"
printf "* Checking d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.73E-02) ** 2 + error(nmssm_ext_dd1_20) ** 2)
printf "Expecting 5.5134978E+01"
show(integral(nmssm_ext_dd1_20))
real pull = abs (integral (nmssm_ext_dd1_20) - 5.5134978E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_20) == 5.5134978E+01)
printf "************************************************************************"
printf "* Checking d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.19E-02) ** 2 + error(nmssm_ext_dd1_21) ** 2)
printf "Expecting 8.4218398E+01"
show(integral(nmssm_ext_dd1_21))
real pull = abs (integral (nmssm_ext_dd1_21) - 8.4218398E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_21) == 8.4218398E+01)
printf "************************************************************************"
printf "* Checking d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-02) ** 2 + error(nmssm_ext_dd1_22) ** 2)
printf "Expecting 2.8178709E+01"
show(integral(nmssm_ext_dd1_22))
real pull = abs (integral (nmssm_ext_dd1_22) - 2.8178709E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_22) == 2.8178709E+01)
printf "************************************************************************"
printf "* Checking d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.66E-04) ** 2 + error(nmssm_ext_dd1_23) ** 2)
printf "Expecting 1.9813135E-01"
show(integral(nmssm_ext_dd1_23))
real pull = abs (integral (nmssm_ext_dd1_23) - 1.9813135E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_23) == 1.9813135E-01)
printf "************************************************************************"
printf "* Checking d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.17E-01) ** 2 + error(nmssm_ext_dd1_24) ** 2)
printf "Expecting 3.8551545E+02"
show(integral(nmssm_ext_dd1_24))
real pull = abs (integral (nmssm_ext_dd1_24) - 3.8551545E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_24) == 3.8551545E+02)
printf "************************************************************************"
printf "* Checking d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.53E-01) ** 2 + error(nmssm_ext_dd1_25) ** 2)
printf "Expecting 4.1841590E+02"
show(integral(nmssm_ext_dd1_25))
real pull = abs (integral (nmssm_ext_dd1_25) - 4.1841590E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_25) == 4.1841590E+02)
printf "************************************************************************"
printf "* Checking d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-02) ** 2 + error(nmssm_ext_dd1_26) ** 2)
printf "Expecting 5.5616447E+01"
show(integral(nmssm_ext_dd1_26))
real pull = abs (integral (nmssm_ext_dd1_26) - 5.5616447E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_26) == 5.5616447E+01)
printf "************************************************************************"
printf "* Checking d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.66E-02) ** 2 + error(nmssm_ext_dd1_27) ** 2)
printf "Expecting 5.5102350E+01"
show(integral(nmssm_ext_dd1_27))
real pull = abs (integral (nmssm_ext_dd1_27) - 5.5102350E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_27) == 5.5102350E+01)
printf "************************************************************************"
printf "* Checking d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.69E-02) ** 2 + error(nmssm_ext_dd1_28) ** 2)
printf "Expecting 5.5758175E+01"
show(integral(nmssm_ext_dd1_28))
real pull = abs (integral (nmssm_ext_dd1_28) - 5.5758175E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_28) == 5.5758175E+01)
printf "************************************************************************"
printf "* Checking d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.73E-02) ** 2 + error(nmssm_ext_dd1_29) ** 2)
printf "Expecting 5.4491858E+01"
show(integral(nmssm_ext_dd1_29))
real pull = abs (integral (nmssm_ext_dd1_29) - 5.4491858E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_29) == 5.4491858E+01)
printf "************************************************************************"
printf "* Checking d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.68E-04) ** 2 + error(nmssm_ext_dd1_30) ** 2)
printf "Expecting 1.9624038E-01"
show(integral(nmssm_ext_dd1_30))
real pull = abs (integral (nmssm_ext_dd1_30) - 1.9624038E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_30) == 1.9624038E-01)
printf "************************************************************************"
printf "* Checking d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.37E-05) ** 2 + error(nmssm_ext_dd1_31) ** 2)
printf "Expecting 4.3557183E-02"
show(integral(nmssm_ext_dd1_31))
real pull = abs (integral (nmssm_ext_dd1_31) - 4.3557183E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_31) == 4.3557183E-02)
printf "************************************************************************"
printf "* Checking d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-05) ** 2 + error(nmssm_ext_dd1_32) ** 2)
printf "Expecting 2.2946499E-02"
show(integral(nmssm_ext_dd1_32))
real pull = abs (integral (nmssm_ext_dd1_32) - 2.2946499E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_32) == 2.2946499E-02)
printf "************************************************************************"
printf "* Checking d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.48E-04) ** 2 + error(nmssm_ext_dd1_33) ** 2)
printf "Expecting 2.5937369E-01"
show(integral(nmssm_ext_dd1_33))
real pull = abs (integral (nmssm_ext_dd1_33) - 2.5937369E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_33) == 2.5937369E-01)
printf "************************************************************************"
printf "* Checking d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.05E-06) ** 2 + error(nmssm_ext_dd1_34) ** 2)
printf "Expecting 9.0690319E-03"
show(integral(nmssm_ext_dd1_34))
real pull = abs (integral (nmssm_ext_dd1_34) - 9.0690319E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_34) == 9.0690319E-03)
printf "************************************************************************"
printf "* Checking d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.15E-05) ** 2 + error(nmssm_ext_dd1_35) ** 2)
printf "Expecting 4.2697498E-02"
show(integral(nmssm_ext_dd1_35))
real pull = abs (integral (nmssm_ext_dd1_35) - 4.2697498E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_35) == 4.2697498E-02)
printf "************************************************************************"
printf "* Checking d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.33E-06) ** 2 + error(nmssm_ext_dd1_36) ** 2)
printf "Expecting 8.2451345E-03"
show(integral(nmssm_ext_dd1_36))
real pull = abs (integral (nmssm_ext_dd1_36) - 8.2451345E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_36) == 8.2451345E-03)
printf "************************************************************************"
printf "* Checking d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.47E-05) ** 2 + error(nmssm_ext_dd1_37) ** 2)
printf "Expecting 1.4244790E-01"
show(integral(nmssm_ext_dd1_37))
real pull = abs (integral (nmssm_ext_dd1_37) - 1.4244790E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_37) == 1.4244790E-01)
printf "************************************************************************"
printf "* Checking d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.32E-06) ** 2 + error(nmssm_ext_dd1_38) ** 2)
printf "Expecting 3.5662005E-02"
show(integral(nmssm_ext_dd1_38))
real pull = abs (integral (nmssm_ext_dd1_38) - 3.5662005E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_38) == 3.5662005E-02)
printf "************************************************************************"
printf "* Checking d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.14E-06) ** 2 + error(nmssm_ext_dd1_39) ** 2)
printf "Expecting 2.9431217E-02"
show(integral(nmssm_ext_dd1_39))
real pull = abs (integral (nmssm_ext_dd1_39) - 2.9431217E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_39) == 2.9431217E-02)
printf "************************************************************************"
printf "* Checking d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.55E-04) ** 2 + error(nmssm_ext_dd1_40) ** 2)
printf "Expecting 1.3246643E+00"
show(integral(nmssm_ext_dd1_40))
real pull = abs (integral (nmssm_ext_dd1_40) - 1.3246643E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu3,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_40) == 1.3246643E+00)
printf "************************************************************************"
printf "* Checking d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.06E-04) ** 2 + error(nmssm_ext_dd1_41) ** 2)
printf "Expecting 2.1462193E-01"
show(integral(nmssm_ext_dd1_41))
real pull = abs (integral (nmssm_ext_dd1_41) - 2.1462193E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu3,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_41) == 2.1462193E-01)
printf "************************************************************************"
printf "* Checking d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.73E-05) ** 2 + error(nmssm_ext_dd1_42) ** 2)
printf "Expecting 9.0713931E-02"
show(integral(nmssm_ext_dd1_42))
real pull = abs (integral (nmssm_ext_dd1_42) - 9.0713931E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu3,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_42) == 9.0713931E-02)
printf "************************************************************************"
printf "* Checking d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.50E-06) ** 2 + error(nmssm_ext_dd1_43) ** 2)
printf "Expecting 1.7783210E-03"
show(integral(nmssm_ext_dd1_43))
real pull = abs (integral (nmssm_ext_dd1_43) - 1.7783210E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu4,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_43) == 1.7783210E-03)
printf "************************************************************************"
printf "* Checking d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.13E-04) ** 2 + error(nmssm_ext_dd1_44) ** 2)
printf "Expecting 2.3826792E+00"
show(integral(nmssm_ext_dd1_44))
real pull = abs (integral (nmssm_ext_dd1_44) - 2.3826792E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu4,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_44) == 2.3826792E+00)
printf "************************************************************************"
printf "* Checking d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.72E-09) ** 2 + error(nmssm_ext_dd1_45) ** 2)
printf "Expecting 2.1030030E-05"
show(integral(nmssm_ext_dd1_45))
real pull = abs (integral (nmssm_ext_dd1_45) - 2.1030030E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu5,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_45) == 2.1030030E-05)
printf "************************************************************************"
printf "* Checking d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.02E-03) ** 2 + error(nmssm_ext_dd1_46) ** 2)
printf "Expecting 4.9522093E+00"
show(integral(nmssm_ext_dd1_46))
real pull = abs (integral (nmssm_ext_dd1_46) - 4.9522093E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch1+,ch1-   @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_46) == 4.9522093E+00)
printf "************************************************************************"
printf "* Checking d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.59E-04) ** 2 + error(nmssm_ext_dd1_47) ** 2)
printf "Expecting 1.8083640E+00"
show(integral(nmssm_ext_dd1_47))
real pull = abs (integral (nmssm_ext_dd1_47) - 1.8083640E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_47) == 1.8083640E+00)
printf "************************************************************************"
printf "* Checking d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.63E-05) ** 2 + error(nmssm_ext_dd1_48) ** 2)
printf "Expecting 1.2000862E-01"
show(integral(nmssm_ext_dd1_48))
real pull = abs (integral (nmssm_ext_dd1_48) - 1.2000862E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_48) == 1.2000862E-01)
printf "************************************************************************"
printf "* Checking d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.52E-01) ** 2 + error(nmssm_ext_dd1_49) ** 2)
printf "Expecting 6.4966039E+02"
show(integral(nmssm_ext_dd1_49))
real pull = abs (integral (nmssm_ext_dd1_49) - 6.4966039E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sgl,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_49) == 6.4966039E+02)
printf "************************************************************************"
printf "* Checking d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.44E-04) ** 2 + error(nmssm_ext_dd1_50) ** 2)
printf "Expecting 6.5162015E-01"
show(integral(nmssm_ext_dd1_50))
real pull = abs (integral (nmssm_ext_dd1_50) - 6.5162015E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,h01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_50) == 6.5162015E-01)
printf "************************************************************************"
printf "* Checking d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.17E-05) ** 2 + error(nmssm_ext_dd1_51) ** 2)
printf "Expecting 1.3952756E-02"
show(integral(nmssm_ext_dd1_51))
real pull = abs (integral (nmssm_ext_dd1_51) - 1.3952756E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,h02		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_51) == 1.3952756E-02)
printf "************************************************************************"
printf "* Checking d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.55E-10) ** 2 + error(nmssm_ext_dd1_52) ** 2)
printf "Expecting 1.8883861E-07"
show(integral(nmssm_ext_dd1_52))
real pull = abs (integral (nmssm_ext_dd1_52) - 1.8883861E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,h03		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_52) == 1.8883861E-07)
printf "************************************************************************"
printf "* Checking d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.20E-10) ** 2 + error(nmssm_ext_dd1_53) ** 2)
printf "Expecting 3.7778612E-07"
show(integral(nmssm_ext_dd1_53))
real pull = abs (integral (nmssm_ext_dd1_53) - 3.7778612E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_53) == 3.7778612E-07)
printf "************************************************************************"
printf "* Checking d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.25E-08) ** 2 + error(nmssm_ext_dd1_54) ** 2)
printf "Expecting 1.4881599E-05"
show(integral(nmssm_ext_dd1_54))
real pull = abs (integral (nmssm_ext_dd1_54) - 1.4881599E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_54) == 1.4881599E-05)
printf "************************************************************************"
printf "* Checking d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.08E-06) ** 2 + error(nmssm_ext_dd1_55) ** 2)
printf "Expecting 2.4865178E-03"
show(integral(nmssm_ext_dd1_55))
real pull = abs (integral (nmssm_ext_dd1_55) - 2.4865178E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_55) == 2.4865178E-03)
printf "************************************************************************"
printf "* Checking d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-08) ** 2 + error(nmssm_ext_dd1_56) ** 2)
printf "Expecting 2.8250123E-05"
show(integral(nmssm_ext_dd1_56))
real pull = abs (integral (nmssm_ext_dd1_56) - 2.8250123E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A02,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_56) == 2.8250123E-05)
printf "************************************************************************"
printf "* Checking d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.50E-07) ** 2 + error(nmssm_ext_dd1_57) ** 2)
printf "Expecting 1.1097687E-03"
show(integral(nmssm_ext_dd1_57))
real pull = abs (integral (nmssm_ext_dd1_57) - 1.1097687E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_57) == 1.1097687E-03)
printf "************************************************************************"
printf "* Checking d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.62E-05) ** 2 + error(nmssm_ext_dd1_58) ** 2)
printf "Expecting 7.9049726E-02"
show(integral(nmssm_ext_dd1_58))
real pull = abs (integral (nmssm_ext_dd1_58) - 7.9049726E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => A02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_58) == 7.9049726E-02)
printf "************************************************************************"
printf "* Checking d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.60E-05) ** 2 + error(nmssm_ext_dd1_59) ** 2)
printf "Expecting 5.4147842E-02"
show(integral(nmssm_ext_dd1_59))
real pull = abs (integral (nmssm_ext_dd1_59) - 5.4147842E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Hp,Hm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_dd1_59) == 5.4147842E-02)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
