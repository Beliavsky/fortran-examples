

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-tt1.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 5:100000
! -------------------------------------------------------------------------

















































# This is a highly fluctuating process, therefore we take a rather high
# error. 





















! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_tt2_1 = e3,E3 => n1,N1	
process nmssm_ext_tt2_2 = e3,E3 => n2,N2	
process nmssm_ext_tt2_3 = e3,E3 => n3,N3	
process nmssm_ext_tt2_4 = e3,E3 => t,T		
process nmssm_ext_tt2_5 = e3,E3 => Wp,Wm	
process nmssm_ext_tt2_6 = e3,E3 => Z,Z		
process nmssm_ext_tt2_7 = e3,E3 => se1,SE1	
process nmssm_ext_tt2_8 = e3,E3 => se2,SE2	
process nmssm_ext_tt2_9 = e3,E3 => smu1,SMU1	
process nmssm_ext_tt2_10 = e3,E3 => smu2,SMU2	
process nmssm_ext_tt2_11 = e3,E3 => stau1,STAU1	
process nmssm_ext_tt2_12 = e3,E3 => stau2,STAU2	
process nmssm_ext_tt2_13 = e3,E3 => stau1,STAU2	
process nmssm_ext_tt2_14 = e3,E3 => sn11,SN11	
process nmssm_ext_tt2_15 = e3,E3 => sn21,SN21	
process nmssm_ext_tt2_16 = e3,E3 => sn31,SN31	
process nmssm_ext_tt2_17 = e3,E3 => su1,su1c	
process nmssm_ext_tt2_18 = e3,E3 => su2,su2c	
process nmssm_ext_tt2_19 = e3,E3 => sc1,sc1c	
process nmssm_ext_tt2_20 = e3,E3 => sc2,sc2c	
process nmssm_ext_tt2_21 = e3,E3 => st1,st1c	
process nmssm_ext_tt2_22 = e3,E3 => st2,st2c	
process nmssm_ext_tt2_23 = e3,E3 => st1,st2c	
process nmssm_ext_tt2_24 = e3,E3 => sd1,sd1c	
process nmssm_ext_tt2_25 = e3,E3 => sd2,sd2c	
process nmssm_ext_tt2_26 = e3,E3 => ss1,ss1c	
process nmssm_ext_tt2_27 = e3,E3 => ss2,ss2c	
process nmssm_ext_tt2_28 = e3,E3 => sb1,sb1c	
process nmssm_ext_tt2_29 = e3,E3 => sb2,sb2c	
process nmssm_ext_tt2_30 = e3,E3 => sb1,sb2c	
process nmssm_ext_tt2_31 = e3,E3 => neu1,neu1	
process nmssm_ext_tt2_32 = e3,E3 => neu1,neu2	
process nmssm_ext_tt2_33 = e3,E3 => neu1,neu3	
process nmssm_ext_tt2_34 = e3,E3 => neu1,neu4	
process nmssm_ext_tt2_35 = e3,E3 => neu1,neu5	
process nmssm_ext_tt2_36 = e3,E3 => neu2,neu2	
process nmssm_ext_tt2_37 = e3,E3 => neu2,neu3	
process nmssm_ext_tt2_38 = e3,E3 => neu2,neu4	
process nmssm_ext_tt2_39 = e3,E3 => neu2,neu5	
process nmssm_ext_tt2_40 = e3,E3 => neu3,neu3	
process nmssm_ext_tt2_41 = e3,E3 => neu3,neu4	
process nmssm_ext_tt2_42 = e3,E3 => neu3,neu5	
process nmssm_ext_tt2_43 = e3,E3 => neu4,neu4	
process nmssm_ext_tt2_44 = e3,E3 => neu4,neu5	
process nmssm_ext_tt2_45 = e3,E3 => neu5,neu5	
process nmssm_ext_tt2_46 = e3,E3 => "ch1+","ch1-"
process nmssm_ext_tt2_47 = e3,E3 => "ch2+","ch2-"
process nmssm_ext_tt2_48 = e3,E3 => "ch1+","ch2-"
process nmssm_ext_tt2_49 = e3,E3 => "ch2+","ch1-"
process nmssm_ext_tt2_50 = e3,E3 => h01,h01	
process nmssm_ext_tt2_51 = e3,E3 => h01,h02	
process nmssm_ext_tt2_52 = e3,E3 => h01,h03	
process nmssm_ext_tt2_53 = e3,E3 => h02,h02	
process nmssm_ext_tt2_54 = e3,E3 => h02,h03	
process nmssm_ext_tt2_55 = e3,E3 => h03,h03	
process nmssm_ext_tt2_56 = e3,E3 => A01,A01	
process nmssm_ext_tt2_57 = e3,E3 => A01,A02	
process nmssm_ext_tt2_58 = e3,E3 => A02,A02	
process nmssm_ext_tt2_59 = e3,E3 => Z,h01	
process nmssm_ext_tt2_60 = e3,E3 => Z,h02	
process nmssm_ext_tt2_61 = e3,E3 => Z,h03	
process nmssm_ext_tt2_62 = e3,E3 => Z,A01	
process nmssm_ext_tt2_63 = e3,E3 => Z,A02	
process nmssm_ext_tt2_64 = e3,E3 => A01,h01	
process nmssm_ext_tt2_65 = e3,E3 => A01,h02	
process nmssm_ext_tt2_66 = e3,E3 => A01,h03	
process nmssm_ext_tt2_67 = e3,E3 => A02,h01	
process nmssm_ext_tt2_68 = e3,E3 => A02,h02	
process nmssm_ext_tt2_69 = e3,E3 => A02,h03	
process nmssm_ext_tt2_70 = e3,E3 => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_1)
printf "************************************************************************"
printf "* Integrating e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_2)
printf "************************************************************************"
printf "* Integrating e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_3)
printf "************************************************************************"
printf "* Integrating e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_4)
printf "************************************************************************"
printf "* Integrating e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_5)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_6)
printf "************************************************************************"
printf "* Integrating e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_7)
printf "************************************************************************"
printf "* Integrating e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_8)
printf "************************************************************************"
printf "* Integrating e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_9)
printf "************************************************************************"
printf "* Integrating e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_10)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_11)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_12)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_13)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_14)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_15)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_16)
printf "************************************************************************"
printf "* Integrating e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_17)
printf "************************************************************************"
printf "* Integrating e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_18)
printf "************************************************************************"
printf "* Integrating e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_19)
printf "************************************************************************"
printf "* Integrating e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_20)
printf "************************************************************************"
printf "* Integrating e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_21)
printf "************************************************************************"
printf "* Integrating e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_22)
printf "************************************************************************"
printf "* Integrating e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_23)
printf "************************************************************************"
printf "* Integrating e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_24)
printf "************************************************************************"
printf "* Integrating e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_25)
printf "************************************************************************"
printf "* Integrating e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_26)
printf "************************************************************************"
printf "* Integrating e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_27)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_28)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_29)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_30)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_31)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_32)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_33)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_34)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_35)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_36)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_37)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_38)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_39)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_40)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_41)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_42)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_43)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_44)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_45)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_46)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_47)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_48)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_49)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_50)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_51)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_52)
printf "************************************************************************"
printf "* Integrating e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_53)
printf "************************************************************************"
printf "* Integrating e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_54)
printf "************************************************************************"
printf "* Integrating e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_55)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_56)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_57)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_58)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_59)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_60)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_61)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_62)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_63)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_64)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_65)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_66)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_67)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_68)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_69)
printf "************************************************************************"
printf "* Integrating e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt2_70)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.17E-05) ** 2 + error(nmssm_ext_tt2_1) ** 2)
printf "Expecting 9.7637058E-01"
show(integral(nmssm_ext_tt2_1))
real pull = abs (integral (nmssm_ext_tt2_1) - 9.7637058E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n1,N1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_1) == 9.7637058E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.33E-05) ** 2 + error(nmssm_ext_tt2_2) ** 2)
printf "Expecting 9.7631483E-01"
show(integral(nmssm_ext_tt2_2))
real pull = abs (integral (nmssm_ext_tt2_2) - 9.7631483E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n2,N2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_2) == 9.7631483E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.51E+01) ** 2 + error(nmssm_ext_tt2_3) ** 2)
printf "Expecting 5.3558298E+04"
show(integral(nmssm_ext_tt2_3))
real pull = abs (integral (nmssm_ext_tt2_3) - 5.3558298E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n3,N3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_3) == 5.3558298E+04)
printf "************************************************************************"
printf "* Checking e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.59E-03) ** 2 + error(nmssm_ext_tt2_4) ** 2)
printf "Expecting 7.1134414E+00"
show(integral(nmssm_ext_tt2_4))
real pull = abs (integral (nmssm_ext_tt2_4) - 7.1134414E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_4) == 7.1134414E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.69E-01) ** 2 + error(nmssm_ext_tt2_5) ** 2)
printf "Expecting 1.9178002E+02"
show(integral(nmssm_ext_tt2_5))
real pull = abs (integral (nmssm_ext_tt2_5) - 1.9178002E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_5) == 1.9178002E+02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.01E-03) ** 2 + error(nmssm_ext_tt2_6) ** 2)
printf "Expecting 1.0334306E+01"
show(integral(nmssm_ext_tt2_6))
real pull = abs (integral (nmssm_ext_tt2_6) - 1.0334306E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,Z		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_6) == 1.0334306E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.76E-04) ** 2 + error(nmssm_ext_tt2_7) ** 2)
printf "Expecting 1.1718506E+00"
show(integral(nmssm_ext_tt2_7))
real pull = abs (integral (nmssm_ext_tt2_7) - 1.1718506E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_7) == 1.1718506E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.15E-04) ** 2 + error(nmssm_ext_tt2_8) ** 2)
printf "Expecting 1.0505128E+00"
show(integral(nmssm_ext_tt2_8))
real pull = abs (integral (nmssm_ext_tt2_8) - 1.0505128E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_8) == 1.0505128E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.79E-04) ** 2 + error(nmssm_ext_tt2_9) ** 2)
printf "Expecting 1.1714728E+00"
show(integral(nmssm_ext_tt2_9))
real pull = abs (integral (nmssm_ext_tt2_9) - 1.1714728E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_9) == 1.1714728E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.19E-04) ** 2 + error(nmssm_ext_tt2_10) ** 2)
printf "Expecting 1.0498219E+00"
show(integral(nmssm_ext_tt2_10))
real pull = abs (integral (nmssm_ext_tt2_10) - 1.0498219E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_10) == 1.0498219E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.41E-02) ** 2 + error(nmssm_ext_tt2_11) ** 2)
printf "Expecting 1.4191398E+01"
show(integral(nmssm_ext_tt2_11))
real pull = abs (integral (nmssm_ext_tt2_11) - 1.4191398E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_11) == 1.4191398E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-02) ** 2 + error(nmssm_ext_tt2_12) ** 2)
printf "Expecting 1.3934237E+01"
show(integral(nmssm_ext_tt2_12))
real pull = abs (integral (nmssm_ext_tt2_12) - 1.3934237E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_12) == 1.3934237E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-02) ** 2 + error(nmssm_ext_tt2_13) ** 2)
printf "Expecting 1.5722796E+01"
show(integral(nmssm_ext_tt2_13))
real pull = abs (integral (nmssm_ext_tt2_13) - 1.5722796E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_13) == 1.5722796E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.38E-04) ** 2 + error(nmssm_ext_tt2_14) ** 2)
printf "Expecting 4.8398879E-01"
show(integral(nmssm_ext_tt2_14))
real pull = abs (integral (nmssm_ext_tt2_14) - 4.8398879E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_14) == 4.8398879E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.39E-04) ** 2 + error(nmssm_ext_tt2_15) ** 2)
printf "Expecting 4.8366323E-01"
show(integral(nmssm_ext_tt2_15))
real pull = abs (integral (nmssm_ext_tt2_15) - 4.8366323E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_15) == 4.8366323E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.85E-02) ** 2 + error(nmssm_ext_tt2_16) ** 2)
printf "Expecting 7.6642306E+01"
show(integral(nmssm_ext_tt2_16))
real pull = abs (integral (nmssm_ext_tt2_16) - 7.6642306E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_16) == 7.6642306E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.07E-04) ** 2 + error(nmssm_ext_tt2_17) ** 2)
printf "Expecting 1.6398867E+00"
show(integral(nmssm_ext_tt2_17))
real pull = abs (integral (nmssm_ext_tt2_17) - 1.6398867E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_17) == 1.6398867E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.33E-04) ** 2 + error(nmssm_ext_tt2_18) ** 2)
printf "Expecting 1.0786987E+00"
show(integral(nmssm_ext_tt2_18))
real pull = abs (integral (nmssm_ext_tt2_18) - 1.0786987E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_18) == 1.0786987E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.05E-04) ** 2 + error(nmssm_ext_tt2_19) ** 2)
printf "Expecting 1.6400928E+00"
show(integral(nmssm_ext_tt2_19))
real pull = abs (integral (nmssm_ext_tt2_19) - 1.6400928E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_19) == 1.6400928E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.30E-04) ** 2 + error(nmssm_ext_tt2_20) ** 2)
printf "Expecting 1.0795631E+00"
show(integral(nmssm_ext_tt2_20))
real pull = abs (integral (nmssm_ext_tt2_20) - 1.0795631E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_20) == 1.0795631E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.92E-04) ** 2 + error(nmssm_ext_tt2_21) ** 2)
printf "Expecting 1.2061169E+00"
show(integral(nmssm_ext_tt2_21))
real pull = abs (integral (nmssm_ext_tt2_21) - 1.2061169E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_21) == 1.2061169E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.65E-04) ** 2 + error(nmssm_ext_tt2_22) ** 2)
printf "Expecting 9.4671576E-01"
show(integral(nmssm_ext_tt2_22))
real pull = abs (integral (nmssm_ext_tt2_22) - 9.4671576E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_22) == 9.4671576E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-04) ** 2 + error(nmssm_ext_tt2_23) ** 2)
printf "Expecting 2.7852701E-01"
show(integral(nmssm_ext_tt2_23))
real pull = abs (integral (nmssm_ext_tt2_23) - 2.7852701E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_23) == 2.7852701E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.46E-04) ** 2 + error(nmssm_ext_tt2_24) ** 2)
printf "Expecting 1.1073849E+00"
show(integral(nmssm_ext_tt2_24))
real pull = abs (integral (nmssm_ext_tt2_24) - 1.1073849E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_24) == 1.1073849E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.32E-04) ** 2 + error(nmssm_ext_tt2_25) ** 2)
printf "Expecting 2.6978007E-01"
show(integral(nmssm_ext_tt2_25))
real pull = abs (integral (nmssm_ext_tt2_25) - 2.6978007E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_25) == 2.6978007E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.42E-04) ** 2 + error(nmssm_ext_tt2_26) ** 2)
printf "Expecting 1.1081091E+00"
show(integral(nmssm_ext_tt2_26))
real pull = abs (integral (nmssm_ext_tt2_26) - 1.1081091E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_26) == 1.1081091E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.32E-04) ** 2 + error(nmssm_ext_tt2_27) ** 2)
printf "Expecting 2.6988195E-01"
show(integral(nmssm_ext_tt2_27))
real pull = abs (integral (nmssm_ext_tt2_27) - 2.6988195E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_27) == 2.6988195E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.82E-04) ** 2 + error(nmssm_ext_tt2_28) ** 2)
printf "Expecting 3.7400016E-01"
show(integral(nmssm_ext_tt2_28))
real pull = abs (integral (nmssm_ext_tt2_28) - 3.7400016E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_28) == 3.7400016E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.21E-04) ** 2 + error(nmssm_ext_tt2_29) ** 2)
printf "Expecting 4.5060324E-01"
show(integral(nmssm_ext_tt2_29))
real pull = abs (integral (nmssm_ext_tt2_29) - 4.5060324E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_29) == 4.5060324E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-04) ** 2 + error(nmssm_ext_tt2_30) ** 2)
printf "Expecting 2.7686787E-01"
show(integral(nmssm_ext_tt2_30))
real pull = abs (integral (nmssm_ext_tt2_30) - 2.7686787E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_30) == 2.7686787E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.21E-03) ** 2 + error(nmssm_ext_tt2_31) ** 2)
printf "Expecting 4.4616682E+00"
show(integral(nmssm_ext_tt2_31))
real pull = abs (integral (nmssm_ext_tt2_31) - 4.4616682E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_31) == 4.4616682E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.62E-04) ** 2 + error(nmssm_ext_tt2_32) ** 2)
printf "Expecting 6.2984215E-01"
show(integral(nmssm_ext_tt2_32))
real pull = abs (integral (nmssm_ext_tt2_32) - 6.2984215E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_32) == 6.2984215E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.81E-04) ** 2 + error(nmssm_ext_tt2_33) ** 2)
printf "Expecting 1.2191838E+00"
show(integral(nmssm_ext_tt2_33))
real pull = abs (integral (nmssm_ext_tt2_33) - 1.2191838E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_33) == 1.2191838E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.90E-05) ** 2 + error(nmssm_ext_tt2_34) ** 2)
printf "Expecting 8.6703517E-02"
show(integral(nmssm_ext_tt2_34))
real pull = abs (integral (nmssm_ext_tt2_34) - 8.6703517E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_34) == 8.6703517E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.43E-05) ** 2 + error(nmssm_ext_tt2_35) ** 2)
printf "Expecting 3.8920326E-02"
show(integral(nmssm_ext_tt2_35))
real pull = abs (integral (nmssm_ext_tt2_35) - 3.8920326E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_35) == 3.8920326E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.95E-05) ** 2 + error(nmssm_ext_tt2_36) ** 2)
printf "Expecting 9.6075630E-02"
show(integral(nmssm_ext_tt2_36))
real pull = abs (integral (nmssm_ext_tt2_36) - 9.6075630E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_36) == 9.6075630E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.67E-04) ** 2 + error(nmssm_ext_tt2_37) ** 2)
printf "Expecting 9.2296444E-01"
show(integral(nmssm_ext_tt2_37))
real pull = abs (integral (nmssm_ext_tt2_37) - 9.2296444E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_37) == 9.2296444E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.11E-05) ** 2 + error(nmssm_ext_tt2_38) ** 2)
printf "Expecting 6.4886500E-02"
show(integral(nmssm_ext_tt2_38))
real pull = abs (integral (nmssm_ext_tt2_38) - 6.4886500E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_38) == 6.4886500E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.43E-05) ** 2 + error(nmssm_ext_tt2_39) ** 2)
printf "Expecting 3.7132733E-02"
show(integral(nmssm_ext_tt2_39))
real pull = abs (integral (nmssm_ext_tt2_39) - 3.7132733E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_39) == 3.7132733E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E-03) ** 2 + error(nmssm_ext_tt2_40) ** 2)
printf "Expecting 3.1159502E+00"
show(integral(nmssm_ext_tt2_40))
real pull = abs (integral (nmssm_ext_tt2_40) - 3.1159502E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_40) == 3.1159502E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E-04) ** 2 + error(nmssm_ext_tt2_41) ** 2)
printf "Expecting 1.8261317E-01"
show(integral(nmssm_ext_tt2_41))
real pull = abs (integral (nmssm_ext_tt2_41) - 1.8261317E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_41) == 1.8261317E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.78E-05) ** 2 + error(nmssm_ext_tt2_42) ** 2)
printf "Expecting 6.1401855E-02"
show(integral(nmssm_ext_tt2_42))
real pull = abs (integral (nmssm_ext_tt2_42) - 6.1401855E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_42) == 6.1401855E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.48E-07) ** 2 + error(nmssm_ext_tt2_43) ** 2)
printf "Expecting 1.5868859E-03"
show(integral(nmssm_ext_tt2_43))
real pull = abs (integral (nmssm_ext_tt2_43) - 1.5868859E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_43) == 1.5868859E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.12E-03) ** 2 + error(nmssm_ext_tt2_44) ** 2)
printf "Expecting 1.7621701E+00"
show(integral(nmssm_ext_tt2_44))
real pull = abs (integral (nmssm_ext_tt2_44) - 1.7621701E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_44) == 1.7621701E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.32E-07) ** 2 + error(nmssm_ext_tt2_45) ** 2)
printf "Expecting 1.3020049E-03"
show(integral(nmssm_ext_tt2_45))
real pull = abs (integral (nmssm_ext_tt2_45) - 1.3020049E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_45) == 1.3020049E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.57E-03) ** 2 + error(nmssm_ext_tt2_46) ** 2)
printf "Expecting 8.4877855E+00"
show(integral(nmssm_ext_tt2_46))
real pull = abs (integral (nmssm_ext_tt2_46) - 8.4877855E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_46) == 8.4877855E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.46E-03) ** 2 + error(nmssm_ext_tt2_47) ** 2)
printf "Expecting 4.5935212E+00"
show(integral(nmssm_ext_tt2_47))
real pull = abs (integral (nmssm_ext_tt2_47) - 4.5935212E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_47) == 4.5935212E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E-04) ** 2 + error(nmssm_ext_tt2_48) ** 2)
printf "Expecting 2.6416303E-01"
show(integral(nmssm_ext_tt2_48))
real pull = abs (integral (nmssm_ext_tt2_48) - 2.6416303E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_48) == 2.6416303E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.43E-04) ** 2 + error(nmssm_ext_tt2_49) ** 2)
printf "Expecting 2.6443569E-01"
show(integral(nmssm_ext_tt2_49))
real pull = abs (integral (nmssm_ext_tt2_49) - 2.6443569E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch2+,ch1- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_49) == 2.6443569E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.00E-07) ** 2 + error(nmssm_ext_tt2_50) ** 2)
printf "Expecting 4.9290295E-06"
show(integral(nmssm_ext_tt2_50))
real pull = abs (integral (nmssm_ext_tt2_50) - 4.9290295E-06) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_50) == 4.9290295E-06)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.96E-07) ** 2 + error(nmssm_ext_tt2_51) ** 2)
printf "Expecting 2.1625199E-04"
show(integral(nmssm_ext_tt2_51))
real pull = abs (integral (nmssm_ext_tt2_51) - 2.1625199E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_51) == 2.1625199E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.43E-08) ** 2 + error(nmssm_ext_tt2_52) ** 2)
printf "Expecting 7.8024065E-05"
show(integral(nmssm_ext_tt2_52))
real pull = abs (integral (nmssm_ext_tt2_52) - 7.8024065E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_52) == 7.8024065E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.66E-08) ** 2 + error(nmssm_ext_tt2_53) ** 2)
printf "Expecting 5.1112918E-05"
show(integral(nmssm_ext_tt2_53))
real pull = abs (integral (nmssm_ext_tt2_53) - 5.1112918E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_53) == 5.1112918E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.90E-07) ** 2 + error(nmssm_ext_tt2_54) ** 2)
printf "Expecting 9.8440561E-04"
show(integral(nmssm_ext_tt2_54))
real pull = abs (integral (nmssm_ext_tt2_54) - 9.8440561E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_54) == 9.8440561E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.90E-08) ** 2 + error(nmssm_ext_tt2_55) ** 2)
printf "Expecting 2.2536319E-05"
show(integral(nmssm_ext_tt2_55))
real pull = abs (integral (nmssm_ext_tt2_55) - 2.2536319E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h03,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_55) == 2.2536319E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.03E-10) ** 2 + error(nmssm_ext_tt2_56) ** 2)
printf "Expecting 2.3956259E-07"
show(integral(nmssm_ext_tt2_56))
real pull = abs (integral (nmssm_ext_tt2_56) - 2.3956259E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_56) == 2.3956259E-07)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.59E-08) ** 2 + error(nmssm_ext_tt2_57) ** 2)
printf "Expecting 1.0783899E-04"
show(integral(nmssm_ext_tt2_57))
real pull = abs (integral (nmssm_ext_tt2_57) - 1.0783899E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_57) == 1.0783899E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-08) ** 2 + error(nmssm_ext_tt2_58) ** 2)
printf "Expecting 1.4882435E-05"
show(integral(nmssm_ext_tt2_58))
real pull = abs (integral (nmssm_ext_tt2_58) - 1.4882435E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_58) == 1.4882435E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.28E-04) ** 2 + error(nmssm_ext_tt2_59) ** 2)
printf "Expecting 4.8921997E-01"
show(integral(nmssm_ext_tt2_59))
real pull = abs (integral (nmssm_ext_tt2_59) - 4.8921997E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_59) == 4.8921997E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.17E-05) ** 2 + error(nmssm_ext_tt2_60) ** 2)
printf "Expecting 1.0467581E-02"
show(integral(nmssm_ext_tt2_60))
real pull = abs (integral (nmssm_ext_tt2_60) - 1.0467581E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_60) == 1.0467581E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.69E-05) ** 2 + error(nmssm_ext_tt2_61) ** 2)
printf "Expecting 3.6806884E-02"
show(integral(nmssm_ext_tt2_61))
real pull = abs (integral (nmssm_ext_tt2_61) - 3.6806884E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_61) == 3.6806884E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.38E-07) ** 2 + error(nmssm_ext_tt2_62) ** 2)
printf "Expecting 9.0419491E-04"
show(integral(nmssm_ext_tt2_62))
real pull = abs (integral (nmssm_ext_tt2_62) - 9.0419491E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_62) == 9.0419491E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.68E-05) ** 2 + error(nmssm_ext_tt2_63) ** 2)
printf "Expecting 3.6660921E-02"
show(integral(nmssm_ext_tt2_63))
real pull = abs (integral (nmssm_ext_tt2_63) - 3.6660921E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_63) == 3.6660921E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.30E-07) ** 2 + error(nmssm_ext_tt2_64) ** 2)
printf "Expecting 4.8084173E-04"
show(integral(nmssm_ext_tt2_64))
real pull = abs (integral (nmssm_ext_tt2_64) - 4.8084173E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_64) == 4.8084173E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.61E-08) ** 2 + error(nmssm_ext_tt2_65) ** 2)
printf "Expecting 6.0110499E-05"
show(integral(nmssm_ext_tt2_65))
real pull = abs (integral (nmssm_ext_tt2_65) - 6.0110499E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_65) == 6.0110499E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.13E-06) ** 2 + error(nmssm_ext_tt2_66) ** 2)
printf "Expecting 2.8205463E-03"
show(integral(nmssm_ext_tt2_66))
real pull = abs (integral (nmssm_ext_tt2_66) - 2.8205463E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_66) == 2.8205463E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.61E-08) ** 2 + error(nmssm_ext_tt2_67) ** 2)
printf "Expecting 1.0814750E-04"
show(integral(nmssm_ext_tt2_67))
real pull = abs (integral (nmssm_ext_tt2_67) - 1.0814750E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_67) == 1.0814750E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.24E-06) ** 2 + error(nmssm_ext_tt2_68) ** 2)
printf "Expecting 2.2514974E-03"
show(integral(nmssm_ext_tt2_68))
real pull = abs (integral (nmssm_ext_tt2_68) - 2.2514974E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_68) == 2.2514974E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.26E-04) ** 2 + error(nmssm_ext_tt2_69) ** 2)
printf "Expecting 2.9419677E-01"
show(integral(nmssm_ext_tt2_69))
real pull = abs (integral (nmssm_ext_tt2_69) - 2.9419677E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_69) == 2.9419677E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.95E-04) ** 2 + error(nmssm_ext_tt2_70) ** 2)
printf "Expecting 7.3254962E-01"
show(integral(nmssm_ext_tt2_70))
real pull = abs (integral (nmssm_ext_tt2_70) - 7.3254962E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt2_70) == 7.3254962E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
