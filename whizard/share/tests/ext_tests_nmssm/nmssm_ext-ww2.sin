

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-ww2.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------






























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_ww2_1 = Wm,Wp => Z,Z		
process nmssm_ext_ww2_2 = Wm,Wp => se1,SE1	
process nmssm_ext_ww2_3 = Wm,Wp => se2,SE2	
process nmssm_ext_ww2_4 = Wm,Wp => smu1,SMU1	
process nmssm_ext_ww2_5 = Wm,Wp => smu2,SMU2	
process nmssm_ext_ww2_6 = Wm,Wp => stau1,STAU1	
process nmssm_ext_ww2_7 = Wm,Wp => stau2,STAU2	
process nmssm_ext_ww2_8 = Wm,Wp => stau1,STAU2	
process nmssm_ext_ww2_9 = Wm,Wp => sn11,SN11	
process nmssm_ext_ww2_10 = Wm,Wp => sn21,SN21	
process nmssm_ext_ww2_11 = Wm,Wp => sn31,SN31	
process nmssm_ext_ww2_12 = Wm,Wp => su1,su1c	
process nmssm_ext_ww2_13 = Wm,Wp => su2,su2c	
process nmssm_ext_ww2_14 = Wm,Wp => sc1,sc1c	
process nmssm_ext_ww2_15 = Wm,Wp => sc2,sc2c	
process nmssm_ext_ww2_16 = Wm,Wp => st1,st1c	
process nmssm_ext_ww2_17 = Wm,Wp => st2,st2c	
process nmssm_ext_ww2_18 = Wm,Wp => st1,st2c	
process nmssm_ext_ww2_19 = Wm,Wp => sd1,sd1c	
process nmssm_ext_ww2_20 = Wm,Wp => sd2,sd2c	
process nmssm_ext_ww2_21 = Wm,Wp => ss1,ss1c	
process nmssm_ext_ww2_22 = Wm,Wp => ss2,ss2c	
process nmssm_ext_ww2_23 = Wm,Wp => sb1,sb1c	
process nmssm_ext_ww2_24 = Wm,Wp => sb2,sb2c	
process nmssm_ext_ww2_25 = Wm,Wp => sb1,sb2c	
process nmssm_ext_ww2_26 = Wm,Wp => neu1,neu1	
process nmssm_ext_ww2_27 = Wm,Wp => neu1,neu2	
process nmssm_ext_ww2_28 = Wm,Wp => neu1,neu3	
process nmssm_ext_ww2_29 = Wm,Wp => neu1,neu4	
process nmssm_ext_ww2_30 = Wm,Wp => neu1,neu5	
process nmssm_ext_ww2_31 = Wm,Wp => neu2,neu2	
process nmssm_ext_ww2_32 = Wm,Wp => neu2,neu3	
process nmssm_ext_ww2_33 = Wm,Wp => neu2,neu4	
process nmssm_ext_ww2_34 = Wm,Wp => neu2,neu5	
process nmssm_ext_ww2_35 = Wm,Wp => neu3,neu3	
process nmssm_ext_ww2_36 = Wm,Wp => neu3,neu4	
process nmssm_ext_ww2_37 = Wm,Wp => neu3,neu5	
process nmssm_ext_ww2_38 = Wm,Wp => neu4,neu4	
process nmssm_ext_ww2_39 = Wm,Wp => neu4,neu5	
process nmssm_ext_ww2_40 = Wm,Wp => neu5,neu5	
process nmssm_ext_ww2_41 = Wm,Wp => "ch1+","ch1-"
process nmssm_ext_ww2_42 = Wm,Wp => "ch2+","ch2-"
process nmssm_ext_ww2_43 = Wm,Wp => "ch1+","ch2-"
process nmssm_ext_ww2_44 = Wm,Wp => h01,h01	
process nmssm_ext_ww2_45 = Wm,Wp => h01,h02	
process nmssm_ext_ww2_46 = Wm,Wp => h01,h03	
process nmssm_ext_ww2_47 = Wm,Wp => h02,h02	
process nmssm_ext_ww2_48 = Wm,Wp => h02,h03	
process nmssm_ext_ww2_49 = Wm,Wp => h03,h03	
process nmssm_ext_ww2_50 = Wm,Wp => A01,A01	
process nmssm_ext_ww2_51 = Wm,Wp => A01,A02	
process nmssm_ext_ww2_52 = Wm,Wp => A02,A02	
process nmssm_ext_ww2_53 = Wm,Wp => Z,h01	
process nmssm_ext_ww2_54 = Wm,Wp => Z,h02	
process nmssm_ext_ww2_55 = Wm,Wp => Z,h03	
process nmssm_ext_ww2_56 = Wm,Wp => A01,h01	
process nmssm_ext_ww2_57 = Wm,Wp => A01,h02	
process nmssm_ext_ww2_58 = Wm,Wp => A01,h03	
process nmssm_ext_ww2_59 = Wm,Wp => A02,h01	
process nmssm_ext_ww2_60 = Wm,Wp => A02,h02	
process nmssm_ext_ww2_61 = Wm,Wp => A02,h03	
process nmssm_ext_ww2_62 = Wm,Wp => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_1)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_2)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_3)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_4)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_5)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_6)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_7)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_8)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_9)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_10)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_11)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_12)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_13)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_14)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_15)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_16)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_17)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_18)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_19)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_20)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_21)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_22)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_23)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_24)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_25)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_26)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_27)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_28)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_29)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_30)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_31)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_32)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_33)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_34)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_35)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_36)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_37)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_38)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_39)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_40)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_41)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_42)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_43)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_44)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_45)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_46)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_47)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_48)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_49)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_50)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_51)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_52)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_53)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_54)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_55)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_56)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_57)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_58)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_59)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_60)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_61)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww2_62)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.09E+02) ** 2 + error(nmssm_ext_ww2_1) ** 2)
printf "Expecting 3.0256862E+05"
show(integral(nmssm_ext_ww2_1))
real pull = abs (integral (nmssm_ext_ww2_1) - 3.0256862E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,Z		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_1) == 3.0256862E+05)
printf "************************************************************************"
printf "* Checking Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.69E-03) ** 2 + error(nmssm_ext_ww2_2) ** 2)
printf "Expecting 4.2961815E+00"
show(integral(nmssm_ext_ww2_2))
real pull = abs (integral (nmssm_ext_ww2_2) - 4.2961815E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_2) == 4.2961815E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.04E-05) ** 2 + error(nmssm_ext_ww2_3) ** 2)
printf "Expecting 9.7748764E-02"
show(integral(nmssm_ext_ww2_3))
real pull = abs (integral (nmssm_ext_ww2_3) - 9.7748764E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_3) == 9.7748764E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.69E-03) ** 2 + error(nmssm_ext_ww2_4) ** 2)
printf "Expecting 4.2245897E+00"
show(integral(nmssm_ext_ww2_4))
real pull = abs (integral (nmssm_ext_ww2_4) - 4.2245897E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_4) == 4.2245897E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.98E-05) ** 2 + error(nmssm_ext_ww2_5) ** 2)
printf "Expecting 9.7880662E-02"
show(integral(nmssm_ext_ww2_5))
real pull = abs (integral (nmssm_ext_ww2_5) - 9.7880662E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_5) == 9.7880662E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.48E-04) ** 2 + error(nmssm_ext_ww2_6) ** 2)
printf "Expecting 1.0729103E+00"
show(integral(nmssm_ext_ww2_6))
real pull = abs (integral (nmssm_ext_ww2_6) - 1.0729103E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_6) == 1.0729103E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.86E-04) ** 2 + error(nmssm_ext_ww2_7) ** 2)
printf "Expecting 1.1320350E+00"
show(integral(nmssm_ext_ww2_7))
real pull = abs (integral (nmssm_ext_ww2_7) - 1.1320350E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_7) == 1.1320350E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.03E-04) ** 2 + error(nmssm_ext_ww2_8) ** 2)
printf "Expecting 1.1026023E+00"
show(integral(nmssm_ext_ww2_8))
real pull = abs (integral (nmssm_ext_ww2_8) - 1.1026023E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_8) == 1.1026023E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.01E-03) ** 2 + error(nmssm_ext_ww2_9) ** 2)
printf "Expecting 4.0040052E+00"
show(integral(nmssm_ext_ww2_9))
real pull = abs (integral (nmssm_ext_ww2_9) - 4.0040052E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_9) == 4.0040052E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.08E-03) ** 2 + error(nmssm_ext_ww2_10) ** 2)
printf "Expecting 3.9698134E+00"
show(integral(nmssm_ext_ww2_10))
real pull = abs (integral (nmssm_ext_ww2_10) - 3.9698134E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_10) == 3.9698134E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.07E-03) ** 2 + error(nmssm_ext_ww2_11) ** 2)
printf "Expecting 3.9973031E+00"
show(integral(nmssm_ext_ww2_11))
real pull = abs (integral (nmssm_ext_ww2_11) - 3.9973031E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_11) == 3.9973031E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.34E-03) ** 2 + error(nmssm_ext_ww2_12) ** 2)
printf "Expecting 7.5989113E+00"
show(integral(nmssm_ext_ww2_12))
real pull = abs (integral (nmssm_ext_ww2_12) - 7.5989113E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_12) == 7.5989113E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.65E-05) ** 2 + error(nmssm_ext_ww2_13) ** 2)
printf "Expecting 1.1032293E-01"
show(integral(nmssm_ext_ww2_13))
real pull = abs (integral (nmssm_ext_ww2_13) - 1.1032293E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_13) == 1.1032293E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.34E-03) ** 2 + error(nmssm_ext_ww2_14) ** 2)
printf "Expecting 7.6028783E+00"
show(integral(nmssm_ext_ww2_14))
real pull = abs (integral (nmssm_ext_ww2_14) - 7.6028783E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_14) == 7.6028783E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.66E-05) ** 2 + error(nmssm_ext_ww2_15) ** 2)
printf "Expecting 1.0994796E-01"
show(integral(nmssm_ext_ww2_15))
real pull = abs (integral (nmssm_ext_ww2_15) - 1.0994796E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_15) == 1.0994796E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.31E-02) ** 2 + error(nmssm_ext_ww2_16) ** 2)
printf "Expecting 6.8687413E+01"
show(integral(nmssm_ext_ww2_16))
real pull = abs (integral (nmssm_ext_ww2_16) - 6.8687413E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_16) == 6.8687413E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-02) ** 2 + error(nmssm_ext_ww2_17) ** 2)
printf "Expecting 1.3780698E+02"
show(integral(nmssm_ext_ww2_17))
real pull = abs (integral (nmssm_ext_ww2_17) - 1.3780698E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_17) == 1.3780698E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.43E-02) ** 2 + error(nmssm_ext_ww2_18) ** 2)
printf "Expecting 3.2163755E+01"
show(integral(nmssm_ext_ww2_18))
real pull = abs (integral (nmssm_ext_ww2_18) - 3.2163755E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_18) == 3.2163755E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.76E-03) ** 2 + error(nmssm_ext_ww2_19) ** 2)
printf "Expecting 7.3351390E+00"
show(integral(nmssm_ext_ww2_19))
real pull = abs (integral (nmssm_ext_ww2_19) - 7.3351390E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_19) == 7.3351390E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.66E-05) ** 2 + error(nmssm_ext_ww2_20) ** 2)
printf "Expecting 2.7574850E-02"
show(integral(nmssm_ext_ww2_20))
real pull = abs (integral (nmssm_ext_ww2_20) - 2.7574850E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_20) == 2.7574850E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.80E-03) ** 2 + error(nmssm_ext_ww2_21) ** 2)
printf "Expecting 7.3280538E+00"
show(integral(nmssm_ext_ww2_21))
real pull = abs (integral (nmssm_ext_ww2_21) - 7.3280538E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_21) == 7.3280538E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.65E-05) ** 2 + error(nmssm_ext_ww2_22) ** 2)
printf "Expecting 2.7589163E-02"
show(integral(nmssm_ext_ww2_22))
real pull = abs (integral (nmssm_ext_ww2_22) - 2.7589163E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_22) == 2.7589163E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.21E-02) ** 2 + error(nmssm_ext_ww2_23) ** 2)
printf "Expecting 1.5746729E+01"
show(integral(nmssm_ext_ww2_23))
real pull = abs (integral (nmssm_ext_ww2_23) - 1.5746729E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_23) == 1.5746729E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-02) ** 2 + error(nmssm_ext_ww2_24) ** 2)
printf "Expecting 2.1558563E+01"
show(integral(nmssm_ext_ww2_24))
real pull = abs (integral (nmssm_ext_ww2_24) - 2.1558563E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_24) == 2.1558563E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.27E-02) ** 2 + error(nmssm_ext_ww2_25) ** 2)
printf "Expecting 1.8252757E+01"
show(integral(nmssm_ext_ww2_25))
real pull = abs (integral (nmssm_ext_ww2_25) - 1.8252757E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_25) == 1.8252757E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-04) ** 2 + error(nmssm_ext_ww2_26) ** 2)
printf "Expecting 4.0046375E-01"
show(integral(nmssm_ext_ww2_26))
real pull = abs (integral (nmssm_ext_ww2_26) - 4.0046375E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_26) == 4.0046375E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-03) ** 2 + error(nmssm_ext_ww2_27) ** 2)
printf "Expecting 4.4419852E+00"
show(integral(nmssm_ext_ww2_27))
real pull = abs (integral (nmssm_ext_ww2_27) - 4.4419852E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_27) == 4.4419852E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.49E-03) ** 2 + error(nmssm_ext_ww2_28) ** 2)
printf "Expecting 1.1718684E+01"
show(integral(nmssm_ext_ww2_28))
real pull = abs (integral (nmssm_ext_ww2_28) - 1.1718684E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_28) == 1.1718684E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.07E-03) ** 2 + error(nmssm_ext_ww2_29) ** 2)
printf "Expecting 3.6958497E+00"
show(integral(nmssm_ext_ww2_29))
real pull = abs (integral (nmssm_ext_ww2_29) - 3.6958497E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_29) == 3.6958497E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.59E-03) ** 2 + error(nmssm_ext_ww2_30) ** 2)
printf "Expecting 4.1553157E+00"
show(integral(nmssm_ext_ww2_30))
real pull = abs (integral (nmssm_ext_ww2_30) - 4.1553157E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_30) == 4.1553157E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.90E-03) ** 2 + error(nmssm_ext_ww2_31) ** 2)
printf "Expecting 1.1407746E+01"
show(integral(nmssm_ext_ww2_31))
real pull = abs (integral (nmssm_ext_ww2_31) - 1.1407746E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_31) == 1.1407746E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.32E-02) ** 2 + error(nmssm_ext_ww2_32) ** 2)
printf "Expecting 5.2925007E+01"
show(integral(nmssm_ext_ww2_32))
real pull = abs (integral (nmssm_ext_ww2_32) - 5.2925007E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_32) == 5.2925007E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.96E-03) ** 2 + error(nmssm_ext_ww2_33) ** 2)
printf "Expecting 2.9786186E+01"
show(integral(nmssm_ext_ww2_33))
real pull = abs (integral (nmssm_ext_ww2_33) - 2.9786186E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_33) == 2.9786186E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.27E-03) ** 2 + error(nmssm_ext_ww2_34) ** 2)
printf "Expecting 2.9080333E+01"
show(integral(nmssm_ext_ww2_34))
real pull = abs (integral (nmssm_ext_ww2_34) - 2.9080333E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_34) == 2.9080333E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.01E-01) ** 2 + error(nmssm_ext_ww2_35) ** 2)
printf "Expecting 2.5259643E+02"
show(integral(nmssm_ext_ww2_35))
real pull = abs (integral (nmssm_ext_ww2_35) - 2.5259643E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_35) == 2.5259643E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.20E-02) ** 2 + error(nmssm_ext_ww2_36) ** 2)
printf "Expecting 9.6820168E+01"
show(integral(nmssm_ext_ww2_36))
real pull = abs (integral (nmssm_ext_ww2_36) - 9.6820168E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_36) == 9.6820168E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.20E-02) ** 2 + error(nmssm_ext_ww2_37) ** 2)
printf "Expecting 9.2469130E+01"
show(integral(nmssm_ext_ww2_37))
real pull = abs (integral (nmssm_ext_ww2_37) - 9.2469130E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_37) == 9.2469130E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.82E-03) ** 2 + error(nmssm_ext_ww2_38) ** 2)
printf "Expecting 1.8883780E+01"
show(integral(nmssm_ext_ww2_38))
real pull = abs (integral (nmssm_ext_ww2_38) - 1.8883780E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_38) == 1.8883780E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.27E-02) ** 2 + error(nmssm_ext_ww2_39) ** 2)
printf "Expecting 2.8424277E+01"
show(integral(nmssm_ext_ww2_39))
real pull = abs (integral (nmssm_ext_ww2_39) - 2.8424277E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_39) == 2.8424277E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.74E-03) ** 2 + error(nmssm_ext_ww2_40) ** 2)
printf "Expecting 1.6508763E+01"
show(integral(nmssm_ext_ww2_40))
real pull = abs (integral (nmssm_ext_ww2_40) - 1.6508763E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_40) == 1.6508763E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.38E-01) ** 2 + error(nmssm_ext_ww2_41) ** 2)
printf "Expecting 2.7365872E+02"
show(integral(nmssm_ext_ww2_41))
real pull = abs (integral (nmssm_ext_ww2_41) - 2.7365872E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_41) == 2.7365872E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.29E-02) ** 2 + error(nmssm_ext_ww2_42) ** 2)
printf "Expecting 9.0179187E+01"
show(integral(nmssm_ext_ww2_42))
real pull = abs (integral (nmssm_ext_ww2_42) - 9.0179187E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_42) == 9.0179187E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.21E-02) ** 2 + error(nmssm_ext_ww2_43) ** 2)
printf "Expecting 3.9432532E+01"
show(integral(nmssm_ext_ww2_43))
real pull = abs (integral (nmssm_ext_ww2_43) - 3.9432532E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_43) == 3.9432532E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.41E+01) ** 2 + error(nmssm_ext_ww2_44) ** 2)
printf "Expecting 5.7542757E+03"
show(integral(nmssm_ext_ww2_44))
real pull = abs (integral (nmssm_ext_ww2_44) - 5.7542757E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_44) == 5.7542757E+03)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.31E+00) ** 2 + error(nmssm_ext_ww2_45) ** 2)
printf "Expecting 2.4598879E+02"
show(integral(nmssm_ext_ww2_45))
real pull = abs (integral (nmssm_ext_ww2_45) - 2.4598879E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_45) == 2.4598879E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.60E-04) ** 2 + error(nmssm_ext_ww2_46) ** 2)
printf "Expecting 1.1767950E+00"
show(integral(nmssm_ext_ww2_46))
real pull = abs (integral (nmssm_ext_ww2_46) - 1.1767950E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_46) == 1.1767950E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.97E-02) ** 2 + error(nmssm_ext_ww2_47) ** 2)
printf "Expecting 4.7975263E+00"
show(integral(nmssm_ext_ww2_47))
real pull = abs (integral (nmssm_ext_ww2_47) - 4.7975263E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_47) == 4.7975263E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-04) ** 2 + error(nmssm_ext_ww2_48) ** 2)
printf "Expecting 4.2294600E-01"
show(integral(nmssm_ext_ww2_48))
real pull = abs (integral (nmssm_ext_ww2_48) - 4.2294600E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_48) == 4.2294600E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.58E-04) ** 2 + error(nmssm_ext_ww2_49) ** 2)
printf "Expecting 3.1540532E+00"
show(integral(nmssm_ext_ww2_49))
real pull = abs (integral (nmssm_ext_ww2_49) - 3.1540532E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h03,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_49) == 3.1540532E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.44E-03) ** 2 + error(nmssm_ext_ww2_50) ** 2)
printf "Expecting 3.2330117E+00"
show(integral(nmssm_ext_ww2_50))
real pull = abs (integral (nmssm_ext_ww2_50) - 3.2330117E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_50) == 3.2330117E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.31E-04) ** 2 + error(nmssm_ext_ww2_51) ** 2)
printf "Expecting 5.6717388E-01"
show(integral(nmssm_ext_ww2_51))
real pull = abs (integral (nmssm_ext_ww2_51) - 5.6717388E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_51) == 5.6717388E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.26E-03) ** 2 + error(nmssm_ext_ww2_52) ** 2)
printf "Expecting 4.5513645E+00"
show(integral(nmssm_ext_ww2_52))
real pull = abs (integral (nmssm_ext_ww2_52) - 4.5513645E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_52) == 4.5513645E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.12E+02) ** 2 + error(nmssm_ext_ww2_53) ** 2)
printf "Expecting 8.2984240E+04"
show(integral(nmssm_ext_ww2_53))
real pull = abs (integral (nmssm_ext_ww2_53) - 8.2984240E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_53) == 8.2984240E+04)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.42E+00) ** 2 + error(nmssm_ext_ww2_54) ** 2)
printf "Expecting 1.7813470E+03"
show(integral(nmssm_ext_ww2_54))
real pull = abs (integral (nmssm_ext_ww2_54) - 1.7813470E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_54) == 1.7813470E+03)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.51E-05) ** 2 + error(nmssm_ext_ww2_55) ** 2)
printf "Expecting 4.1611376E-02"
show(integral(nmssm_ext_ww2_55))
real pull = abs (integral (nmssm_ext_ww2_55) - 4.1611376E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_55) == 4.1611376E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.92E-07) ** 2 + error(nmssm_ext_ww2_56) ** 2)
printf "Expecting 1.3628187E-03"
show(integral(nmssm_ext_ww2_56))
real pull = abs (integral (nmssm_ext_ww2_56) - 1.3628187E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_56) == 1.3628187E-03)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.73E-05) ** 2 + error(nmssm_ext_ww2_57) ** 2)
printf "Expecting 5.3713419E-02"
show(integral(nmssm_ext_ww2_57))
real pull = abs (integral (nmssm_ext_ww2_57) - 5.3713419E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_57) == 5.3713419E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.80E-04) ** 2 + error(nmssm_ext_ww2_58) ** 2)
printf "Expecting 3.9356374E-01"
show(integral(nmssm_ext_ww2_58))
real pull = abs (integral (nmssm_ext_ww2_58) - 3.9356374E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_58) == 3.9356374E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.04E-06) ** 2 + error(nmssm_ext_ww2_59) ** 2)
printf "Expecting 4.4113338E-03"
show(integral(nmssm_ext_ww2_59))
real pull = abs (integral (nmssm_ext_ww2_59) - 4.4113338E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_59) == 4.4113338E-03)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.07E-05) ** 2 + error(nmssm_ext_ww2_60) ** 2)
printf "Expecting 1.7295811E-01"
show(integral(nmssm_ext_ww2_60))
real pull = abs (integral (nmssm_ext_ww2_60) - 1.7295811E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_60) == 1.7295811E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.30E-04) ** 2 + error(nmssm_ext_ww2_61) ** 2)
printf "Expecting 3.9868079E-01"
show(integral(nmssm_ext_ww2_61))
real pull = abs (integral (nmssm_ext_ww2_61) - 3.9868079E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_61) == 3.9868079E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.08E-03) ** 2 + error(nmssm_ext_ww2_62) ** 2)
printf "Expecting 6.8585415E+00"
show(integral(nmssm_ext_ww2_62))
real pull = abs (integral (nmssm_ext_ww2_62) - 6.8585415E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww2_62) == 6.8585415E+00)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
