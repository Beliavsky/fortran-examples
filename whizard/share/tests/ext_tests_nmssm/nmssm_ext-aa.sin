

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-aa.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 2000
! show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------














































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_aa_1 = A,A => t,T		
process nmssm_ext_aa_2 = A,A => Wp,Wm		
process nmssm_ext_aa_3 = A,A => se1, SE1	
process nmssm_ext_aa_4 = A,A => se2, SE2	
process nmssm_ext_aa_5 = A,A => smu1, SMU1	
process nmssm_ext_aa_6 = A,A => smu2, SMU2	
process nmssm_ext_aa_7 = A,A => stau1, STAU1	
process nmssm_ext_aa_8 = A,A => stau2, STAU2	
process nmssm_ext_aa_9 = A,A => su1,su1c	
process nmssm_ext_aa_10 = A,A => su2,su2c	
process nmssm_ext_aa_11 = A,A => sc1,sc1c	
process nmssm_ext_aa_12 = A,A => sc2,sc2c	
process nmssm_ext_aa_13 = A,A => st1,st1c	
process nmssm_ext_aa_14 = A,A => st2,st2c	
process nmssm_ext_aa_15 = A,A => sd1,sd1c	
process nmssm_ext_aa_16 = A,A => sd2,sd2c	
process nmssm_ext_aa_17 = A,A => ss1,ss1c	
process nmssm_ext_aa_18 = A,A => ss2,ss2c	
process nmssm_ext_aa_19 = A,A => sb1,sb1c	
process nmssm_ext_aa_20 = A,A => sb2,sb2c	
process nmssm_ext_aa_21 = A,A => "ch1+","ch1-"	
process nmssm_ext_aa_22 = A,A => "ch2+","ch2-"	
process nmssm_ext_aa_23 = A,A => Hp,Hm		
process nmssm_ext_aa_24 = A,A => t,T		
process nmssm_ext_aa_25 = A,A => Wp,Wm		
process nmssm_ext_aa_26 = A,A => se1,SE1	
process nmssm_ext_aa_27 = A,A => se2,SE2	
process nmssm_ext_aa_28 = A,A => smu1,SMU1	
process nmssm_ext_aa_29 = A,A => smu2,SMU2	
process nmssm_ext_aa_30 = A,A => stau1,STAU1	
process nmssm_ext_aa_31 = A,A => stau2,STAU2	
process nmssm_ext_aa_32 = A,A => su1,su1c	
process nmssm_ext_aa_33 = A,A => su2,su2c	
process nmssm_ext_aa_34 = A,A => sc1,sc1c	
process nmssm_ext_aa_35 = A,A => sc2,sc2c	
process nmssm_ext_aa_36 = A,A => st1,st1c	
process nmssm_ext_aa_37 = A,A => st2,st2c	
process nmssm_ext_aa_38 = A,A => sd1,sd1c	
process nmssm_ext_aa_39 = A,A => sd2,sd2c	
process nmssm_ext_aa_40 = A,A => ss1,ss1c	
process nmssm_ext_aa_41 = A,A => ss2,ss2c	
process nmssm_ext_aa_42 = A,A => sb1,sb1c	
process nmssm_ext_aa_43 = A,A => sb2,sb2c	
process nmssm_ext_aa_44 = A,A => "ch1+","ch1-"	
process nmssm_ext_aa_45 = A,A => "ch2+","ch2-"	
process nmssm_ext_aa_46 = A,A => Hp,Hm		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating A,A => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_1)
printf "************************************************************************"
printf "* Integrating A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_2)
printf "************************************************************************"
printf "* Integrating A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_3)
printf "************************************************************************"
printf "* Integrating A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_4)
printf "************************************************************************"
printf "* Integrating A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_5)
printf "************************************************************************"
printf "* Integrating A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_6)
printf "************************************************************************"
printf "* Integrating A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_7)
printf "************************************************************************"
printf "* Integrating A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_8)
printf "************************************************************************"
printf "* Integrating A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_9)
printf "************************************************************************"
printf "* Integrating A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_10)
printf "************************************************************************"
printf "* Integrating A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_11)
printf "************************************************************************"
printf "* Integrating A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_12)
printf "************************************************************************"
printf "* Integrating A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_13)
printf "************************************************************************"
printf "* Integrating A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_14)
printf "************************************************************************"
printf "* Integrating A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_15)
printf "************************************************************************"
printf "* Integrating A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_16)
printf "************************************************************************"
printf "* Integrating A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_17)
printf "************************************************************************"
printf "* Integrating A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_18)
printf "************************************************************************"
printf "* Integrating A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_19)
printf "************************************************************************"
printf "* Integrating A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_20)
printf "************************************************************************"
printf "* Integrating A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_21)
printf "************************************************************************"
printf "* Integrating A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_22)
printf "************************************************************************"
printf "* Integrating A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_23)
printf "************************************************************************"
printf "* Integrating A,A => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_24)
printf "************************************************************************"
printf "* Integrating A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_25)
printf "************************************************************************"
printf "* Integrating A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_26)
printf "************************************************************************"
printf "* Integrating A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_27)
printf "************************************************************************"
printf "* Integrating A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_28)
printf "************************************************************************"
printf "* Integrating A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_29)
printf "************************************************************************"
printf "* Integrating A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_30)
printf "************************************************************************"
printf "* Integrating A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_31)
printf "************************************************************************"
printf "* Integrating A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_32)
printf "************************************************************************"
printf "* Integrating A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_33)
printf "************************************************************************"
printf "* Integrating A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_34)
printf "************************************************************************"
printf "* Integrating A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_35)
printf "************************************************************************"
printf "* Integrating A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_36)
printf "************************************************************************"
printf "* Integrating A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_37)
printf "************************************************************************"
printf "* Integrating A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_38)
printf "************************************************************************"
printf "* Integrating A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_39)
printf "************************************************************************"
printf "* Integrating A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_40)
printf "************************************************************************"
printf "* Integrating A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_41)
printf "************************************************************************"
printf "* Integrating A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_42)
printf "************************************************************************"
printf "* Integrating A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_43)
printf "************************************************************************"
printf "* Integrating A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_44)
printf "************************************************************************"
printf "* Integrating A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_45)
printf "************************************************************************"
printf "* Integrating A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,A
seed = 0
integrate (nmssm_ext_aa_46)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking A,A => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.45e-02) ** 2 + error(nmssm_ext_aa_1) ** 2)
printf "Expecting 9.4255447e+01"
show(integral(nmssm_ext_aa_1))
real pull = abs (integral (nmssm_ext_aa_1) - 9.4255447e+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_1) == 9.4255447e+01)
printf "************************************************************************"
printf "* Checking A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E+02) ** 2 + error(nmssm_ext_aa_2) ** 2)
printf "Expecting 9.3864054E+04"
show(integral(nmssm_ext_aa_2))
real pull = abs (integral (nmssm_ext_aa_2) - 9.3864054E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => Wp,Wm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_2) == 9.3864054E+04)
printf "************************************************************************"
printf "* Checking A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E-02) ** 2 + error(nmssm_ext_aa_3) ** 2)
printf "Expecting 1.5139082E+01"
show(integral(nmssm_ext_aa_3))
real pull = abs (integral (nmssm_ext_aa_3) - 1.5139082E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se1, SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_3) == 1.5139082E+01)
printf "************************************************************************"
printf "* Checking A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.29E-02) ** 2 + error(nmssm_ext_aa_4) ** 2)
printf "Expecting 1.5125771E+01"
show(integral(nmssm_ext_aa_4))
real pull = abs (integral (nmssm_ext_aa_4) - 1.5125771E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se2, SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_4) == 1.5125771E+01)
printf "************************************************************************"
printf "* Checking A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.27E-02) ** 2 + error(nmssm_ext_aa_5) ** 2)
printf "Expecting 1.5106579E+01"
show(integral(nmssm_ext_aa_5))
real pull = abs (integral (nmssm_ext_aa_5) - 1.5106579E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu1, SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_5) == 1.5106579E+01)
printf "************************************************************************"
printf "* Checking A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.27E-02) ** 2 + error(nmssm_ext_aa_6) ** 2)
printf "Expecting 1.5173115E+01"
show(integral(nmssm_ext_aa_6))
real pull = abs (integral (nmssm_ext_aa_6) - 1.5173115E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu2, SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_6) == 1.5173115E+01)
printf "************************************************************************"
printf "* Checking A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.36E-02) ** 2 + error(nmssm_ext_aa_7) ** 2)
printf "Expecting 1.5320611E+01"
show(integral(nmssm_ext_aa_7))
real pull = abs (integral (nmssm_ext_aa_7) - 1.5320611E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau1, STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_7) == 1.5320611E+01)
printf "************************************************************************"
printf "* Checking A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.18E-02) ** 2 + error(nmssm_ext_aa_8) ** 2)
printf "Expecting 1.5017961E+01"
show(integral(nmssm_ext_aa_8))
real pull = abs (integral (nmssm_ext_aa_8) - 1.5017961E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau2, STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_8) == 1.5017961E+01)
printf "************************************************************************"
printf "* Checking A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-03) ** 2 + error(nmssm_ext_aa_9) ** 2)
printf "Expecting 4.0170998E+00"
show(integral(nmssm_ext_aa_9))
real pull = abs (integral (nmssm_ext_aa_9) - 4.0170998E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_9) == 4.0170998E+00)
printf "************************************************************************"
printf "* Checking A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-03) ** 2 + error(nmssm_ext_aa_10) ** 2)
printf "Expecting 4.0164032E+00"
show(integral(nmssm_ext_aa_10))
real pull = abs (integral (nmssm_ext_aa_10) - 4.0164032E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_10) == 4.0164032E+00)
printf "************************************************************************"
printf "* Checking A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-03) ** 2 + error(nmssm_ext_aa_11) ** 2)
printf "Expecting 4.0171434E+00"
show(integral(nmssm_ext_aa_11))
real pull = abs (integral (nmssm_ext_aa_11) - 4.0171434E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_11) == 4.0171434E+00)
printf "************************************************************************"
printf "* Checking A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_aa_12) ** 2)
printf "Expecting 4.0175098E+00"
show(integral(nmssm_ext_aa_12))
real pull = abs (integral (nmssm_ext_aa_12) - 4.0175098E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_12) == 4.0175098E+00)
printf "************************************************************************"
printf "* Checking A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.54E-03) ** 2 + error(nmssm_ext_aa_13) ** 2)
printf "Expecting 4.7473881E+00"
show(integral(nmssm_ext_aa_13))
real pull = abs (integral (nmssm_ext_aa_13) - 4.7473881E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_13) == 4.7473881E+00)
printf "************************************************************************"
printf "* Checking A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.09E-03) ** 2 + error(nmssm_ext_aa_14) ** 2)
printf "Expecting 3.7282666E+00"
show(integral(nmssm_ext_aa_14))
real pull = abs (integral (nmssm_ext_aa_14) - 3.7282666E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_14) == 3.7282666E+00)
printf "************************************************************************"
printf "* Checking A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.54E-05) ** 2 + error(nmssm_ext_aa_15) ** 2)
printf "Expecting 2.5079842E-01"
show(integral(nmssm_ext_aa_15))
real pull = abs (integral (nmssm_ext_aa_15) - 2.5079842E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_15) == 2.5079842E-01)
printf "************************************************************************"
printf "* Checking A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.38E-05) ** 2 + error(nmssm_ext_aa_16) ** 2)
printf "Expecting 2.5103269E-01"
show(integral(nmssm_ext_aa_16))
real pull = abs (integral (nmssm_ext_aa_16) - 2.5103269E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_16) == 2.5103269E-01)
printf "************************************************************************"
printf "* Checking A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.64E-05) ** 2 + error(nmssm_ext_aa_17) ** 2)
printf "Expecting 2.5086139E-01"
show(integral(nmssm_ext_aa_17))
real pull = abs (integral (nmssm_ext_aa_17) - 2.5086139E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_17) == 2.5086139E-01)
printf "************************************************************************"
printf "* Checking A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.71E-05) ** 2 + error(nmssm_ext_aa_18) ** 2)
printf "Expecting 2.5069643E-01"
show(integral(nmssm_ext_aa_18))
real pull = abs (integral (nmssm_ext_aa_18) - 2.5069643E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_18) == 2.5069643E-01)
printf "************************************************************************"
printf "* Checking A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.49E-05) ** 2 + error(nmssm_ext_aa_19) ** 2)
printf "Expecting 2.5148809E-01"
show(integral(nmssm_ext_aa_19))
real pull = abs (integral (nmssm_ext_aa_19) - 2.5148809E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_19) == 2.5148809E-01)
printf "************************************************************************"
printf "* Checking A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.58E-05) ** 2 + error(nmssm_ext_aa_20) ** 2)
printf "Expecting 2.5036105E-01"
show(integral(nmssm_ext_aa_20))
real pull = abs (integral (nmssm_ext_aa_20) - 2.5036105E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_20) == 2.5036105E-01)
printf "************************************************************************"
printf "* Checking A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.62E-02) ** 2 + error(nmssm_ext_aa_21) ** 2)
printf "Expecting 1.7727630E+02"
show(integral(nmssm_ext_aa_21))
real pull = abs (integral (nmssm_ext_aa_21) - 1.7727630E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_21) == 1.7727630E+02)
printf "************************************************************************"
printf "* Checking A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.37E-02) ** 2 + error(nmssm_ext_aa_22) ** 2)
printf "Expecting 8.9185999E+01"
show(integral(nmssm_ext_aa_22))
real pull = abs (integral (nmssm_ext_aa_22) - 8.9185999E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_22) == 8.9185999E+01)
printf "************************************************************************"
printf "* Checking A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-03) ** 2 + error(nmssm_ext_aa_23) ** 2)
printf "Expecting 5.9536447E+00"
show(integral(nmssm_ext_aa_23))
real pull = abs (integral (nmssm_ext_aa_23) - 5.9536447E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => Hp,Hm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_23) == 5.9536447E+00)
printf "************************************************************************"
printf "* Checking A,A => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.28E-03) ** 2 + error(nmssm_ext_aa_24) ** 2)
printf "Expecting 4.0928233E+01"
show(integral(nmssm_ext_aa_24))
real pull = abs (integral (nmssm_ext_aa_24) - 4.0928233E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_24) == 4.0928233E+01)
printf "************************************************************************"
printf "* Checking A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.28E+01) ** 2 + error(nmssm_ext_aa_25) ** 2)
printf "Expecting 9.3923228E+04"
show(integral(nmssm_ext_aa_25))
real pull = abs (integral (nmssm_ext_aa_25) - 9.3923228E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => Wp,Wm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_25) == 9.3923228E+04)
printf "************************************************************************"
printf "* Checking A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.46E-03) ** 2 + error(nmssm_ext_aa_26) ** 2)
printf "Expecting 5.7483575E+00"
show(integral(nmssm_ext_aa_26))
real pull = abs (integral (nmssm_ext_aa_26) - 5.7483575E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_26) == 5.7483575E+00)
printf "************************************************************************"
printf "* Checking A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.45E-03) ** 2 + error(nmssm_ext_aa_27) ** 2)
printf "Expecting 5.7456901E+00"
show(integral(nmssm_ext_aa_27))
real pull = abs (integral (nmssm_ext_aa_27) - 5.7456901E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_27) == 5.7456901E+00)
printf "************************************************************************"
printf "* Checking A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.46E-03) ** 2 + error(nmssm_ext_aa_28) ** 2)
printf "Expecting 5.7473263E+00"
show(integral(nmssm_ext_aa_28))
real pull = abs (integral (nmssm_ext_aa_28) - 5.7473263E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_28) == 5.7473263E+00)
printf "************************************************************************"
printf "* Checking A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-03) ** 2 + error(nmssm_ext_aa_29) ** 2)
printf "Expecting 5.7569416E+00"
show(integral(nmssm_ext_aa_29))
real pull = abs (integral (nmssm_ext_aa_29) - 5.7569416E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_29) == 5.7569416E+00)
printf "************************************************************************"
printf "* Checking A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.54E-03) ** 2 + error(nmssm_ext_aa_30) ** 2)
printf "Expecting 5.7793061E+00"
show(integral(nmssm_ext_aa_30))
real pull = abs (integral (nmssm_ext_aa_30) - 5.7793061E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_30) == 5.7793061E+00)
printf "************************************************************************"
printf "* Checking A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.40E-03) ** 2 + error(nmssm_ext_aa_31) ** 2)
printf "Expecting 5.7190065E+00"
show(integral(nmssm_ext_aa_31))
real pull = abs (integral (nmssm_ext_aa_31) - 5.7190065E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_31) == 5.7190065E+00)
printf "************************************************************************"
printf "* Checking A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.77E-04) ** 2 + error(nmssm_ext_aa_32) ** 2)
printf "Expecting 2.1092243E+00"
show(integral(nmssm_ext_aa_32))
real pull = abs (integral (nmssm_ext_aa_32) - 2.1092243E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_32) == 2.1092243E+00)
printf "************************************************************************"
printf "* Checking A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.58E-04) ** 2 + error(nmssm_ext_aa_33) ** 2)
printf "Expecting 2.1103144E+00"
show(integral(nmssm_ext_aa_33))
real pull = abs (integral (nmssm_ext_aa_33) - 2.1103144E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_33) == 2.1103144E+00)
printf "************************************************************************"
printf "* Checking A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.56E-04) ** 2 + error(nmssm_ext_aa_34) ** 2)
printf "Expecting 2.1100129E+00"
show(integral(nmssm_ext_aa_34))
real pull = abs (integral (nmssm_ext_aa_34) - 2.1100129E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_34) == 2.1100129E+00)
printf "************************************************************************"
printf "* Checking A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.77E-04) ** 2 + error(nmssm_ext_aa_35) ** 2)
printf "Expecting 2.1119405E+00"
show(integral(nmssm_ext_aa_35))
real pull = abs (integral (nmssm_ext_aa_35) - 2.1119405E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_35) == 2.1119405E+00)
printf "************************************************************************"
printf "* Checking A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E-03) ** 2 + error(nmssm_ext_aa_36) ** 2)
printf "Expecting 2.4641905E+00"
show(integral(nmssm_ext_aa_36))
real pull = abs (integral (nmssm_ext_aa_36) - 2.4641905E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_36) == 2.4641905E+00)
printf "************************************************************************"
printf "* Checking A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.52E-04) ** 2 + error(nmssm_ext_aa_37) ** 2)
printf "Expecting 1.8382527E+00"
show(integral(nmssm_ext_aa_37))
real pull = abs (integral (nmssm_ext_aa_37) - 1.8382527E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_37) == 1.8382527E+00)
printf "************************************************************************"
printf "* Checking A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.04E-05) ** 2 + error(nmssm_ext_aa_38) ** 2)
printf "Expecting 1.3168148E-01"
show(integral(nmssm_ext_aa_38))
real pull = abs (integral (nmssm_ext_aa_38) - 1.3168148E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_38) == 1.3168148E-01)
printf "************************************************************************"
printf "* Checking A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.09E-05) ** 2 + error(nmssm_ext_aa_39) ** 2)
printf "Expecting 1.3177093E-01"
show(integral(nmssm_ext_aa_39))
real pull = abs (integral (nmssm_ext_aa_39) - 1.3177093E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_39) == 1.3177093E-01)
printf "************************************************************************"
printf "* Checking A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.03E-05) ** 2 + error(nmssm_ext_aa_40) ** 2)
printf "Expecting 1.3169584E-01"
show(integral(nmssm_ext_aa_40))
real pull = abs (integral (nmssm_ext_aa_40) - 1.3169584E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_40) == 1.3169584E-01)
printf "************************************************************************"
printf "* Checking A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.05E-05) ** 2 + error(nmssm_ext_aa_41) ** 2)
printf "Expecting 1.3172183E-01"
show(integral(nmssm_ext_aa_41))
real pull = abs (integral (nmssm_ext_aa_41) - 1.3172183E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_41) == 1.3172183E-01)
printf "************************************************************************"
printf "* Checking A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.99E-05) ** 2 + error(nmssm_ext_aa_42) ** 2)
printf "Expecting 1.3224558E-01"
show(integral(nmssm_ext_aa_42))
real pull = abs (integral (nmssm_ext_aa_42) - 1.3224558E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_42) == 1.3224558E-01)
printf "************************************************************************"
printf "* Checking A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.01E-05) ** 2 + error(nmssm_ext_aa_43) ** 2)
printf "Expecting 1.3135316E-01"
show(integral(nmssm_ext_aa_43))
real pull = abs (integral (nmssm_ext_aa_43) - 1.3135316E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_43) == 1.3135316E-01)
printf "************************************************************************"
printf "* Checking A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.18E-02) ** 2 + error(nmssm_ext_aa_44) ** 2)
printf "Expecting 7.5745777E+01"
show(integral(nmssm_ext_aa_44))
real pull = abs (integral (nmssm_ext_aa_44) - 7.5745777E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_44) == 7.5745777E+01)
printf "************************************************************************"
printf "* Checking A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.33E-03) ** 2 + error(nmssm_ext_aa_45) ** 2)
printf "Expecting 4.2769180E+01"
show(integral(nmssm_ext_aa_45))
real pull = abs (integral (nmssm_ext_aa_45) - 4.2769180E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_45) == 4.2769180E+01)
printf "************************************************************************"
printf "* Checking A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.48E-04) ** 2 + error(nmssm_ext_aa_46) ** 2)
printf "Expecting 2.9244027E+00"
show(integral(nmssm_ext_aa_46))
real pull = abs (integral (nmssm_ext_aa_46) - 2.9244027E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => Hp,Hm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_aa_46) == 2.9244027E+00)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
