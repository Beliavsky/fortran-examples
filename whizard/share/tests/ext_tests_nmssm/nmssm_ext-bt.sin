

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-bt.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! ------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                  -----
! ------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! ------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
!show(real)
?fatal_beam_decay = false
! ------------------------------------------------------------------------
iterations = 3:50000
! ------------------------------------------------------------------------































! ------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_bt_1 = b,T => se1,SN11	
process nmssm_ext_bt_2 = b,T => smu1,SN21	
process nmssm_ext_bt_3 = b,T => stau1,SN31	
process nmssm_ext_bt_4 = b,T => stau2,SN31	
process nmssm_ext_bt_5 = b,T => sd1,su1c	
process nmssm_ext_bt_6 = b,T => ss1,sc1c	
process nmssm_ext_bt_7 = b,T => sb1,st1c	
process nmssm_ext_bt_8 = b,T => sb2,st2c	
process nmssm_ext_bt_9 = b,T => sb1,st2c	
process nmssm_ext_bt_10 = b,T => sb2,st1c	
process nmssm_ext_bt_11 = b,T => "ch1-",neu1	
process nmssm_ext_bt_12 = b,T => "ch1-",neu2	
process nmssm_ext_bt_13 = b,T => "ch1-",neu3	
process nmssm_ext_bt_14 = b,T => "ch1-",neu4	
process nmssm_ext_bt_15 = b,T => "ch1-",neu5	
process nmssm_ext_bt_16 = b,T => "ch2-",neu1	
process nmssm_ext_bt_17 = b,T => "ch2-",neu2	
process nmssm_ext_bt_18 = b,T => "ch2-",neu3	
process nmssm_ext_bt_19 = b,T => "ch2-",neu4	
process nmssm_ext_bt_20 = b,T => "ch2-",neu5	
process nmssm_ext_bt_21 = b,T => Hm,h01		
process nmssm_ext_bt_22 = b,T => Hm,h02		
process nmssm_ext_bt_23 = b,T => Hm,h03		
process nmssm_ext_bt_24 = b,T => Hm,A01		
process nmssm_ext_bt_25 = b,T => Hm,A02		
process nmssm_ext_bt_26 = b,T => Wm,h01		
process nmssm_ext_bt_27 = b,T => Wm,h02		
process nmssm_ext_bt_28 = b,T => Wm,h03		
process nmssm_ext_bt_29 = b,T => Wm,A01		
process nmssm_ext_bt_30 = b,T => Wm,A02		
process nmssm_ext_bt_31 = b,T => Hm,Z		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_1)
printf "************************************************************************"
printf "* Integrating b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_2)
printf "************************************************************************"
printf "* Integrating b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_3)
printf "************************************************************************"
printf "* Integrating b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_4)
printf "************************************************************************"
printf "* Integrating b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_5)
printf "************************************************************************"
printf "* Integrating b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_6)
printf "************************************************************************"
printf "* Integrating b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_7)
printf "************************************************************************"
printf "* Integrating b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_8)
printf "************************************************************************"
printf "* Integrating b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_9)
printf "************************************************************************"
printf "* Integrating b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_10)
printf "************************************************************************"
printf "* Integrating b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_11)
printf "************************************************************************"
printf "* Integrating b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_12)
printf "************************************************************************"
printf "* Integrating b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_13)
printf "************************************************************************"
printf "* Integrating b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_14)
printf "************************************************************************"
printf "* Integrating b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_15)
printf "************************************************************************"
printf "* Integrating b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_16)
printf "************************************************************************"
printf "* Integrating b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_17)
printf "************************************************************************"
printf "* Integrating b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_18)
printf "************************************************************************"
printf "* Integrating b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_19)
printf "************************************************************************"
printf "* Integrating b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_20)
printf "************************************************************************"
printf "* Integrating b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_21)
printf "************************************************************************"
printf "* Integrating b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_22)
printf "************************************************************************"
printf "* Integrating b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_23)
printf "************************************************************************"
printf "* Integrating b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_24)
printf "************************************************************************"
printf "* Integrating b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_25)
printf "************************************************************************"
printf "* Integrating b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_26)
printf "************************************************************************"
printf "* Integrating b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_27)
printf "************************************************************************"
printf "* Integrating b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_28)
printf "************************************************************************"
printf "* Integrating b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_29)
printf "************************************************************************"
printf "* Integrating b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_30)
printf "************************************************************************"
printf "* Integrating b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,T
seed = 0
integrate (nmssm_ext_bt_31)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.74E-03) ** 2 + error(nmssm_ext_bt_1) ** 2)
printf "Expecting 2.0727263E+00"
show(integral(nmssm_ext_bt_1))
real pull = abs (integral (nmssm_ext_bt_1) - 2.0727263E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => se1,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_1) == 2.0727263E+00)
printf "************************************************************************"
printf "* Checking b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.74E-03) ** 2 + error(nmssm_ext_bt_2) ** 2)
printf "Expecting 2.0730556E+00"
show(integral(nmssm_ext_bt_2))
real pull = abs (integral (nmssm_ext_bt_2) - 2.0730556E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => smu1,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_2) == 2.0730556E+00)
printf "************************************************************************"
printf "* Checking b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.48E-04) ** 2 + error(nmssm_ext_bt_3) ** 2)
printf "Expecting 1.0240231E+00"
show(integral(nmssm_ext_bt_3))
real pull = abs (integral (nmssm_ext_bt_3) - 1.0240231E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => stau1,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_3) == 1.0240231E+00)
printf "************************************************************************"
printf "* Checking b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.81E-04) ** 2 + error(nmssm_ext_bt_4) ** 2)
printf "Expecting 1.0536333E+00"
show(integral(nmssm_ext_bt_4))
real pull = abs (integral (nmssm_ext_bt_4) - 1.0536333E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => stau2,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_4) == 1.0536333E+00)
printf "************************************************************************"
printf "* Checking b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.14E-03) ** 2 + error(nmssm_ext_bt_5) ** 2)
printf "Expecting 2.5559031E+00"
show(integral(nmssm_ext_bt_5))
real pull = abs (integral (nmssm_ext_bt_5) - 2.5559031E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => sd1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_5) == 2.5559031E+00)
printf "************************************************************************"
printf "* Checking b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.11E-03) ** 2 + error(nmssm_ext_bt_6) ** 2)
printf "Expecting 2.5594234E+00"
show(integral(nmssm_ext_bt_6))
real pull = abs (integral (nmssm_ext_bt_6) - 2.5594234E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ss1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_6) == 2.5594234E+00)
printf "************************************************************************"
printf "* Checking b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.54E-01) ** 2 + error(nmssm_ext_bt_7) ** 2)
printf "Expecting 3.0220812E+02"
show(integral(nmssm_ext_bt_7))
real pull = abs (integral (nmssm_ext_bt_7) - 3.0220812E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => sb1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_7) == 3.0220812E+02)
printf "************************************************************************"
printf "* Checking b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.59E-01) ** 2 + error(nmssm_ext_bt_8) ** 2)
printf "Expecting 2.0255609E+02"
show(integral(nmssm_ext_bt_8))
real pull = abs (integral (nmssm_ext_bt_8) - 2.0255609E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => sb2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_8) == 2.0255609E+02)
printf "************************************************************************"
printf "* Checking b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.68E-01) ** 2 + error(nmssm_ext_bt_9) ** 2)
printf "Expecting 2.1366914E+02"
show(integral(nmssm_ext_bt_9))
real pull = abs (integral (nmssm_ext_bt_9) - 2.1366914E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => sb1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_9) == 2.1366914E+02)
printf "************************************************************************"
printf "* Checking b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-01) ** 2 + error(nmssm_ext_bt_10) ** 2)
printf "Expecting 2.9504922E+02"
show(integral(nmssm_ext_bt_10))
real pull = abs (integral (nmssm_ext_bt_10) - 2.9504922E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => sb2,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_10) == 2.9504922E+02)
printf "************************************************************************"
printf "* Checking b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-04) ** 2 + error(nmssm_ext_bt_11) ** 2)
printf "Expecting 2.8882343E-01"
show(integral(nmssm_ext_bt_11))
real pull = abs (integral (nmssm_ext_bt_11) - 2.8882343E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch1-,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_11) == 2.8882343E-01)
printf "************************************************************************"
printf "* Checking b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.48E-04) ** 2 + error(nmssm_ext_bt_12) ** 2)
printf "Expecting 2.4993128E+00"
show(integral(nmssm_ext_bt_12))
real pull = abs (integral (nmssm_ext_bt_12) - 2.4993128E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch1-,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_12) == 2.4993128E+00)
printf "************************************************************************"
printf "* Checking b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.70E-03) ** 2 + error(nmssm_ext_bt_13) ** 2)
printf "Expecting 2.9919995E+00"
show(integral(nmssm_ext_bt_13))
real pull = abs (integral (nmssm_ext_bt_13) - 2.9919995E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch1-,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_13) == 2.9919995E+00)
printf "************************************************************************"
printf "* Checking b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.62E-03) ** 2 + error(nmssm_ext_bt_14) ** 2)
printf "Expecting 3.8485118E+00"
show(integral(nmssm_ext_bt_14))
real pull = abs (integral (nmssm_ext_bt_14) - 3.8485118E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch1-,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_14) == 3.8485118E+00)
printf "************************************************************************"
printf "* Checking b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.81E-03) ** 2 + error(nmssm_ext_bt_15) ** 2)
printf "Expecting 2.9211304E+00"
show(integral(nmssm_ext_bt_15))
real pull = abs (integral (nmssm_ext_bt_15) - 2.9211304E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch1-,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_15) == 2.9211304E+00)
printf "************************************************************************"
printf "* Checking b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.54E-04) ** 2 + error(nmssm_ext_bt_16) ** 2)
printf "Expecting 2.8173847E+00"
show(integral(nmssm_ext_bt_16))
real pull = abs (integral (nmssm_ext_bt_16) - 2.8173847E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch2-,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_16) == 2.8173847E+00)
printf "************************************************************************"
printf "* Checking b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.69E-02) ** 2 + error(nmssm_ext_bt_17) ** 2)
printf "Expecting 3.8842796E+01"
show(integral(nmssm_ext_bt_17))
real pull = abs (integral (nmssm_ext_bt_17) - 3.8842796E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch2-,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_17) == 3.8842796E+01)
printf "************************************************************************"
printf "* Checking b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.31E-03) ** 2 + error(nmssm_ext_bt_18) ** 2)
printf "Expecting 5.0155712E+00"
show(integral(nmssm_ext_bt_18))
real pull = abs (integral (nmssm_ext_bt_18) - 5.0155712E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch2-,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_18) == 5.0155712E+00)
printf "************************************************************************"
printf "* Checking b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E-02) ** 2 + error(nmssm_ext_bt_19) ** 2)
printf "Expecting 1.8425725E+01"
show(integral(nmssm_ext_bt_19))
real pull = abs (integral (nmssm_ext_bt_19) - 1.8425725E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch2-,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_19) == 1.8425725E+01)
printf "************************************************************************"
printf "* Checking b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.56E-02) ** 2 + error(nmssm_ext_bt_20) ** 2)
printf "Expecting 2.0593468E+01"
show(integral(nmssm_ext_bt_20))
real pull = abs (integral (nmssm_ext_bt_20) - 2.0593468E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => ch2-,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_20) == 2.0593468E+01)
printf "************************************************************************"
printf "* Checking b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.71E-02) ** 2 + error(nmssm_ext_bt_21) ** 2)
printf "Expecting 3.5677510E+01"
show(integral(nmssm_ext_bt_21))
real pull = abs (integral (nmssm_ext_bt_21) - 3.5677510E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,h01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_21) == 3.5677510E+01)
printf "************************************************************************"
printf "* Checking b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.83E-03) ** 2 + error(nmssm_ext_bt_22) ** 2)
printf "Expecting 8.9384651E+00"
show(integral(nmssm_ext_bt_22))
real pull = abs (integral (nmssm_ext_bt_22) - 8.9384651E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,h02		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_22) == 8.9384651E+00)
printf "************************************************************************"
printf "* Checking b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.82E-04) ** 2 + error(nmssm_ext_bt_23) ** 2)
printf "Expecting 4.6962074E-01"
show(integral(nmssm_ext_bt_23))
real pull = abs (integral (nmssm_ext_bt_23) - 4.6962074E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,h03		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_23) == 4.6962074E-01)
printf "************************************************************************"
printf "* Checking b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.70E-03) ** 2 + error(nmssm_ext_bt_24) ** 2)
printf "Expecting 2.0539684E+00"
show(integral(nmssm_ext_bt_24))
real pull = abs (integral (nmssm_ext_bt_24) - 2.0539684E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,A01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_bt_24) == 2.0539684E+00)
printf "************************************************************************"
printf "* Checking b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.77E-04) ** 2 + error(nmssm_ext_bt_25) ** 2)
printf "Expecting 3.8865176E-01"
show(integral(nmssm_ext_bt_25))
real pull = abs (integral (nmssm_ext_bt_25) - 3.8865176E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,A02		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_25) == 3.8865176E-01)
printf "************************************************************************"
printf "* Checking b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.38E-01) ** 2 + error(nmssm_ext_bt_26) ** 2)
printf "Expecting 2.1084693E+02"
show(integral(nmssm_ext_bt_26))
real pull = abs (integral (nmssm_ext_bt_26) - 2.1084693E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Wm,h01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_26) == 2.1084693E+02)
printf "************************************************************************"
printf "* Checking b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.39E-03) ** 2 + error(nmssm_ext_bt_27) ** 2)
printf "Expecting 7.4807976E+00"
show(integral(nmssm_ext_bt_27))
real pull = abs (integral (nmssm_ext_bt_27) - 7.4807976E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Wm,h02		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_27) == 7.4807976E+00)
printf "************************************************************************"
printf "* Checking b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.28E+01) ** 2 + error(nmssm_ext_bt_28) ** 2)
printf "Expecting 1.6053746E+02"
show(integral(nmssm_ext_bt_28))
real pull = abs (integral (nmssm_ext_bt_28) - 1.6053746E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Wm,h03		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_28) == 1.6053746E+02)
printf "************************************************************************"
printf "* Checking b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.05E-03) ** 2 + error(nmssm_ext_bt_29) ** 2)
printf "Expecting 1.5279928E+00"
show(integral(nmssm_ext_bt_29))
real pull = abs (integral (nmssm_ext_bt_29) - 1.5279928E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Wm,A01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_29) == 1.5279928E+00)
printf "************************************************************************"
printf "* Checking b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.93E+01) ** 2 + error(nmssm_ext_bt_30) ** 2)
printf "Expecting 1.7114660E+02"
show(integral(nmssm_ext_bt_30))
real pull = abs (integral (nmssm_ext_bt_30) - 1.7114660E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Wm,A02		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bt_30) == 1.7114660E+02)
printf "************************************************************************"
printf "* Checking b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.46E-02) ** 2 + error(nmssm_ext_bt_31) ** 2)
printf "Expecting 6.9312808E+01"
show(integral(nmssm_ext_bt_31))
real pull = abs (integral (nmssm_ext_bt_31) - 6.9312808E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,T => Hm,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_bt_31) == 6.9312808E+01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
