include ("nlo_settings.sin")

alpha_power = 2
alphas_power = 1

alias jet = u:U:d:D:s:S:c:C:gl
alias bjet = b:B:gl

# cuts = all abs(Pt) > 30 GeV [jet] and all abs(Eta) < 4 [jet]
#        and count [cluster if E > 0 GeV [jet]] >= 1
#        and all abs(Pt) > 30 GeV [bjet] and all abs(Eta) < 4 [bjet]
#        and count [cluster if E > 0 GeV [bjet]] >= 2

mb = 4.75

cuts = let subevt @clustered_jets = cluster [jet] in
       let subevt @pt_selected = select if Pt > 30 GeV [@clustered_jets] in
       let subevt @eta_selected = select if abs(Eta) < 4 [@pt_selected] in
       count [@eta_selected] >= 1
       and
       let subevt @clustered_bjets = cluster [bjet] in
       let subevt @pt_selected_b = select if Pt > 30 GeV [@clustered_bjets] in
       let subevt @eta_selected_b = select if abs(Eta) < 4 [@pt_selected_b] in
       count [@eta_selected_b] >= 2

scale = eval Ht/2 [b:B:jet]

#?combined_nlo_integration = true
process nlo_eebbj_p1 = e1, E1 => b, B, jet { nlo_calculation = full }
integrate (nlo_eebbj_p1) { iterations = 1:100:"gw" }
