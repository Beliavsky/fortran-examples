

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-za.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! --------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                    -----
! --------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! --------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! --------------------------------------------------------------------------
iterations = 3:200000
! --------------------------------------------------------------------------





























! --------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_za_1 = Z,A => se1,SE1        
process mssm_ext_za_2 = Z,A => se2,SE2        
process mssm_ext_za_3 = Z,A => smu1,SMU1      
process mssm_ext_za_4 = Z,A => smu2,SMU2      
process mssm_ext_za_5 = Z,A => stau1,STAU1    
process mssm_ext_za_6 = Z,A => stau2,STAU2    
process mssm_ext_za_7 = Z,A => stau1,STAU2    
process mssm_ext_za_8 = Z,A => se1,SE1        
process mssm_ext_za_9 = Z,A => se2,SE2        
process mssm_ext_za_10 = Z,A => smu1,SMU1      
process mssm_ext_za_11 = Z,A => smu2,SMU2      
process mssm_ext_za_12 = Z,A => stau1,STAU1    
process mssm_ext_za_13 = Z,A => stau2,STAU2    
process mssm_ext_za_14 = Z,A => stau1,STAU2    
process mssm_ext_za_15 = Z,A => su1,su1c       
process mssm_ext_za_16 = Z,A => su2,su2c       
process mssm_ext_za_17 = Z,A => sc1,sc1c       
process mssm_ext_za_18 = Z,A => sc2,sc2c       
process mssm_ext_za_19 = Z,A => st1,st1c       
process mssm_ext_za_20 = Z,A => st2,st2c       
process mssm_ext_za_21 = Z,A => st1,st2c       
process mssm_ext_za_22 = Z,A => sd1,sd1c       
process mssm_ext_za_23 = Z,A => sd2,sd2c       
process mssm_ext_za_24 = Z,A => ss1,ss1c       
process mssm_ext_za_25 = Z,A => ss2,ss2c       
process mssm_ext_za_26 = Z,A => sb1,sb1c       
process mssm_ext_za_27 = Z,A => sb2,sb2c       
process mssm_ext_za_28 = Z,A => sb1,sb2c       
process mssm_ext_za_29 = Z,A => Hp,Hm          
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_1)
printf "************************************************************************"
printf "* Integrating Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_2)
printf "************************************************************************"
printf "* Integrating Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_3)
printf "************************************************************************"
printf "* Integrating Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_4)
printf "************************************************************************"
printf "* Integrating Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_5)
printf "************************************************************************"
printf "* Integrating Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_6)
printf "************************************************************************"
printf "* Integrating Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_7)
printf "************************************************************************"
printf "* Integrating Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_8)
printf "************************************************************************"
printf "* Integrating Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_9)
printf "************************************************************************"
printf "* Integrating Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_10)
printf "************************************************************************"
printf "* Integrating Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_11)
printf "************************************************************************"
printf "* Integrating Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_12)
printf "************************************************************************"
printf "* Integrating Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_13)
printf "************************************************************************"
printf "* Integrating Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_14)
printf "************************************************************************"
printf "* Integrating Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_15)
printf "************************************************************************"
printf "* Integrating Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_16)
printf "************************************************************************"
printf "* Integrating Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_17)
printf "************************************************************************"
printf "* Integrating Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_18)
printf "************************************************************************"
printf "* Integrating Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_19)
printf "************************************************************************"
printf "* Integrating Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_20)
printf "************************************************************************"
printf "* Integrating Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_21)
printf "************************************************************************"
printf "* Integrating Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_22)
printf "************************************************************************"
printf "* Integrating Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_23)
printf "************************************************************************"
printf "* Integrating Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_24)
printf "************************************************************************"
printf "* Integrating Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_25)
printf "************************************************************************"
printf "* Integrating Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_26)
printf "************************************************************************"
printf "* Integrating Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_27)
printf "************************************************************************"
printf "* Integrating Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_28)
printf "************************************************************************"
printf "* Integrating Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,A
seed = 0
integrate (mssm_ext_za_29)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_za_1) ** 2)
printf "Expecting 64.0633     "
show(integral(mssm_ext_za_1))
real pull = abs (integral (mssm_ext_za_1) - 64.0633     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => se1,SE1         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_1) == 64.0633     )
printf "************************************************************************"
printf "* Checking Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_za_2) ** 2)
printf "Expecting 50.7284     "
show(integral(mssm_ext_za_2))
real pull = abs (integral (mssm_ext_za_2) - 50.7284     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => se2,SE2         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_2) == 50.7284     )
printf "************************************************************************"
printf "* Checking Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_za_3) ** 2)
printf "Expecting 64.0628     "
show(integral(mssm_ext_za_3))
real pull = abs (integral (mssm_ext_za_3) - 64.0628     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_3) == 64.0628     )
printf "************************************************************************"
printf "* Checking Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_za_4) ** 2)
printf "Expecting 50.7284     "
show(integral(mssm_ext_za_4))
real pull = abs (integral (mssm_ext_za_4) - 50.7284     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_4) == 50.7284     )
printf "************************************************************************"
printf "* Checking Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006    ) ** 2 + error(mssm_ext_za_5) ** 2)
printf "Expecting 36.4567     "
show(integral(mssm_ext_za_5))
real pull = abs (integral (mssm_ext_za_5) - 36.4567     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_5) == 36.4567     )
printf "************************************************************************"
printf "* Checking Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_za_6) ** 2)
printf "Expecting 46.6053     "
show(integral(mssm_ext_za_6))
real pull = abs (integral (mssm_ext_za_6) - 46.6053     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_6) == 46.6053     )
printf "************************************************************************"
printf "* Checking Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_za_7) ** 2)
printf "Expecting 24.0446     "
show(integral(mssm_ext_za_7))
real pull = abs (integral (mssm_ext_za_7) - 24.0446     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau1,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_7) == 24.0446     )
printf "************************************************************************"
printf "* Checking Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_za_8) ** 2)
printf "Expecting 8.7333     "
show(integral(mssm_ext_za_8))
real pull = abs (integral (mssm_ext_za_8) - 8.7333     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => se1,SE1         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_8) == 8.7333     )
printf "************************************************************************"
printf "* Checking Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_za_9) ** 2)
printf "Expecting 6.0451     "
show(integral(mssm_ext_za_9))
real pull = abs (integral (mssm_ext_za_9) - 6.0451     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => se2,SE2         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_9) == 6.0451     )
printf "************************************************************************"
printf "* Checking Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_za_10) ** 2)
printf "Expecting 8.7327     "
show(integral(mssm_ext_za_10))
real pull = abs (integral (mssm_ext_za_10) - 8.7327     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_10) == 8.7327     )
printf "************************************************************************"
printf "* Checking Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_za_11) ** 2)
printf "Expecting 6.0455     "
show(integral(mssm_ext_za_11))
real pull = abs (integral (mssm_ext_za_11) - 6.0455     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_11) == 6.0455     )
printf "************************************************************************"
printf "* Checking Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_za_12) ** 2)
printf "Expecting 4.1336     "
show(integral(mssm_ext_za_12))
real pull = abs (integral (mssm_ext_za_12) - 4.1336     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_12) == 4.1336     )
printf "************************************************************************"
printf "* Checking Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_za_13) ** 2)
printf "Expecting 6.3907     "
show(integral(mssm_ext_za_13))
real pull = abs (integral (mssm_ext_za_13) - 6.3907     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_13) == 6.3907     )
printf "************************************************************************"
printf "* Checking Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_za_14) ** 2)
printf "Expecting 2.3102     "
show(integral(mssm_ext_za_14))
real pull = abs (integral (mssm_ext_za_14) - 2.3102     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => stau1,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_14) == 2.3102     )
printf "************************************************************************"
printf "* Checking Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_za_15) ** 2)
printf "Expecting 10.1949     "
show(integral(mssm_ext_za_15))
real pull = abs (integral (mssm_ext_za_15) - 10.1949     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_15) == 10.1949     )
printf "************************************************************************"
printf "* Checking Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_za_16) ** 2)
printf "Expecting 1.86042    "
show(integral(mssm_ext_za_16))
real pull = abs (integral (mssm_ext_za_16) - 1.86042    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_16) == 1.86042    )
printf "************************************************************************"
printf "* Checking Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_za_17) ** 2)
printf "Expecting 10.1949     "
show(integral(mssm_ext_za_17))
real pull = abs (integral (mssm_ext_za_17) - 10.1949     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_17) == 10.1949     )
printf "************************************************************************"
printf "* Checking Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_za_18) ** 2)
printf "Expecting 1.86039    "
show(integral(mssm_ext_za_18))
real pull = abs (integral (mssm_ext_za_18) - 1.86039    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_18) == 1.86039    )
printf "************************************************************************"
printf "* Checking Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00000003) ** 2 + error(mssm_ext_za_19) ** 2)
printf "Expecting 0.00126510 "
show(integral(mssm_ext_za_19))
real pull = abs (integral (mssm_ext_za_19) - 0.00126510 ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_19) == 0.00126510 )
printf "************************************************************************"
printf "* Checking Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005   ) ** 2 + error(mssm_ext_za_20) ** 2)
printf "Expecting 3.44660    "
show(integral(mssm_ext_za_20))
real pull = abs (integral (mssm_ext_za_20) - 3.44660    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_20) == 3.44660    )
printf "************************************************************************"
printf "* Checking Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_za_21) ** 2)
printf "Expecting 19.0982     "
show(integral(mssm_ext_za_21))
real pull = abs (integral (mssm_ext_za_21) - 19.0982     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => st1,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_21) == 19.0982     )
printf "************************************************************************"
printf "* Checking Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005   ) ** 2 + error(mssm_ext_za_22) ** 2)
printf "Expecting 3.70757    "
show(integral(mssm_ext_za_22))
real pull = abs (integral (mssm_ext_za_22) - 3.70757    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_22) == 3.70757    )
printf "************************************************************************"
printf "* Checking Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000002  ) ** 2 + error(mssm_ext_za_23) ** 2)
printf "Expecting 0.116438   "
show(integral(mssm_ext_za_23))
real pull = abs (integral (mssm_ext_za_23) - 0.116438   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_23) == 0.116438   )
printf "************************************************************************"
printf "* Checking Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00006   ) ** 2 + error(mssm_ext_za_24) ** 2)
printf "Expecting 3.70774    "
show(integral(mssm_ext_za_24))
real pull = abs (integral (mssm_ext_za_24) - 3.70774    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_24) == 3.70774    )
printf "************************************************************************"
printf "* Checking Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000002  ) ** 2 + error(mssm_ext_za_25) ** 2)
printf "Expecting 0.116435   "
show(integral(mssm_ext_za_25))
real pull = abs (integral (mssm_ext_za_25) - 0.116435   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_25) == 0.116435   )
printf "************************************************************************"
printf "* Checking Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00006   ) ** 2 + error(mssm_ext_za_26) ** 2)
printf "Expecting 3.12782    "
show(integral(mssm_ext_za_26))
real pull = abs (integral (mssm_ext_za_26) - 3.12782    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_26) == 3.12782    )
printf "************************************************************************"
printf "* Checking Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000002 ) ** 2 + error(mssm_ext_za_27) ** 2)
printf "Expecting 0.0114501  "
show(integral(mssm_ext_za_27))
real pull = abs (integral (mssm_ext_za_27) - 0.0114501  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_27) == 0.0114501  )
printf "************************************************************************"
printf "* Checking Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000009  ) ** 2 + error(mssm_ext_za_28) ** 2)
printf "Expecting 0.533885   "
show(integral(mssm_ext_za_28))
real pull = abs (integral (mssm_ext_za_28) - 0.533885   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => sb1,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_za_28) == 0.533885   )
printf "************************************************************************"
printf "* Checking Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005   ) ** 2 + error(mssm_ext_za_29) ** 2)
printf "Expecting 6.1849     "
show(integral(mssm_ext_za_29))
real pull = abs (integral (mssm_ext_za_29) - 6.1849     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_za_29) == 6.1849     )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
