

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-ug.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -----------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                 -----
! -----------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! -----------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! -----------------------------------------------------------------------
iterations = 3:200000
! -----------------------------------------------------------------------


! -----------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_ug_1 = u,g => su1,sgl      
process mssm_ext_ug_2 = u,g => su2,sgl      
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,g
seed = 0
integrate (mssm_ext_ug_1)
printf "************************************************************************"
printf "* Integrating u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,g
seed = 0
integrate (mssm_ext_ug_2)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.2           ) ** 2 + error(mssm_ext_ug_1) ** 2)
printf "Expecting 3405.2     "
show(integral(mssm_ext_ug_1))
real pull = abs (integral (mssm_ext_ug_1) - 3405.2     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,g => su1,sgl       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ug_1) == 3405.2     )
printf "************************************************************************"
printf "* Checking u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.3           ) ** 2 + error(mssm_ext_ug_2) ** 2)
printf "Expecting 3460.0     "
show(integral(mssm_ext_ug_2))
real pull = abs (integral (mssm_ext_ug_2) - 3460.0     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,g => su2,sgl       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ug_2) == 3460.0     )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
