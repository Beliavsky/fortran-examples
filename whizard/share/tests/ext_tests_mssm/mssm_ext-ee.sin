

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-ee.m4 1775 2010-02-12 17:55:32Z jr_reuter $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! ------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                  -----
! ------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! ------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! ------------------------------------------------------------------------
iterations = 3:200000
! ------------------------------------------------------------------------






























































! ------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_ee_1 = e1,E1 => se1,SE1      
process mssm_ext_ee_2 = e1,E1 => se2,SE2      
process mssm_ext_ee_3 = e1,E1 => se1,SE2      
process mssm_ext_ee_4 = e1,E1 => smu1,SMU1    
process mssm_ext_ee_5 = e1,E1 => smu2,SMU2    
process mssm_ext_ee_6 = e1,E1 => stau1,STAU1  
process mssm_ext_ee_7 = e1,E1 => stau2,STAU2  
process mssm_ext_ee_8 = e1,E1 => stau1,STAU2  
process mssm_ext_ee_9 = e1,E1 => sn11,SN11    
process mssm_ext_ee_10 = e1,E1 => sn21,SN21    
process mssm_ext_ee_11 = e1,E1 => sn31,SN31    
process mssm_ext_ee_12 = e1,E1 => neu1,neu1    
process mssm_ext_ee_13 = e1,E1 => neu1,neu2    
process mssm_ext_ee_14 = e1,E1 => neu1,neu3    
process mssm_ext_ee_15 = e1,E1 => neu1,neu4    
process mssm_ext_ee_16 = e1,E1 => neu2,neu2    
process mssm_ext_ee_17 = e1,E1 => "ch1+","ch1-"
process mssm_ext_ee_18 = e1,E1 => Z,h          
process mssm_ext_ee_19 = e1,E1 => Z,HH         
process mssm_ext_ee_20 = e1,E1 => se1,SE1      
process mssm_ext_ee_21 = e1,E1 => se2,SE2      
process mssm_ext_ee_22 = e1,E1 => se1,SE2      
process mssm_ext_ee_23 = e1,E1 => smu1,SMU1    
process mssm_ext_ee_24 = e1,E1 => smu2,SMU2    
process mssm_ext_ee_25 = e1,E1 => stau1,STAU1  
process mssm_ext_ee_26 = e1,E1 => stau2,STAU2  
process mssm_ext_ee_27 = e1,E1 => stau1,STAU2  
process mssm_ext_ee_28 = e1,E1 => sn11,SN11    
process mssm_ext_ee_29 = e1,E1 => sn21,SN21    
process mssm_ext_ee_30 = e1,E1 => sn31,SN31    
process mssm_ext_ee_31 = e1,E1 => su1,su1c     
process mssm_ext_ee_32 = e1,E1 => su2,su2c     
process mssm_ext_ee_33 = e1,E1 => sc1,sc1c     
process mssm_ext_ee_34 = e1,E1 => sc2,sc2c     
process mssm_ext_ee_35 = e1,E1 => st1,st1c     
process mssm_ext_ee_36 = e1,E1 => st2,st2c     
process mssm_ext_ee_37 = e1,E1 => st1,st2c     
process mssm_ext_ee_38 = e1,E1 => sd1,sd1c     
process mssm_ext_ee_39 = e1,E1 => sd2,sd2c     
process mssm_ext_ee_40 = e1,E1 => ss1,ss1c     
process mssm_ext_ee_41 = e1,E1 => ss2,ss2c     
process mssm_ext_ee_42 = e1,E1 => sb1,sb1c     
process mssm_ext_ee_43 = e1,E1 => sb2,sb2c     
process mssm_ext_ee_44 = e1,E1 => sb1,sb2c     
process mssm_ext_ee_45 = e1,E1 => neu1,neu1    
process mssm_ext_ee_46 = e1,E1 => neu1,neu2    
process mssm_ext_ee_47 = e1,E1 => neu1,neu3    
process mssm_ext_ee_48 = e1,E1 => neu1,neu4    
process mssm_ext_ee_49 = e1,E1 => neu2,neu2    
process mssm_ext_ee_50 = e1,E1 => neu2,neu3    
process mssm_ext_ee_51 = e1,E1 => neu2,neu4    
process mssm_ext_ee_52 = e1,E1 => neu3,neu3    
process mssm_ext_ee_53 = e1,E1 => neu3,neu4    
process mssm_ext_ee_54 = e1,E1 => neu4,neu4    
process mssm_ext_ee_55 = e1,E1 => "ch1+","ch1-"
process mssm_ext_ee_56 = e1,E1 => "ch2+","ch2-"
process mssm_ext_ee_57 = e1,E1 => "ch1+","ch2-"
process mssm_ext_ee_58 = e1,E1 => Z,h          
process mssm_ext_ee_59 = e1,E1 => Z,HH         
process mssm_ext_ee_60 = e1,E1 => HA,h         
process mssm_ext_ee_61 = e1,E1 => HA,HH        
process mssm_ext_ee_62 = e1,E1 => Hp,Hm        
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_1)
printf "************************************************************************"
printf "* Integrating e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_2)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_3)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_4)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_5)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_6)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_7)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_8)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_9)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_10)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_11)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_12)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_13)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_14)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_15)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_16)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_17)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_18)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_19)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_20)
printf "************************************************************************"
printf "* Integrating e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_21)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_22)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_23)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_24)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_25)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_26)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_27)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_28)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_29)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_30)
printf "************************************************************************"
printf "* Integrating e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_31)
printf "************************************************************************"
printf "* Integrating e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_32)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_33)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_34)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_35)
printf "************************************************************************"
printf "* Integrating e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_36)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_37)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_38)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_39)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_40)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_41)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_42)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_43)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_44)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_45)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_46)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_47)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_48)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_49)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_50)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_51)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_52)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_53)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_54)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_55)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_56)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_57)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_58)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_59)
printf "************************************************************************"
printf "* Integrating e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_60)
printf "************************************************************************"
printf "* Integrating e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_61)
printf "************************************************************************"
printf "* Integrating e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = e1,E1
seed = 0
integrate (mssm_ext_ee_62)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003      ) ** 2 + error(mssm_ext_ee_1) ** 2)
printf "Expecting 54.687      "
show(integral(mssm_ext_ee_1))
real pull = abs (integral (mssm_ext_ee_1) - 54.687      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_1) == 54.687      )
printf "************************************************************************"
printf "* Checking e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_ee_2) ** 2)
printf "Expecting 274.682      "
show(integral(mssm_ext_ee_2))
real pull = abs (integral (mssm_ext_ee_2) - 274.682      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se2,SE2       @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ee_2) == 274.682      )
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003      ) ** 2 + error(mssm_ext_ee_3) ** 2)
printf "Expecting 75.167      "
show(integral(mssm_ext_ee_3))
real pull = abs (integral (mssm_ext_ee_3) - 75.167      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_3) == 75.167      )
printf "************************************************************************"
printf "* Checking e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009     ) ** 2 + error(mssm_ext_ee_4) ** 2)
printf "Expecting 22.5478     "
show(integral(mssm_ext_ee_4))
real pull = abs (integral (mssm_ext_ee_4) - 22.5478     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu1,SMU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_4) == 22.5478     )
printf "************************************************************************"
printf "* Checking e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_ee_5) ** 2)
printf "Expecting 51.837      "
show(integral(mssm_ext_ee_5))
real pull = abs (integral (mssm_ext_ee_5) - 51.837      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu2,SMU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_5) == 51.837      )
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_ee_6) ** 2)
printf "Expecting 55.580      "
show(integral(mssm_ext_ee_6))
real pull = abs (integral (mssm_ext_ee_6) - 55.580      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU1   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_6) == 55.580      )
printf "************************************************************************"
printf "* Checking e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007     ) ** 2 + error(mssm_ext_ee_7) ** 2)
printf "Expecting 19.0174     "
show(integral(mssm_ext_ee_7))
real pull = abs (integral (mssm_ext_ee_7) - 19.0174     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau2,STAU2   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_7) == 19.0174     )
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_ee_8) ** 2)
printf "Expecting 1.41191    "
show(integral(mssm_ext_ee_8))
real pull = abs (integral (mssm_ext_ee_8) - 1.41191    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU2   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_8) == 1.41191    )
printf "************************************************************************"
printf "* Checking e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_ee_9) ** 2)
printf "Expecting 493.38       "
show(integral(mssm_ext_ee_9))
real pull = abs (integral (mssm_ext_ee_9) - 493.38       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn11,SN11     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_9) == 493.38       )
printf "************************************************************************"
printf "* Checking e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006     ) ** 2 + error(mssm_ext_ee_10) ** 2)
printf "Expecting 14.8638     "
show(integral(mssm_ext_ee_10))
real pull = abs (integral (mssm_ext_ee_10) - 14.8638     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn21,SN21     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_10) == 14.8638     )
printf "************************************************************************"
printf "* Checking e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0008     ) ** 2 + error(mssm_ext_ee_11) ** 2)
printf "Expecting 15.1394     "
show(integral(mssm_ext_ee_11))
real pull = abs (integral (mssm_ext_ee_11) - 15.1394     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn31,SN31     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_11) == 15.1394     )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007      ) ** 2 + error(mssm_ext_ee_12) ** 2)
printf "Expecting 240.636      "
show(integral(mssm_ext_ee_12))
real pull = abs (integral (mssm_ext_ee_12) - 240.636      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_12) == 240.636      )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_ee_13) ** 2)
printf "Expecting 62.374      "
show(integral(mssm_ext_ee_13))
real pull = abs (integral (mssm_ext_ee_13) - 62.374      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_13) == 62.374      )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004    ) ** 2 + error(mssm_ext_ee_14) ** 2)
printf "Expecting 7.78131    "
show(integral(mssm_ext_ee_14))
real pull = abs (integral (mssm_ext_ee_14) - 7.78131    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu3     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_14) == 7.78131    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003    ) ** 2 + error(mssm_ext_ee_15) ** 2)
printf "Expecting 1.03460    "
show(integral(mssm_ext_ee_15))
real pull = abs (integral (mssm_ext_ee_15) - 1.03460    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu4     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_15) == 1.03460    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003      ) ** 2 + error(mssm_ext_ee_16) ** 2)
printf "Expecting 70.730      "
show(integral(mssm_ext_ee_16))
real pull = abs (integral (mssm_ext_ee_16) - 70.730      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_16) == 70.730      )
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007      ) ** 2 + error(mssm_ext_ee_17) ** 2)
printf "Expecting 162.788      "
show(integral(mssm_ext_ee_17))
real pull = abs (integral (mssm_ext_ee_17) - 162.788      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch1- @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_17) == 162.788      )
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_ee_18) ** 2)
printf "Expecting 59.376      "
show(integral(mssm_ext_ee_18))
real pull = abs (integral (mssm_ext_ee_18) - 59.376      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h           @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_18) == 59.376      )
printf "************************************************************************"
printf "* Checking e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000005E-4) ** 2 + error(mssm_ext_ee_19) ** 2)
printf "Expecting 6.179180E-4"
show(integral(mssm_ext_ee_19))
real pull = abs (integral (mssm_ext_ee_19) - 6.179180E-4) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,HH          @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_19) == 6.179180E-4)
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.004      ) ** 2 + error(mssm_ext_ee_20) ** 2)
printf "Expecting 78.866      "
show(integral(mssm_ext_ee_20))
real pull = abs (integral (mssm_ext_ee_20) - 78.866      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_20) == 78.866      )
printf "************************************************************************"
printf "* Checking e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.005      ) ** 2 + error(mssm_ext_ee_21) ** 2)
printf "Expecting 91.776      "
show(integral(mssm_ext_ee_21))
real pull = abs (integral (mssm_ext_ee_21) - 91.776      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se2,SE2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_21) == 91.776      )
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004     ) ** 2 + error(mssm_ext_ee_22) ** 2)
printf "Expecting 7.2372     "
show(integral(mssm_ext_ee_22))
real pull = abs (integral (mssm_ext_ee_22) - 7.2372     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_22) == 7.2372     )
printf "************************************************************************"
printf "* Checking e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_ee_23) ** 2)
printf "Expecting 6.8265     "
show(integral(mssm_ext_ee_23))
real pull = abs (integral (mssm_ext_ee_23) - 6.8265     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu1,SMU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_23) == 6.8265     )
printf "************************************************************************"
printf "* Checking e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_24) ** 2)
printf "Expecting 5.8105     "
show(integral(mssm_ext_ee_24))
real pull = abs (integral (mssm_ext_ee_24) - 5.8105     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu2,SMU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_24) == 5.8105     )
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_25) ** 2)
printf "Expecting 5.7141     "
show(integral(mssm_ext_ee_25))
real pull = abs (integral (mssm_ext_ee_25) - 5.7141     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU1   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_25) == 5.7141     )
printf "************************************************************************"
printf "* Checking e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_ee_26) ** 2)
printf "Expecting 6.5045     "
show(integral(mssm_ext_ee_26))
real pull = abs (integral (mssm_ext_ee_26) - 6.5045     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau2,STAU2   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_26) == 6.5045     )
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000008   ) ** 2 + error(mssm_ext_ee_27) ** 2)
printf "Expecting 0.214058   "
show(integral(mssm_ext_ee_27))
real pull = abs (integral (mssm_ext_ee_27) - 0.214058   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU2   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_27) == 0.214058   )
printf "************************************************************************"
printf "* Checking e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.01       ) ** 2 + error(mssm_ext_ee_28) ** 2)
printf "Expecting 272.15       "
show(integral(mssm_ext_ee_28))
real pull = abs (integral (mssm_ext_ee_28) - 272.15       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn11,SN11     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_28) == 272.15       )
printf "************************************************************************"
printf "* Checking e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_ee_29) ** 2)
printf "Expecting 2.9232     "
show(integral(mssm_ext_ee_29))
real pull = abs (integral (mssm_ext_ee_29) - 2.9232     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn21,SN21     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_29) == 2.9232     )
printf "************************************************************************"
printf "* Checking e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_ee_30) ** 2)
printf "Expecting 2.9245     "
show(integral(mssm_ext_ee_30))
real pull = abs (integral (mssm_ext_ee_30) - 2.9245     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn31,SN31     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_30) == 2.9245     )
printf "************************************************************************"
printf "* Checking e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_ee_31) ** 2)
printf "Expecting 7.6188     "
show(integral(mssm_ext_ee_31))
real pull = abs (integral (mssm_ext_ee_31) - 7.6188     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su1,su1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_31) == 7.6188     )
printf "************************************************************************"
printf "* Checking e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_32) ** 2)
printf "Expecting 4.6935     "
show(integral(mssm_ext_ee_32))
real pull = abs (integral (mssm_ext_ee_32) - 4.6935     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su2,su2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_32) == 4.6935     )
printf "************************************************************************"
printf "* Checking e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_ee_33) ** 2)
printf "Expecting 7.6182     "
show(integral(mssm_ext_ee_33))
real pull = abs (integral (mssm_ext_ee_33) - 7.6182     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc1,sc1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_33) == 7.6182     )
printf "************************************************************************"
printf "* Checking e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_34) ** 2)
printf "Expecting 4.6933     "
show(integral(mssm_ext_ee_34))
real pull = abs (integral (mssm_ext_ee_34) - 4.6933     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc2,sc2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_34) == 4.6933     )
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_35) ** 2)
printf "Expecting 5.9847     "
show(integral(mssm_ext_ee_35))
real pull = abs (integral (mssm_ext_ee_35) - 5.9847     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_35) == 5.9847     )
printf "************************************************************************"
printf "* Checking e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_36) ** 2)
printf "Expecting 5.3792     "
show(integral(mssm_ext_ee_36))
real pull = abs (integral (mssm_ext_ee_36) - 5.3792     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st2,st2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_36) == 5.3792     )
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_ee_37) ** 2)
printf "Expecting 1.24264    "
show(integral(mssm_ext_ee_37))
real pull = abs (integral (mssm_ext_ee_37) - 1.24264    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_37) == 1.24264    )
printf "************************************************************************"
printf "* Checking e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_38) ** 2)
printf "Expecting 5.2059     "
show(integral(mssm_ext_ee_38))
real pull = abs (integral (mssm_ext_ee_38) - 5.2059     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd1,sd1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_38) == 5.2059     )
printf "************************************************************************"
printf "* Checking e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_ee_39) ** 2)
printf "Expecting 1.17595    "
show(integral(mssm_ext_ee_39))
real pull = abs (integral (mssm_ext_ee_39) - 1.17595    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd2,sd2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_39) == 1.17595    )
printf "************************************************************************"
printf "* Checking e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_40) ** 2)
printf "Expecting 5.2058     "
show(integral(mssm_ext_ee_40))
real pull = abs (integral (mssm_ext_ee_40) - 5.2058     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss1,ss1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_40) == 5.2058     )
printf "************************************************************************"
printf "* Checking e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_ee_41) ** 2)
printf "Expecting 1.17585    "
show(integral(mssm_ext_ee_41))
real pull = abs (integral (mssm_ext_ee_41) - 1.17585    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss2,ss2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_41) == 1.17585    )
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_42) ** 2)
printf "Expecting 4.9387     "
show(integral(mssm_ext_ee_42))
real pull = abs (integral (mssm_ext_ee_42) - 4.9387     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_42) == 4.9387     )
printf "************************************************************************"
printf "* Checking e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004    ) ** 2 + error(mssm_ext_ee_43) ** 2)
printf "Expecting 1.12946    "
show(integral(mssm_ext_ee_43))
real pull = abs (integral (mssm_ext_ee_43) - 1.12946    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb2,sb2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_43) == 1.12946    )
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000009   ) ** 2 + error(mssm_ext_ee_44) ** 2)
printf "Expecting 0.516432   "
show(integral(mssm_ext_ee_44))
real pull = abs (integral (mssm_ext_ee_44) - 0.516432   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_44) == 0.516432   )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009     ) ** 2 + error(mssm_ext_ee_45) ** 2)
printf "Expecting 26.3087     "
show(integral(mssm_ext_ee_45))
real pull = abs (integral (mssm_ext_ee_45) - 26.3087     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_45) == 26.3087     )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004     ) ** 2 + error(mssm_ext_ee_46) ** 2)
printf "Expecting 9.9475     "
show(integral(mssm_ext_ee_46))
real pull = abs (integral (mssm_ext_ee_46) - 9.9475     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_46) == 9.9475     )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00001    ) ** 2 + error(mssm_ext_ee_47) ** 2)
printf "Expecting 0.64796    "
show(integral(mssm_ext_ee_47))
real pull = abs (integral (mssm_ext_ee_47) - 0.64796    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_47) == 0.64796    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_ee_48) ** 2)
printf "Expecting 1.36564    "
show(integral(mssm_ext_ee_48))
real pull = abs (integral (mssm_ext_ee_48) - 1.36564    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_48) == 1.36564    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0008     ) ** 2 + error(mssm_ext_ee_49) ** 2)
printf "Expecting 18.6845     "
show(integral(mssm_ext_ee_49))
real pull = abs (integral (mssm_ext_ee_49) - 18.6845     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_49) == 18.6845     )
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004    ) ** 2 + error(mssm_ext_ee_50) ** 2)
printf "Expecting 1.85590    "
show(integral(mssm_ext_ee_50))
real pull = abs (integral (mssm_ext_ee_50) - 1.85590    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_50) == 1.85590    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_ee_51) ** 2)
printf "Expecting 3.03951    "
show(integral(mssm_ext_ee_51))
real pull = abs (integral (mssm_ext_ee_51) - 3.03951    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_51) == 3.03951    )
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000002  ) ** 2 + error(mssm_ext_ee_52) ** 2)
printf "Expecting 0.0042214  "
show(integral(mssm_ext_ee_52))
real pull = abs (integral (mssm_ext_ee_52) - 0.0042214  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_52) == 0.0042214  )
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_ee_53) ** 2)
printf "Expecting 9.9362     "
show(integral(mssm_ext_ee_53))
real pull = abs (integral (mssm_ext_ee_53) - 9.9362     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_53) == 9.9362     )
printf "************************************************************************"
printf "* Checking e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000005   ) ** 2 + error(mssm_ext_ee_54) ** 2)
printf "Expecting 0.135482   "
show(integral(mssm_ext_ee_54))
real pull = abs (integral (mssm_ext_ee_54) - 0.135482   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu4,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_54) == 0.135482   )
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_ee_55) ** 2)
printf "Expecting 45.080      "
show(integral(mssm_ext_ee_55))
real pull = abs (integral (mssm_ext_ee_55) - 45.080      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch1- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_55) == 45.080      )
printf "************************************************************************"
printf "* Checking e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006     ) ** 2 + error(mssm_ext_ee_56) ** 2)
printf "Expecting 26.9864     "
show(integral(mssm_ext_ee_56))
real pull = abs (integral (mssm_ext_ee_56) - 26.9864     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch2+,ch2- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_56) == 26.9864     )
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_ee_57) ** 2)
printf "Expecting 4.01053    "
show(integral(mssm_ext_ee_57))
real pull = abs (integral (mssm_ext_ee_57) - 4.01053    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch2- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_57) == 4.01053    )
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_ee_58) ** 2)
printf "Expecting 3.11492    "
show(integral(mssm_ext_ee_58))
real pull = abs (integral (mssm_ext_ee_58) - 3.11492    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_58) == 3.11492    )
printf "************************************************************************"
printf "* Checking e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002E-4  ) ** 2 + error(mssm_ext_ee_59) ** 2)
printf "Expecting 5.5058E-4  "
show(integral(mssm_ext_ee_59))
real pull = abs (integral (mssm_ext_ee_59) - 5.5058E-4  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,HH          @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_59) == 5.5058E-4  )
printf "************************************************************************"
printf "* Checking e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002E-4  ) ** 2 + error(mssm_ext_ee_60) ** 2)
printf "Expecting 5.3433E-4  "
show(integral(mssm_ext_ee_60))
real pull = abs (integral (mssm_ext_ee_60) - 5.3433E-4  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => HA,h          @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_60) == 5.3433E-4  )
printf "************************************************************************"
printf "* Checking e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_ee_61) ** 2)
printf "Expecting 2.37434    "
show(integral(mssm_ext_ee_61))
real pull = abs (integral (mssm_ext_ee_61) - 2.37434    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => HA,HH         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_61) == 2.37434    )
printf "************************************************************************"
printf "* Checking e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_ee_62) ** 2)
printf "Expecting 5.5339     "
show(integral(mssm_ext_ee_62))
real pull = abs (integral (mssm_ext_ee_62) - 5.5339     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Hp,Hm         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ee_62) == 5.5339     )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
