

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-uu2.m4 ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------




























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_uu2_1 = u,U => n1,N1		
process nmssm_ext_uu2_2 = u,U => n2,N2		
process nmssm_ext_uu2_3 = u,U => n3,N3		
process nmssm_ext_uu2_4 = u,U => t,T		
process nmssm_ext_uu2_5 = u,U => Wp,Wm		
process nmssm_ext_uu2_6 = u,U => Z,Z		
process nmssm_ext_uu2_7 = u,U => se1,SE1	
process nmssm_ext_uu2_8 = u,U => se2,SE2	
process nmssm_ext_uu2_9 = u,U => smu1,SMU1	
process nmssm_ext_uu2_10 = u,U => smu2,SMU2	
process nmssm_ext_uu2_11 = u,U => stau1,STAU1	
process nmssm_ext_uu2_12 = u,U => stau2,STAU2	
process nmssm_ext_uu2_13 = u,U => stau1,STAU2	
process nmssm_ext_uu2_14 = u,U => sn11,SN11	
process nmssm_ext_uu2_15 = u,U => sn21,SN21	
process nmssm_ext_uu2_16 = u,U => sn31,SN31	
process nmssm_ext_uu2_17 = u,U => su1,su1c	
process nmssm_ext_uu2_18 = u,U => su2,su2c	
process nmssm_ext_uu2_19 = u,U => su1,su2c	
process nmssm_ext_uu2_20 = u,U => sc1,sc1c	
process nmssm_ext_uu2_21 = u,U => sc2,sc2c	
process nmssm_ext_uu2_22 = u,U => st1,st1c	
process nmssm_ext_uu2_23 = u,U => st2,st2c	
process nmssm_ext_uu2_24 = u,U => st1,st2c	
process nmssm_ext_uu2_25 = u,U => sd1,sd1c	
process nmssm_ext_uu2_26 = u,U => sd2,sd2c	
process nmssm_ext_uu2_27 = u,U => ss1,ss1c	
process nmssm_ext_uu2_28 = u,U => ss2,ss2c	
process nmssm_ext_uu2_29 = u,U => sb1,sb1c	
process nmssm_ext_uu2_30 = u,U => sb2,sb2c	
process nmssm_ext_uu2_31 = u,U => sb1,sb2c	
process nmssm_ext_uu2_32 = u,U => neu1,neu1	
process nmssm_ext_uu2_33 = u,U => neu1,neu2	
process nmssm_ext_uu2_34 = u,U => neu1,neu3	
process nmssm_ext_uu2_35 = u,U => neu1,neu4	
process nmssm_ext_uu2_36 = u,U => neu1,neu5	
process nmssm_ext_uu2_37 = u,U => neu2,neu2	
process nmssm_ext_uu2_38 = u,U => neu2,neu3	
process nmssm_ext_uu2_39 = u,U => neu2,neu4	
process nmssm_ext_uu2_40 = u,U => neu2,neu5	
process nmssm_ext_uu2_41 = u,U => neu3,neu3	
process nmssm_ext_uu2_42 = u,U => neu3,neu4	
process nmssm_ext_uu2_43 = u,U => neu3,neu5	
process nmssm_ext_uu2_44 = u,U => neu4,neu4	
process nmssm_ext_uu2_45 = u,U => neu4,neu5	
process nmssm_ext_uu2_46 = u,U => neu5,neu5	
process nmssm_ext_uu2_47 = u,U => "ch1+","ch1-"	
process nmssm_ext_uu2_48 = u,U => "ch2+","ch2-"	
process nmssm_ext_uu2_49 = u,U => "ch1+","ch2-"	
process nmssm_ext_uu2_50 = u,U => sgl,sgl	
process nmssm_ext_uu2_51 = u,U => Z,h01		
process nmssm_ext_uu2_52 = u,U => Z,h02		
process nmssm_ext_uu2_53 = u,U => Z,h03		
process nmssm_ext_uu2_54 = u,U => A01,h01	
process nmssm_ext_uu2_55 = u,U => A01,h02	
process nmssm_ext_uu2_56 = u,U => A01,h03	
process nmssm_ext_uu2_57 = u,U => A02,h01	
process nmssm_ext_uu2_58 = u,U => A02,h02	
process nmssm_ext_uu2_59 = u,U => A02,h03	
process nmssm_ext_uu2_60 = u,U => Hp,Hm		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_1)
printf "************************************************************************"
printf "* Integrating u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_2)
printf "************************************************************************"
printf "* Integrating u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_3)
printf "************************************************************************"
printf "* Integrating u,U => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_4)
printf "************************************************************************"
printf "* Integrating u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_5)
printf "************************************************************************"
printf "* Integrating u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_6)
printf "************************************************************************"
printf "* Integrating u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_7)
printf "************************************************************************"
printf "* Integrating u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_8)
printf "************************************************************************"
printf "* Integrating u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_9)
printf "************************************************************************"
printf "* Integrating u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_10)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_11)
printf "************************************************************************"
printf "* Integrating u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_12)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_13)
printf "************************************************************************"
printf "* Integrating u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_14)
printf "************************************************************************"
printf "* Integrating u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_15)
printf "************************************************************************"
printf "* Integrating u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_16)
printf "************************************************************************"
printf "* Integrating u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_17)
printf "************************************************************************"
printf "* Integrating u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_18)
printf "************************************************************************"
printf "* Integrating u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_19)
printf "************************************************************************"
printf "* Integrating u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_20)
printf "************************************************************************"
printf "* Integrating u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_21)
printf "************************************************************************"
printf "* Integrating u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_22)
printf "************************************************************************"
printf "* Integrating u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_23)
printf "************************************************************************"
printf "* Integrating u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_24)
printf "************************************************************************"
printf "* Integrating u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_25)
printf "************************************************************************"
printf "* Integrating u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_26)
printf "************************************************************************"
printf "* Integrating u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_27)
printf "************************************************************************"
printf "* Integrating u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_28)
printf "************************************************************************"
printf "* Integrating u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_29)
printf "************************************************************************"
printf "* Integrating u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_30)
printf "************************************************************************"
printf "* Integrating u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_31)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_32)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_33)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_34)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_35)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_36)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_37)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_38)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_39)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_40)
printf "************************************************************************"
printf "* Integrating u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_41)
printf "************************************************************************"
printf "* Integrating u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_42)
printf "************************************************************************"
printf "* Integrating u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_43)
printf "************************************************************************"
printf "* Integrating u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_44)
printf "************************************************************************"
printf "* Integrating u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_45)
printf "************************************************************************"
printf "* Integrating u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_46)
printf "************************************************************************"
printf "* Integrating u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_47)
printf "************************************************************************"
printf "* Integrating u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_48)
printf "************************************************************************"
printf "* Integrating u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_49)
printf "************************************************************************"
printf "* Integrating u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_50)
printf "************************************************************************"
printf "* Integrating u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_51)
printf "************************************************************************"
printf "* Integrating u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_52)
printf "************************************************************************"
printf "* Integrating u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_53)
printf "************************************************************************"
printf "* Integrating u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_54)
printf "************************************************************************"
printf "* Integrating u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_55)
printf "************************************************************************"
printf "* Integrating u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_56)
printf "************************************************************************"
printf "* Integrating u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_57)
printf "************************************************************************"
printf "* Integrating u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_58)
printf "************************************************************************"
printf "* Integrating u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_59)
printf "************************************************************************"
printf "* Integrating u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,U
seed = 0
integrate (nmssm_ext_uu2_60)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.04E-04) ** 2 + error(nmssm_ext_uu2_1) ** 2)
printf "Expecting 3.7009049E-01"
show(integral(nmssm_ext_uu2_1))
real pull = abs (integral (nmssm_ext_uu2_1) - 3.7009049E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => n1,N1		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_1) == 3.7009049E-01)
printf "************************************************************************"
printf "* Checking u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.05E-04) ** 2 + error(nmssm_ext_uu2_2) ** 2)
printf "Expecting 3.6989807E-01"
show(integral(nmssm_ext_uu2_2))
real pull = abs (integral (nmssm_ext_uu2_2) - 3.6989807E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => n2,N2		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_2) == 3.6989807E-01)
printf "************************************************************************"
printf "* Checking u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.85E-05) ** 2 + error(nmssm_ext_uu2_3) ** 2)
printf "Expecting 3.7031276E-01"
show(integral(nmssm_ext_uu2_3))
real pull = abs (integral (nmssm_ext_uu2_3) - 3.7031276E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => n3,N3		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_3) == 3.7031276E-01)
printf "************************************************************************"
printf "* Checking u,U => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.13E-02) ** 2 + error(nmssm_ext_uu2_4) ** 2)
printf "Expecting 2.0073151E+02"
show(integral(nmssm_ext_uu2_4))
real pull = abs (integral (nmssm_ext_uu2_4) - 2.0073151E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_4) == 2.0073151E+02)
printf "************************************************************************"
printf "* Checking u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.55E-01) ** 2 + error(nmssm_ext_uu2_5) ** 2)
printf "Expecting 6.3697675E+01"
show(integral(nmssm_ext_uu2_5))
real pull = abs (integral (nmssm_ext_uu2_5) - 6.3697675E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Wp,Wm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_5) == 6.3697675E+01)
printf "************************************************************************"
printf "* Checking u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.77E-03) ** 2 + error(nmssm_ext_uu2_6) ** 2)
printf "Expecting 6.3953137E+00"
show(integral(nmssm_ext_uu2_6))
real pull = abs (integral (nmssm_ext_uu2_6) - 6.3953137E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,Z		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_6) == 6.3953137E+00)
printf "************************************************************************"
printf "* Checking u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.23E-04) ** 2 + error(nmssm_ext_uu2_7) ** 2)
printf "Expecting 2.5945571E-01"
show(integral(nmssm_ext_uu2_7))
real pull = abs (integral (nmssm_ext_uu2_7) - 2.5945571E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_7) == 2.5945571E-01)
printf "************************************************************************"
printf "* Checking u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-04) ** 2 + error(nmssm_ext_uu2_8) ** 2)
printf "Expecting 1.3241413E-01"
show(integral(nmssm_ext_uu2_8))
real pull = abs (integral (nmssm_ext_uu2_8) - 1.3241413E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_8) == 1.3241413E-01)
printf "************************************************************************"
printf "* Checking u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.21E-04) ** 2 + error(nmssm_ext_uu2_9) ** 2)
printf "Expecting 2.5959150E-01"
show(integral(nmssm_ext_uu2_9))
real pull = abs (integral (nmssm_ext_uu2_9) - 2.5959150E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_9) == 2.5959150E-01)
printf "************************************************************************"
printf "* Checking u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-04) ** 2 + error(nmssm_ext_uu2_10) ** 2)
printf "Expecting 1.3209038E-01"
show(integral(nmssm_ext_uu2_10))
real pull = abs (integral (nmssm_ext_uu2_10) - 1.3209038E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_10) == 1.3209038E-01)
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.25E-04) ** 2 + error(nmssm_ext_uu2_11) ** 2)
printf "Expecting 1.4968850E-01"
show(integral(nmssm_ext_uu2_11))
real pull = abs (integral (nmssm_ext_uu2_11) - 1.4968850E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_11) == 1.4968850E-01)
printf "************************************************************************"
printf "* Checking u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E-04) ** 2 + error(nmssm_ext_uu2_12) ** 2)
printf "Expecting 1.5091592E-01"
show(integral(nmssm_ext_uu2_12))
real pull = abs (integral (nmssm_ext_uu2_12) - 1.5091592E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_12) == 1.5091592E-01)
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.89E-05) ** 2 + error(nmssm_ext_uu2_13) ** 2)
printf "Expecting 4.5791472E-02"
show(integral(nmssm_ext_uu2_13))
real pull = abs (integral (nmssm_ext_uu2_13) - 4.5791472E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_13) == 4.5791472E-02)
printf "************************************************************************"
printf "* Checking u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.57E-04) ** 2 + error(nmssm_ext_uu2_14) ** 2)
printf "Expecting 1.8322852E-01"
show(integral(nmssm_ext_uu2_14))
real pull = abs (integral (nmssm_ext_uu2_14) - 1.8322852E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn11,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_14) == 1.8322852E-01)
printf "************************************************************************"
printf "* Checking u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.55E-04) ** 2 + error(nmssm_ext_uu2_15) ** 2)
printf "Expecting 1.8340824E-01"
show(integral(nmssm_ext_uu2_15))
real pull = abs (integral (nmssm_ext_uu2_15) - 1.8340824E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn21,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_15) == 1.8340824E-01)
printf "************************************************************************"
printf "* Checking u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.57E-04) ** 2 + error(nmssm_ext_uu2_16) ** 2)
printf "Expecting 1.8326038E-01"
show(integral(nmssm_ext_uu2_16))
real pull = abs (integral (nmssm_ext_uu2_16) - 1.8326038E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn31,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_16) == 1.8326038E-01)
printf "************************************************************************"
printf "* Checking u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.86E-01) ** 2 + error(nmssm_ext_uu2_17) ** 2)
printf "Expecting 3.5220701E+02"
show(integral(nmssm_ext_uu2_17))
real pull = abs (integral (nmssm_ext_uu2_17) - 3.5220701E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_17) == 3.5220701E+02)
printf "************************************************************************"
printf "* Checking u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.96E-01) ** 2 + error(nmssm_ext_uu2_18) ** 2)
printf "Expecting 3.6018003E+02"
show(integral(nmssm_ext_uu2_18))
real pull = abs (integral (nmssm_ext_uu2_18) - 3.6018003E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_18) == 3.6018003E+02)
printf "************************************************************************"
printf "* Checking u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.58E-01) ** 2 + error(nmssm_ext_uu2_19) ** 2)
printf "Expecting 1.2986802E+02"
show(integral(nmssm_ext_uu2_19))
real pull = abs (integral (nmssm_ext_uu2_19) - 1.2986802E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su1,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_19) == 1.2986802E+02)
printf "************************************************************************"
printf "* Checking u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.26E-02) ** 2 + error(nmssm_ext_uu2_20) ** 2)
printf "Expecting 3.8502204E+01"
show(integral(nmssm_ext_uu2_20))
real pull = abs (integral (nmssm_ext_uu2_20) - 3.8502204E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_20) == 3.8502204E+01)
printf "************************************************************************"
printf "* Checking u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.27E-02) ** 2 + error(nmssm_ext_uu2_21) ** 2)
printf "Expecting 3.8090527E+01"
show(integral(nmssm_ext_uu2_21))
real pull = abs (integral (nmssm_ext_uu2_21) - 3.8090527E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_21) == 3.8090527E+01)
printf "************************************************************************"
printf "* Checking u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.60E-02) ** 2 + error(nmssm_ext_uu2_22) ** 2)
printf "Expecting 4.2655592E+01"
show(integral(nmssm_ext_uu2_22))
real pull = abs (integral (nmssm_ext_uu2_22) - 4.2655592E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_22) == 4.2655592E+01)
printf "************************************************************************"
printf "* Checking u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.91E-02) ** 2 + error(nmssm_ext_uu2_23) ** 2)
printf "Expecting 3.3401485E+01"
show(integral(nmssm_ext_uu2_23))
real pull = abs (integral (nmssm_ext_uu2_23) - 3.3401485E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_23) == 3.3401485E+01)
printf "************************************************************************"
printf "* Checking u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.07E-05) ** 2 + error(nmssm_ext_uu2_24) ** 2)
printf "Expecting 1.0536113E-01"
show(integral(nmssm_ext_uu2_24))
real pull = abs (integral (nmssm_ext_uu2_24) - 1.0536113E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_24) == 1.0536113E-01)
printf "************************************************************************"
printf "* Checking u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.24E-02) ** 2 + error(nmssm_ext_uu2_25) ** 2)
printf "Expecting 5.3493499E+01"
show(integral(nmssm_ext_uu2_25))
real pull = abs (integral (nmssm_ext_uu2_25) - 5.3493499E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_25) == 5.3493499E+01)
printf "************************************************************************"
printf "* Checking u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.50E-02) ** 2 + error(nmssm_ext_uu2_26) ** 2)
printf "Expecting 3.8018002E+01"
show(integral(nmssm_ext_uu2_26))
real pull = abs (integral (nmssm_ext_uu2_26) - 3.8018002E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_26) == 3.8018002E+01)
printf "************************************************************************"
printf "* Checking u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.25E-02) ** 2 + error(nmssm_ext_uu2_27) ** 2)
printf "Expecting 3.8371479E+01"
show(integral(nmssm_ext_uu2_27))
real pull = abs (integral (nmssm_ext_uu2_27) - 3.8371479E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_27) == 3.8371479E+01)
printf "************************************************************************"
printf "* Checking u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.21E-02) ** 2 + error(nmssm_ext_uu2_28) ** 2)
printf "Expecting 3.8009791E+01"
show(integral(nmssm_ext_uu2_28))
real pull = abs (integral (nmssm_ext_uu2_28) - 3.8009791E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_28) == 3.8009791E+01)
printf "************************************************************************"
printf "* Checking u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.26E-02) ** 2 + error(nmssm_ext_uu2_29) ** 2)
printf "Expecting 3.8156960E+01"
show(integral(nmssm_ext_uu2_29))
real pull = abs (integral (nmssm_ext_uu2_29) - 3.8156960E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_29) == 3.8156960E+01)
printf "************************************************************************"
printf "* Checking u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.19E-02) ** 2 + error(nmssm_ext_uu2_30) ** 2)
printf "Expecting 3.8049929E+01"
show(integral(nmssm_ext_uu2_30))
real pull = abs (integral (nmssm_ext_uu2_30) - 3.8049929E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_30) == 3.8049929E+01)
printf "************************************************************************"
printf "* Checking u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.08E-05) ** 2 + error(nmssm_ext_uu2_31) ** 2)
printf "Expecting 1.0476507E-01"
show(integral(nmssm_ext_uu2_31))
real pull = abs (integral (nmssm_ext_uu2_31) - 1.0476507E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_31) == 1.0476507E-01)
printf "************************************************************************"
printf "* Checking u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.84E-04) ** 2 + error(nmssm_ext_uu2_32) ** 2)
printf "Expecting 2.2487077E-01"
show(integral(nmssm_ext_uu2_32))
real pull = abs (integral (nmssm_ext_uu2_32) - 2.2487077E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_32) == 2.2487077E-01)
printf "************************************************************************"
printf "* Checking u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.39E-05) ** 2 + error(nmssm_ext_uu2_33) ** 2)
printf "Expecting 3.0076160E-02"
show(integral(nmssm_ext_uu2_33))
real pull = abs (integral (nmssm_ext_uu2_33) - 3.0076160E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_33) == 3.0076160E-02)
printf "************************************************************************"
printf "* Checking u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.08E-06) ** 2 + error(nmssm_ext_uu2_34) ** 2)
printf "Expecting 8.1339629E-03"
show(integral(nmssm_ext_uu2_34))
real pull = abs (integral (nmssm_ext_uu2_34) - 8.1339629E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_34) == 8.1339629E-03)
printf "************************************************************************"
printf "* Checking u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.93E-06) ** 2 + error(nmssm_ext_uu2_35) ** 2)
printf "Expecting 3.7161300E-03"
show(integral(nmssm_ext_uu2_35))
real pull = abs (integral (nmssm_ext_uu2_35) - 3.7161300E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_35) == 3.7161300E-03)
printf "************************************************************************"
printf "* Checking u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.44E-06) ** 2 + error(nmssm_ext_uu2_36) ** 2)
printf "Expecting 9.3125034E-03"
show(integral(nmssm_ext_uu2_36))
real pull = abs (integral (nmssm_ext_uu2_36) - 9.3125034E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_36) == 9.3125034E-03)
printf "************************************************************************"
printf "* Checking u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.71E-06) ** 2 + error(nmssm_ext_uu2_37) ** 2)
printf "Expecting 3.9093471E-03"
show(integral(nmssm_ext_uu2_37))
real pull = abs (integral (nmssm_ext_uu2_37) - 3.9093471E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_37) == 3.9093471E-03)
printf "************************************************************************"
printf "* Checking u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-04) ** 2 + error(nmssm_ext_uu2_38) ** 2)
printf "Expecting 1.2237136E-01"
show(integral(nmssm_ext_uu2_38))
real pull = abs (integral (nmssm_ext_uu2_38) - 1.2237136E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_38) == 1.2237136E-01)
printf "************************************************************************"
printf "* Checking u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.01E-05) ** 2 + error(nmssm_ext_uu2_39) ** 2)
printf "Expecting 3.5578949E-02"
show(integral(nmssm_ext_uu2_39))
real pull = abs (integral (nmssm_ext_uu2_39) - 3.5578949E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_39) == 3.5578949E-02)
printf "************************************************************************"
printf "* Checking u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.60E-06) ** 2 + error(nmssm_ext_uu2_40) ** 2)
printf "Expecting 5.7623756E-03"
show(integral(nmssm_ext_uu2_40))
real pull = abs (integral (nmssm_ext_uu2_40) - 5.7623756E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_40) == 5.7623756E-03)
printf "************************************************************************"
printf "* Checking u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.16E-04) ** 2 + error(nmssm_ext_uu2_41) ** 2)
printf "Expecting 7.6764068E-01"
show(integral(nmssm_ext_uu2_41))
real pull = abs (integral (nmssm_ext_uu2_41) - 7.6764068E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu3,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_41) == 7.6764068E-01)
printf "************************************************************************"
printf "* Checking u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.47E-05) ** 2 + error(nmssm_ext_uu2_42) ** 2)
printf "Expecting 2.5811051E-02"
show(integral(nmssm_ext_uu2_42))
real pull = abs (integral (nmssm_ext_uu2_42) - 2.5811051E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu3,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_42) == 2.5811051E-02)
printf "************************************************************************"
printf "* Checking u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.78E-06) ** 2 + error(nmssm_ext_uu2_43) ** 2)
printf "Expecting 8.5993279E-03"
show(integral(nmssm_ext_uu2_43))
real pull = abs (integral (nmssm_ext_uu2_43) - 8.5993279E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu3,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_43) == 8.5993279E-03)
printf "************************************************************************"
printf "* Checking u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.10E-07) ** 2 + error(nmssm_ext_uu2_44) ** 2)
printf "Expecting 8.1071844E-04"
show(integral(nmssm_ext_uu2_44))
real pull = abs (integral (nmssm_ext_uu2_44) - 8.1071844E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu4,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_44) == 8.1071844E-04)
printf "************************************************************************"
printf "* Checking u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.45E-04) ** 2 + error(nmssm_ext_uu2_45) ** 2)
printf "Expecting 6.9266636E-01"
show(integral(nmssm_ext_uu2_45))
real pull = abs (integral (nmssm_ext_uu2_45) - 6.9266636E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu4,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_45) == 6.9266636E-01)
printf "************************************************************************"
printf "* Checking u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.06E-08) ** 2 + error(nmssm_ext_uu2_46) ** 2)
printf "Expecting 1.9205888E-05"
show(integral(nmssm_ext_uu2_46))
real pull = abs (integral (nmssm_ext_uu2_46) - 1.9205888E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu5,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_46) == 1.9205888E-05)
printf "************************************************************************"
printf "* Checking u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.44E-03) ** 2 + error(nmssm_ext_uu2_47) ** 2)
printf "Expecting 2.1870334E+00"
show(integral(nmssm_ext_uu2_47))
real pull = abs (integral (nmssm_ext_uu2_47) - 2.1870334E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_47) == 2.1870334E+00)
printf "************************************************************************"
printf "* Checking u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.85E-04) ** 2 + error(nmssm_ext_uu2_48) ** 2)
printf "Expecting 9.7441659E-01"
show(integral(nmssm_ext_uu2_48))
real pull = abs (integral (nmssm_ext_uu2_48) - 9.7441659E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_48) == 9.7441659E-01)
printf "************************************************************************"
printf "* Checking u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.36E-05) ** 2 + error(nmssm_ext_uu2_49) ** 2)
printf "Expecting 1.0317157E-01"
show(integral(nmssm_ext_uu2_49))
real pull = abs (integral (nmssm_ext_uu2_49) - 1.0317157E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_49) == 1.0317157E-01)
printf "************************************************************************"
printf "* Checking u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.79E-01) ** 2 + error(nmssm_ext_uu2_50) ** 2)
printf "Expecting 3.4541427E+02"
show(integral(nmssm_ext_uu2_50))
real pull = abs (integral (nmssm_ext_uu2_50) - 3.4541427E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sgl,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_50) == 3.4541427E+02)
printf "************************************************************************"
printf "* Checking u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.51E-04) ** 2 + error(nmssm_ext_uu2_51) ** 2)
printf "Expecting 1.8150194E-01"
show(integral(nmssm_ext_uu2_51))
real pull = abs (integral (nmssm_ext_uu2_51) - 1.8150194E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,h01		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_51) == 1.8150194E-01)
printf "************************************************************************"
printf "* Checking u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.26E-06) ** 2 + error(nmssm_ext_uu2_52) ** 2)
printf "Expecting 3.8870524E-03"
show(integral(nmssm_ext_uu2_52))
real pull = abs (integral (nmssm_ext_uu2_52) - 3.8870524E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,h02		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_52) == 3.8870524E-03)
printf "************************************************************************"
printf "* Checking u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.75E-11) ** 2 + error(nmssm_ext_uu2_53) ** 2)
printf "Expecting 7.9075716E-08"
show(integral(nmssm_ext_uu2_53))
real pull = abs (integral (nmssm_ext_uu2_53) - 7.9075716E-08) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,h03		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_53) == 7.9075716E-08)
printf "************************************************************************"
printf "* Checking u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.08E-11) ** 2 + error(nmssm_ext_uu2_54) ** 2)
printf "Expecting 1.0577662E-07"
show(integral(nmssm_ext_uu2_54))
real pull = abs (integral (nmssm_ext_uu2_54) - 1.0577662E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_54) == 1.0577662E-07)
printf "************************************************************************"
printf "* Checking u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.55E-09) ** 2 + error(nmssm_ext_uu2_55) ** 2)
printf "Expecting 4.1616917E-06"
show(integral(nmssm_ext_uu2_55))
real pull = abs (integral (nmssm_ext_uu2_55) - 4.1616917E-06) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_55) == 4.1616917E-06)
printf "************************************************************************"
printf "* Checking u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.98E-07) ** 2 + error(nmssm_ext_uu2_56) ** 2)
printf "Expecting 1.0511429E-03"
show(integral(nmssm_ext_uu2_56))
real pull = abs (integral (nmssm_ext_uu2_56) - 1.0511429E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_56) == 1.0511429E-03)
printf "************************************************************************"
printf "* Checking u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-08) ** 2 + error(nmssm_ext_uu2_57) ** 2)
printf "Expecting 1.2072132E-05"
show(integral(nmssm_ext_uu2_57))
real pull = abs (integral (nmssm_ext_uu2_57) - 1.2072132E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A02,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_57) == 1.2072132E-05)
printf "************************************************************************"
printf "* Checking u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.10E-07) ** 2 + error(nmssm_ext_uu2_58) ** 2)
printf "Expecting 4.7454137E-04"
show(integral(nmssm_ext_uu2_58))
real pull = abs (integral (nmssm_ext_uu2_58) - 4.7454137E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_58) == 4.7454137E-04)
printf "************************************************************************"
printf "* Checking u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.80E-05) ** 2 + error(nmssm_ext_uu2_59) ** 2)
printf "Expecting 1.1354355E-01"
show(integral(nmssm_ext_uu2_59))
real pull = abs (integral (nmssm_ext_uu2_59) - 1.1354355E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => A02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_59) == 1.1354355E-01)
printf "************************************************************************"
printf "* Checking u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-04) ** 2 + error(nmssm_ext_uu2_60) ** 2)
printf "Expecting 1.6299905E-01"
show(integral(nmssm_ext_uu2_60))
real pull = abs (integral (nmssm_ext_uu2_60) - 1.6299905E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Hp,Hm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_uu2_60) == 1.6299905E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
