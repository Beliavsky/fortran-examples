

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-bb2.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -----------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                 -----
! -----------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -----------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
show(real)
! -----------------------------------------------------------------------
iterations = 3:200000
! -----------------------------------------------------------------------






































































! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_bb2_1 = b,B => n1,N1	      
process nmssm_ext_bb2_2 = b,B => n2,N2	      
process nmssm_ext_bb2_3 = b,B => n3,N3	      
process nmssm_ext_bb2_4 = b,B => t,T	      
process nmssm_ext_bb2_5 = b,B => Wp,Wm	      
process nmssm_ext_bb2_6 = b,B => Z,Z	      
process nmssm_ext_bb2_7 = b,B => se1,SE1      
process nmssm_ext_bb2_8 = b,B => se2,SE2      
process nmssm_ext_bb2_9 = b,B => smu1,SMU1    
process nmssm_ext_bb2_10 = b,B => smu2,SMU2    
process nmssm_ext_bb2_11 = b,B => stau1,STAU1  
process nmssm_ext_bb2_12 = b,B => stau2,STAU2  
process nmssm_ext_bb2_13 = b,B => stau1,STAU2  
process nmssm_ext_bb2_14 = b,B => sn11,SN11    
process nmssm_ext_bb2_15 = b,B => sn21,SN21    
process nmssm_ext_bb2_16 = b,B => sn31,SN31    
process nmssm_ext_bb2_17 = b,B => su1,su1c     
process nmssm_ext_bb2_18 = b,B => su2,su2c     
process nmssm_ext_bb2_19 = b,B => sc1,sc1c     
process nmssm_ext_bb2_20 = b,B => sc2,sc2c     
process nmssm_ext_bb2_21 = b,B => st1,st1c     
process nmssm_ext_bb2_22 = b,B => st2,st2c     
process nmssm_ext_bb2_23 = b,B => st1,st2c     
process nmssm_ext_bb2_24 = b,B => sd1,sd1c     
process nmssm_ext_bb2_25 = b,B => sd2,sd2c     
process nmssm_ext_bb2_26 = b,B => ss1,ss1c     
process nmssm_ext_bb2_27 = b,B => ss2,ss2c     
process nmssm_ext_bb2_28 = b,B => sb1,sb1c     
process nmssm_ext_bb2_29 = b,B => sb2,sb2c     
process nmssm_ext_bb2_30 = b,B => sb1,sb2c     
process nmssm_ext_bb2_31 = b,B => neu1,neu1    
process nmssm_ext_bb2_32 = b,B => neu1,neu2    
process nmssm_ext_bb2_33 = b,B => neu1,neu3    
process nmssm_ext_bb2_34 = b,B => neu1,neu4    
process nmssm_ext_bb2_35 = b,B => neu1,neu5    
process nmssm_ext_bb2_36 = b,B => neu2,neu2    
process nmssm_ext_bb2_37 = b,B => neu2,neu3    
process nmssm_ext_bb2_38 = b,B => neu2,neu4    
process nmssm_ext_bb2_39 = b,B => neu2,neu5    
process nmssm_ext_bb2_40 = b,B => neu3,neu3    
process nmssm_ext_bb2_41 = b,B => neu3,neu4    
process nmssm_ext_bb2_42 = b,B => neu3,neu5    
process nmssm_ext_bb2_43 = b,B => neu4,neu4    
process nmssm_ext_bb2_44 = b,B => neu4,neu5    
process nmssm_ext_bb2_45 = b,B => neu5,neu5    
process nmssm_ext_bb2_46 = b,B => "ch1+","ch1-"
process nmssm_ext_bb2_47 = b,B => "ch2+","ch2-"
process nmssm_ext_bb2_48 = b,B => "ch1+","ch2-"
process nmssm_ext_bb2_49 = b,B => sgl,sgl      
process nmssm_ext_bb2_50 = b,B => Z,h01        
process nmssm_ext_bb2_51 = b,B => Z,h02        
process nmssm_ext_bb2_52 = b,B => Z,h03        
process nmssm_ext_bb2_53 = b,B => A01,h01      
process nmssm_ext_bb2_54 = b,B => A01,h02      
process nmssm_ext_bb2_55 = b,B => A01,h03      
process nmssm_ext_bb2_56 = b,B => A02,h01      
process nmssm_ext_bb2_57 = b,B => A02,h02      
process nmssm_ext_bb2_58 = b,B => A02,h03      
process nmssm_ext_bb2_59 = b,B => Hp,Hm        
process nmssm_ext_bb2_60 = b,B => Z,A01        
process nmssm_ext_bb2_61 = b,B => Z,A02        
process nmssm_ext_bb2_62 = b,B => h01,h01      
process nmssm_ext_bb2_63 = b,B => h01,h02      
process nmssm_ext_bb2_64 = b,B => h01,h03      
process nmssm_ext_bb2_65 = b,B => h02,h02      
process nmssm_ext_bb2_66 = b,B => h02,h03      
process nmssm_ext_bb2_67 = b,B => h03,h03      
process nmssm_ext_bb2_68 = b,B => A01,A01      
process nmssm_ext_bb2_69 = b,B => A01,A02      
process nmssm_ext_bb2_70 = b,B => A02,A02      
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_1)
printf "************************************************************************"
printf "* Integrating b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_2)
printf "************************************************************************"
printf "* Integrating b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_3)
printf "************************************************************************"
printf "* Integrating b,B => t,T	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_4)
printf "************************************************************************"
printf "* Integrating b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_5)
printf "************************************************************************"
printf "* Integrating b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_6)
printf "************************************************************************"
printf "* Integrating b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_7)
printf "************************************************************************"
printf "* Integrating b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_8)
printf "************************************************************************"
printf "* Integrating b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_9)
printf "************************************************************************"
printf "* Integrating b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_10)
printf "************************************************************************"
printf "* Integrating b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_11)
printf "************************************************************************"
printf "* Integrating b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_12)
printf "************************************************************************"
printf "* Integrating b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_13)
printf "************************************************************************"
printf "* Integrating b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_14)
printf "************************************************************************"
printf "* Integrating b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_15)
printf "************************************************************************"
printf "* Integrating b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_16)
printf "************************************************************************"
printf "* Integrating b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_17)
printf "************************************************************************"
printf "* Integrating b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_18)
printf "************************************************************************"
printf "* Integrating b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_19)
printf "************************************************************************"
printf "* Integrating b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_20)
printf "************************************************************************"
printf "* Integrating b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_21)
printf "************************************************************************"
printf "* Integrating b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_22)
printf "************************************************************************"
printf "* Integrating b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_23)
printf "************************************************************************"
printf "* Integrating b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_24)
printf "************************************************************************"
printf "* Integrating b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_25)
printf "************************************************************************"
printf "* Integrating b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_26)
printf "************************************************************************"
printf "* Integrating b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_27)
printf "************************************************************************"
printf "* Integrating b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_28)
printf "************************************************************************"
printf "* Integrating b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_29)
printf "************************************************************************"
printf "* Integrating b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_30)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_31)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_32)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_33)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_34)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_35)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_36)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_37)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_38)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_39)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_40)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_41)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_42)
printf "************************************************************************"
printf "* Integrating b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_43)
printf "************************************************************************"
printf "* Integrating b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_44)
printf "************************************************************************"
printf "* Integrating b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_45)
printf "************************************************************************"
printf "* Integrating b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_46)
printf "************************************************************************"
printf "* Integrating b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_47)
printf "************************************************************************"
printf "* Integrating b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_48)
printf "************************************************************************"
printf "* Integrating b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_49)
printf "************************************************************************"
printf "* Integrating b,B => Z,h01         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_50)
printf "************************************************************************"
printf "* Integrating b,B => Z,h02         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_51)
printf "************************************************************************"
printf "* Integrating b,B => Z,h03         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_52)
printf "************************************************************************"
printf "* Integrating b,B => A01,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_53)
printf "************************************************************************"
printf "* Integrating b,B => A01,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_54)
printf "************************************************************************"
printf "* Integrating b,B => A01,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_55)
printf "************************************************************************"
printf "* Integrating b,B => A02,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_56)
printf "************************************************************************"
printf "* Integrating b,B => A02,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_57)
printf "************************************************************************"
printf "* Integrating b,B => A02,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_58)
printf "************************************************************************"
printf "* Integrating b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_59)
printf "************************************************************************"
printf "* Integrating b,B => Z,A01         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_60)
printf "************************************************************************"
printf "* Integrating b,B => Z,A02         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_61)
printf "************************************************************************"
printf "* Integrating b,B => h01,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_62)
printf "************************************************************************"
printf "* Integrating b,B => h01,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_63)
printf "************************************************************************"
printf "* Integrating b,B => h01,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_64)
printf "************************************************************************"
printf "* Integrating b,B => h02,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_65)
printf "************************************************************************"
printf "* Integrating b,B => h02,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_66)
printf "************************************************************************"
printf "* Integrating b,B => h03,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_67)
printf "************************************************************************"
printf "* Integrating b,B => A01,A01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_68)
printf "************************************************************************"
printf "* Integrating b,B => A01,A02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_69)
printf "************************************************************************"
printf "* Integrating b,B => A02,A02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb2_70)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.85E-04) ** 2 + error(nmssm_ext_bb2_1) ** 2)
printf "Expecting 4.7765207E-01"
show(integral(nmssm_ext_bb2_1))
real pull = abs (integral (nmssm_ext_bb2_1) - 4.7765207E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n1,N1	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_1) == 4.7765207E-01)
printf "************************************************************************"
printf "* Checking b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.86E-04) ** 2 + error(nmssm_ext_bb2_2) ** 2)
printf "Expecting 4.7749355E-01"
show(integral(nmssm_ext_bb2_2))
real pull = abs (integral (nmssm_ext_bb2_2) - 4.7749355E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n2,N2	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_2) == 4.7749355E-01)
printf "************************************************************************"
printf "* Checking b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.85E-04) ** 2 + error(nmssm_ext_bb2_3) ** 2)
printf "Expecting 4.7759490E-01"
show(integral(nmssm_ext_bb2_3))
real pull = abs (integral (nmssm_ext_bb2_3) - 4.7759490E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n3,N3	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_3) == 4.7759490E-01)
printf "************************************************************************"
printf "* Checking b,B => t,T	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.66E+01) ** 2 + error(nmssm_ext_bb2_4) ** 2)
printf "Expecting 5.3007275E+04"
show(integral(nmssm_ext_bb2_4))
real pull = abs (integral (nmssm_ext_bb2_4) - 5.3007275E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => t,T	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => t,T	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => t,T	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => t,T	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => t,T	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_4) == 5.3007275E+04)
printf "************************************************************************"
printf "* Checking b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.19E-01) ** 2 + error(nmssm_ext_bb2_5) ** 2)
printf "Expecting 1.5071085E+02"
show(integral(nmssm_ext_bb2_5))
real pull = abs (integral (nmssm_ext_bb2_5) - 1.5071085E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Wp,Wm	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_5) == 1.5071085E+02)
printf "************************************************************************"
printf "* Checking b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.52E-03) ** 2 + error(nmssm_ext_bb2_6) ** 2)
printf "Expecting 1.1978725E+01"
show(integral(nmssm_ext_bb2_6))
real pull = abs (integral (nmssm_ext_bb2_6) - 1.1978725E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,Z	       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_6) == 1.1978725E+01)
printf "************************************************************************"
printf "* Checking b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.86E-05) ** 2 + error(nmssm_ext_bb2_7) ** 2)
printf "Expecting 1.5979867E-01"
show(integral(nmssm_ext_bb2_7))
real pull = abs (integral (nmssm_ext_bb2_7) - 1.5979867E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => se1,SE1       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_7) == 1.5979867E-01)
printf "************************************************************************"
printf "* Checking b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.89E-05) ** 2 + error(nmssm_ext_bb2_8) ** 2)
printf "Expecting 3.8953888E-02"
show(integral(nmssm_ext_bb2_8))
real pull = abs (integral (nmssm_ext_bb2_8) - 3.8953888E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => se2,SE2       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_8) == 3.8953888E-02)
printf "************************************************************************"
printf "* Checking b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.89E-05) ** 2 + error(nmssm_ext_bb2_9) ** 2)
printf "Expecting 1.5981656E-01"
show(integral(nmssm_ext_bb2_9))
real pull = abs (integral (nmssm_ext_bb2_9) - 1.5981656E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => smu1,SMU1     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_9) == 1.5981656E-01)
printf "************************************************************************"
printf "* Checking b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.92E-05) ** 2 + error(nmssm_ext_bb2_10) ** 2)
printf "Expecting 3.8910119E-02"
show(integral(nmssm_ext_bb2_10))
real pull = abs (integral (nmssm_ext_bb2_10) - 3.8910119E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => smu2,SMU2     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_10) == 3.8910119E-02)
printf "************************************************************************"
printf "* Checking b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.94E-05) ** 2 + error(nmssm_ext_bb2_11) ** 2)
printf "Expecting 3.9434404E-02"
show(integral(nmssm_ext_bb2_11))
real pull = abs (integral (nmssm_ext_bb2_11) - 3.9434404E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau1,STAU1   @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_11) == 3.9434404E-02)
printf "************************************************************************"
printf "* Checking b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.03E-05) ** 2 + error(nmssm_ext_bb2_12) ** 2)
printf "Expecting 4.1068162E-02"
show(integral(nmssm_ext_bb2_12))
real pull = abs (integral (nmssm_ext_bb2_12) - 4.1068162E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau2,STAU2   @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_12) == 4.1068162E-02)
printf "************************************************************************"
printf "* Checking b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.92E-05) ** 2 + error(nmssm_ext_bb2_13) ** 2)
printf "Expecting 5.9068465E-02"
show(integral(nmssm_ext_bb2_13))
real pull = abs (integral (nmssm_ext_bb2_13) - 5.9068465E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau1,STAU2   @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_13) == 5.9068465E-02)
printf "************************************************************************"
printf "* Checking b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.15E-04) ** 2 + error(nmssm_ext_bb2_14) ** 2)
printf "Expecting 2.3699732E-01"
show(integral(nmssm_ext_bb2_14))
real pull = abs (integral (nmssm_ext_bb2_14) - 2.3699732E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn11,SN11     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_14) == 2.3699732E-01)
printf "************************************************************************"
printf "* Checking b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.16E-04) ** 2 + error(nmssm_ext_bb2_15) ** 2)
printf "Expecting 2.3660115E-01"
show(integral(nmssm_ext_bb2_15))
real pull = abs (integral (nmssm_ext_bb2_15) - 2.3660115E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn21,SN21     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_15) == 2.3660115E-01)
printf "************************************************************************"
printf "* Checking b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.17E-04) ** 2 + error(nmssm_ext_bb2_16) ** 2)
printf "Expecting 2.3662859E-01"
show(integral(nmssm_ext_bb2_16))
real pull = abs (integral (nmssm_ext_bb2_16) - 2.3662859E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn31,SN31     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_16) == 2.3662859E-01)
printf "************************************************************************"
printf "* Checking b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.25E-04) ** 2 + error(nmssm_ext_bb2_17) ** 2)
printf "Expecting 3.8403744E+01"
show(integral(nmssm_ext_bb2_17))
real pull = abs (integral (nmssm_ext_bb2_17) - 3.8403744E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => su1,su1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_17) == 3.8403744E+01)
printf "************************************************************************"
printf "* Checking b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-04) ** 2 + error(nmssm_ext_bb2_18) ** 2)
printf "Expecting 3.8024882E+01"
show(integral(nmssm_ext_bb2_18))
real pull = abs (integral (nmssm_ext_bb2_18) - 3.8024882E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => su2,su2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_18) == 3.8024882E+01)
printf "************************************************************************"
printf "* Checking b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.53E-02) ** 2 + error(nmssm_ext_bb2_19) ** 2)
printf "Expecting 3.8403366E+01"
show(integral(nmssm_ext_bb2_19))
real pull = abs (integral (nmssm_ext_bb2_19) - 3.8403366E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sc1,sc1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_19) == 3.8403366E+01)
printf "************************************************************************"
printf "* Checking b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-04) ** 2 + error(nmssm_ext_bb2_20) ** 2)
printf "Expecting 3.8025307E+01"
show(integral(nmssm_ext_bb2_20))
real pull = abs (integral (nmssm_ext_bb2_20) - 3.8025307E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sc2,sc2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_20) == 3.8025307E+01)
printf "************************************************************************"
printf "* Checking b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E-02) ** 2 + error(nmssm_ext_bb2_21) ** 2)
printf "Expecting 1.2576918E+02"
show(integral(nmssm_ext_bb2_21))
real pull = abs (integral (nmssm_ext_bb2_21) - 1.2576918E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st1,st1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_21) == 1.2576918E+02)
printf "************************************************************************"
printf "* Checking b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.51E-03) ** 2 + error(nmssm_ext_bb2_22) ** 2)
printf "Expecting 8.1485236E+01"
show(integral(nmssm_ext_bb2_22))
real pull = abs (integral (nmssm_ext_bb2_22) - 8.1485236E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st2,st2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_22) == 8.1485236E+01)
printf "************************************************************************"
printf "* Checking b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.17E-02) ** 2 + error(nmssm_ext_bb2_23) ** 2)
printf "Expecting 2.0233286E+01"
show(integral(nmssm_ext_bb2_23))
real pull = abs (integral (nmssm_ext_bb2_23) - 2.0233286E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st1,st2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_23) == 2.0233286E+01)
printf "************************************************************************"
printf "* Checking b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.53E-04) ** 2 + error(nmssm_ext_bb2_24) ** 2)
printf "Expecting 3.8421662E+01"
show(integral(nmssm_ext_bb2_24))
real pull = abs (integral (nmssm_ext_bb2_24) - 3.8421662E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sd1,sd1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_24) == 3.8421662E+01)
printf "************************************************************************"
printf "* Checking b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-04) ** 2 + error(nmssm_ext_bb2_25) ** 2)
printf "Expecting 3.7982339E+01"
show(integral(nmssm_ext_bb2_25))
real pull = abs (integral (nmssm_ext_bb2_25) - 3.7982339E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sd2,sd2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_25) == 3.7982339E+01)
printf "************************************************************************"
printf "* Checking b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.52E-04) ** 2 + error(nmssm_ext_bb2_26) ** 2)
printf "Expecting 3.8421769E+01"
show(integral(nmssm_ext_bb2_26))
real pull = abs (integral (nmssm_ext_bb2_26) - 3.8421769E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ss1,ss1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_26) == 3.8421769E+01)
printf "************************************************************************"
printf "* Checking b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.47E-04) ** 2 + error(nmssm_ext_bb2_27) ** 2)
printf "Expecting 3.7982339E+01"
show(integral(nmssm_ext_bb2_27))
real pull = abs (integral (nmssm_ext_bb2_27) - 3.7982339E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ss2,ss2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_27) == 3.7982339E+01)
printf "************************************************************************"
printf "* Checking b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.65E-02) ** 2 + error(nmssm_ext_bb2_28) ** 2)
printf "Expecting 2.8019022E+02"
show(integral(nmssm_ext_bb2_28))
real pull = abs (integral (nmssm_ext_bb2_28) - 2.8019022E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb1,sb1c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_28) == 2.8019022E+02)
printf "************************************************************************"
printf "* Checking b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E-02) ** 2 + error(nmssm_ext_bb2_29) ** 2)
printf "Expecting 2.7761095E+02"
show(integral(nmssm_ext_bb2_29))
real pull = abs (integral (nmssm_ext_bb2_29) - 2.7761095E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb2,sb2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_29) == 2.7761095E+02)
printf "************************************************************************"
printf "* Checking b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.51E-02) ** 2 + error(nmssm_ext_bb2_30) ** 2)
printf "Expecting 2.1167281E+02"
show(integral(nmssm_ext_bb2_30))
real pull = abs (integral (nmssm_ext_bb2_30) - 2.1167281E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb1,sb2c      @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_30) == 2.1167281E+02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.81E-06) ** 2 + error(nmssm_ext_bb2_31) ** 2)
printf "Expecting 2.0906104E-02"
show(integral(nmssm_ext_bb2_31))
real pull = abs (integral (nmssm_ext_bb2_31) - 2.0906104E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu1     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_31) == 2.0906104E-02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.93E-06) ** 2 + error(nmssm_ext_bb2_32) ** 2)
printf "Expecting 1.1688598E-02"
show(integral(nmssm_ext_bb2_32))
real pull = abs (integral (nmssm_ext_bb2_32) - 1.1688598E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu2     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_32) == 1.1688598E-02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.02E-05) ** 2 + error(nmssm_ext_bb2_33) ** 2)
printf "Expecting 1.2569256E-01"
show(integral(nmssm_ext_bb2_33))
real pull = abs (integral (nmssm_ext_bb2_33) - 1.2569256E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu3     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_33) == 1.2569256E-01)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.57E-06) ** 2 + error(nmssm_ext_bb2_34) ** 2)
printf "Expecting 6.2096698E-03"
show(integral(nmssm_ext_bb2_34))
real pull = abs (integral (nmssm_ext_bb2_34) - 6.2096698E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu4     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_34) == 6.2096698E-03)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.96E-06) ** 2 + error(nmssm_ext_bb2_35) ** 2)
printf "Expecting 1.7448150E-02"
show(integral(nmssm_ext_bb2_35))
real pull = abs (integral (nmssm_ext_bb2_35) - 1.7448150E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu5     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_35) == 1.7448150E-02)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.14E-06) ** 2 + error(nmssm_ext_bb2_36) ** 2)
printf "Expecting 8.4919673E-03"
show(integral(nmssm_ext_bb2_36))
real pull = abs (integral (nmssm_ext_bb2_36) - 8.4919673E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu2     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_36) == 8.4919673E-03)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.09E-05) ** 2 + error(nmssm_ext_bb2_37) ** 2)
printf "Expecting 6.6996609E-02"
show(integral(nmssm_ext_bb2_37))
real pull = abs (integral (nmssm_ext_bb2_37) - 6.6996609E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu3     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_37) == 6.6996609E-02)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-05) ** 2 + error(nmssm_ext_bb2_38) ** 2)
printf "Expecting 4.3768934E-02"
show(integral(nmssm_ext_bb2_38))
real pull = abs (integral (nmssm_ext_bb2_38) - 4.3768934E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu4     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_38) == 4.3768934E-02)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-05) ** 2 + error(nmssm_ext_bb2_39) ** 2)
printf "Expecting 4.0873055E-02"
show(integral(nmssm_ext_bb2_39))
real pull = abs (integral (nmssm_ext_bb2_39) - 4.0873055E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu5     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_39) == 4.0873055E-02)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.06E-04) ** 2 + error(nmssm_ext_bb2_40) ** 2)
printf "Expecting 6.4260693E-01"
show(integral(nmssm_ext_bb2_40))
real pull = abs (integral (nmssm_ext_bb2_40) - 6.4260693E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu3     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_40) == 6.4260693E-01)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.12E-05) ** 2 + error(nmssm_ext_bb2_41) ** 2)
printf "Expecting 9.9687798E-02"
show(integral(nmssm_ext_bb2_41))
real pull = abs (integral (nmssm_ext_bb2_41) - 9.9687798E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu4     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_41) == 9.9687798E-02)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-05) ** 2 + error(nmssm_ext_bb2_42) ** 2)
printf "Expecting 3.7698011E-02"
show(integral(nmssm_ext_bb2_42))
real pull = abs (integral (nmssm_ext_bb2_42) - 3.7698011E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu5     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_42) == 3.7698011E-02)
printf "************************************************************************"
printf "* Checking b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.56E-07) ** 2 + error(nmssm_ext_bb2_43) ** 2)
printf "Expecting 1.9844804E-03"
show(integral(nmssm_ext_bb2_43))
real pull = abs (integral (nmssm_ext_bb2_43) - 1.9844804E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu4,neu4     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_43) == 1.9844804E-03)
printf "************************************************************************"
printf "* Checking b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.39E-04) ** 2 + error(nmssm_ext_bb2_44) ** 2)
printf "Expecting 8.4493230E-01"
show(integral(nmssm_ext_bb2_44))
real pull = abs (integral (nmssm_ext_bb2_44) - 8.4493230E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu4,neu5     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_44) == 8.4493230E-01)
printf "************************************************************************"
printf "* Checking b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.29E-07) ** 2 + error(nmssm_ext_bb2_45) ** 2)
printf "Expecting 2.4990446E-03"
show(integral(nmssm_ext_bb2_45))
real pull = abs (integral (nmssm_ext_bb2_45) - 2.4990446E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu5,neu5     @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_45) == 2.4990446E-03)
printf "************************************************************************"
printf "* Checking b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.59E-03) ** 2 + error(nmssm_ext_bb2_46) ** 2)
printf "Expecting 2.4757316E+00"
show(integral(nmssm_ext_bb2_46))
real pull = abs (integral (nmssm_ext_bb2_46) - 2.4757316E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch1+,ch1- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_46) == 2.4757316E+00)
printf "************************************************************************"
printf "* Checking b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.22E-02) ** 2 + error(nmssm_ext_bb2_47) ** 2)
printf "Expecting 2.4105629E+01"
show(integral(nmssm_ext_bb2_47))
real pull = abs (integral (nmssm_ext_bb2_47) - 2.4105629E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch2+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_47) == 2.4105629E+01)
printf "************************************************************************"
printf "* Checking b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.34E-04) ** 2 + error(nmssm_ext_bb2_48) ** 2)
printf "Expecting 5.8246733E-01"
show(integral(nmssm_ext_bb2_48))
real pull = abs (integral (nmssm_ext_bb2_48) - 5.8246733E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch1+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_48) == 5.8246733E-01)
printf "************************************************************************"
printf "* Checking b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.68E-02) ** 2 + error(nmssm_ext_bb2_49) ** 2)
printf "Expecting 3.4542771E+02"
show(integral(nmssm_ext_bb2_49))
real pull = abs (integral (nmssm_ext_bb2_49) - 3.4542771E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sgl,sgl       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_49) == 3.4542771E+02)
printf "************************************************************************"
printf "* Checking b,B => Z,h01         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.46E-04) ** 2 + error(nmssm_ext_bb2_50) ** 2)
printf "Expecting 2.6781510E-01"
show(integral(nmssm_ext_bb2_50))
real pull = abs (integral (nmssm_ext_bb2_50) - 2.6781510E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h01         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h01         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h01         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h01         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h01         @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_50) == 2.6781510E-01)
printf "************************************************************************"
printf "* Checking b,B => Z,h02         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.91E-06) ** 2 + error(nmssm_ext_bb2_51) ** 2)
printf "Expecting 5.4636957E-03"
show(integral(nmssm_ext_bb2_51))
real pull = abs (integral (nmssm_ext_bb2_51) - 5.4636957E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h02         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h02         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h02         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h02         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h02         @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_51) == 5.4636957E-03)
printf "************************************************************************"
printf "* Checking b,B => Z,h03         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.33E-05) ** 2 + error(nmssm_ext_bb2_52) ** 2)
printf "Expecting 1.0978407E-01"
show(integral(nmssm_ext_bb2_52))
real pull = abs (integral (nmssm_ext_bb2_52) - 1.0978407E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h03         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h03         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h03         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h03         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h03         @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_52) == 1.0978407E-01)
printf "************************************************************************"
printf "* Checking b,B => A01,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.08E-07) ** 2 + error(nmssm_ext_bb2_53) ** 2)
printf "Expecting 9.0211307E-04"
show(integral(nmssm_ext_bb2_53))
real pull = abs (integral (nmssm_ext_bb2_53) - 9.0211307E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h01       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_53) == 9.0211307E-04)
printf "************************************************************************"
printf "* Checking b,B => A01,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.94E-08) ** 2 + error(nmssm_ext_bb2_54) ** 2)
printf "Expecting 9.7361647E-05"
show(integral(nmssm_ext_bb2_54))
real pull = abs (integral (nmssm_ext_bb2_54) - 9.7361647E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_54) == 9.7361647E-05)
printf "************************************************************************"
printf "* Checking b,B => A01,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.58E-06) ** 2 + error(nmssm_ext_bb2_55) ** 2)
printf "Expecting 1.4450248E-03"
show(integral(nmssm_ext_bb2_55))
real pull = abs (integral (nmssm_ext_bb2_55) - 1.4450248E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h03       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_55) == 1.4450248E-03)
printf "************************************************************************"
printf "* Checking b,B => A02,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.38E-07) ** 2 + error(nmssm_ext_bb2_56) ** 2)
printf "Expecting 3.9552475E-04"
show(integral(nmssm_ext_bb2_56))
real pull = abs (integral (nmssm_ext_bb2_56) - 3.9552475E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h01       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_56) == 3.9552475E-04)
printf "************************************************************************"
printf "* Checking b,B => A02,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.34E-06) ** 2 + error(nmssm_ext_bb2_57) ** 2)
printf "Expecting 2.4803214E-03"
show(integral(nmssm_ext_bb2_57))
real pull = abs (integral (nmssm_ext_bb2_57) - 2.4803214E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_57) == 2.4803214E-03)
printf "************************************************************************"
printf "* Checking b,B => A02,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.53E-04) ** 2 + error(nmssm_ext_bb2_58) ** 2)
printf "Expecting 1.3573632E-01"
show(integral(nmssm_ext_bb2_58))
real pull = abs (integral (nmssm_ext_bb2_58) - 1.3573632E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h03       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_58) == 1.3573632E-01)
printf "************************************************************************"
printf "* Checking b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.56E-03) ** 2 + error(nmssm_ext_bb2_59) ** 2)
printf "Expecting 3.1027993E+00"
show(integral(nmssm_ext_bb2_59))
real pull = abs (integral (nmssm_ext_bb2_59) - 3.1027993E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Hp,Hm         @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_bb2_59) == 3.1027993E+00)
printf "************************************************************************"
printf "* Checking b,B => Z,A01         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.93E-07) ** 2 + error(nmssm_ext_bb2_60) ** 2)
printf "Expecting 2.0097950E-03"
show(integral(nmssm_ext_bb2_60))
real pull = abs (integral (nmssm_ext_bb2_60) - 2.0097950E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,A01         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,A01         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,A01         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,A01         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,A01         @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_60) == 2.0097950E-03)
printf "************************************************************************"
printf "* Checking b,B => Z,A02         @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.29E-05) ** 2 + error(nmssm_ext_bb2_61) ** 2)
printf "Expecting 1.0928482E-01"
show(integral(nmssm_ext_bb2_61))
real pull = abs (integral (nmssm_ext_bb2_61) - 1.0928482E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,A02         @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,A02         @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,A02         @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,A02         @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,A02         @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_61) == 1.0928482E-01)
printf "************************************************************************"
printf "* Checking b,B => h01,h01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.02E-08) ** 2 + error(nmssm_ext_bb2_62) ** 2)
printf "Expecting 5.0737808E-05"
show(integral(nmssm_ext_bb2_62))
real pull = abs (integral (nmssm_ext_bb2_62) - 5.0737808E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h01       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h01       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_62) == 5.0737808E-05)
printf "************************************************************************"
printf "* Checking b,B => h01,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.65E-07) ** 2 + error(nmssm_ext_bb2_63) ** 2)
printf "Expecting 4.0581740E-04"
show(integral(nmssm_ext_bb2_63))
real pull = abs (integral (nmssm_ext_bb2_63) - 4.0581740E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_63) == 4.0581740E-04)
printf "************************************************************************"
printf "* Checking b,B => h01,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.14E-07) ** 2 + error(nmssm_ext_bb2_64) ** 2)
printf "Expecting 3.2958899E-04"
show(integral(nmssm_ext_bb2_64))
real pull = abs (integral (nmssm_ext_bb2_64) - 3.2958899E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h03       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_64) == 3.2958899E-04)
printf "************************************************************************"
printf "* Checking b,B => h02,h02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.68E-08) ** 2 + error(nmssm_ext_bb2_65) ** 2)
printf "Expecting 9.5993746E-05"
show(integral(nmssm_ext_bb2_65))
real pull = abs (integral (nmssm_ext_bb2_65) - 9.5993746E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h02,h02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h02,h02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_65) == 9.5993746E-05)
printf "************************************************************************"
printf "* Checking b,B => h02,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.68E-06) ** 2 + error(nmssm_ext_bb2_66) ** 2)
printf "Expecting 1.8444098E-03"
show(integral(nmssm_ext_bb2_66))
real pull = abs (integral (nmssm_ext_bb2_66) - 1.8444098E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h02,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h02,h03       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_66) == 1.8444098E-03)
printf "************************************************************************"
printf "* Checking b,B => h03,h03       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E-07) ** 2 + error(nmssm_ext_bb2_67) ** 2)
printf "Expecting 1.5150707E-04"
show(integral(nmssm_ext_bb2_67))
real pull = abs (integral (nmssm_ext_bb2_67) - 1.5150707E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h03,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h03,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h03,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h03,h03       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h03,h03       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_67) == 1.5150707E-04)
printf "************************************************************************"
printf "* Checking b,B => A01,A01       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.52E-10) ** 2 + error(nmssm_ext_bb2_68) ** 2)
printf "Expecting 4.8460825E-07"
show(integral(nmssm_ext_bb2_68))
real pull = abs (integral (nmssm_ext_bb2_68) - 4.8460825E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,A01       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,A01       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,A01       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,A01       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,A01       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_68) == 4.8460825E-07)
printf "************************************************************************"
printf "* Checking b,B => A01,A02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.72E-07) ** 2 + error(nmssm_ext_bb2_69) ** 2)
printf "Expecting 2.0853402E-04"
show(integral(nmssm_ext_bb2_69))
real pull = abs (integral (nmssm_ext_bb2_69) - 2.0853402E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,A02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_69) == 2.0853402E-04)
printf "************************************************************************"
printf "* Checking b,B => A02,A02       @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E-07) ** 2 + error(nmssm_ext_bb2_70) ** 2)
printf "Expecting 1.3506794E-04"
show(integral(nmssm_ext_bb2_70))
real pull = abs (integral (nmssm_ext_bb2_70) - 1.3506794E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,A02       @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,A02       @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb2_70) == 1.3506794E-04)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
