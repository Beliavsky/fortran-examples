

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-za.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------






















































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_za_1 = A,Z => t,T		
process nmssm_ext_za_2 = A,Z => Wp,Wm		
process nmssm_ext_za_3 = A,Z => se1,SE1	
process nmssm_ext_za_4 = A,Z => se2,SE2	
process nmssm_ext_za_5 = A,Z => smu1,SMU1	
process nmssm_ext_za_6 = A,Z => smu2,SMU2	
process nmssm_ext_za_7 = A,Z => stau1,STAU1	
process nmssm_ext_za_8 = A,Z => stau2,STAU2	
process nmssm_ext_za_9 = A,Z => stau1,STAU2	
process nmssm_ext_za_10 = A,Z => su1,su1c	
process nmssm_ext_za_11 = A,Z => su2,su2c	
process nmssm_ext_za_12 = A,Z => sc1,sc1c	
process nmssm_ext_za_13 = A,Z => sc2,sc2c	
process nmssm_ext_za_14 = A,Z => st1,st1c	
process nmssm_ext_za_15 = A,Z => st2,st2c	
process nmssm_ext_za_16 = A,Z => st1,st2c	
process nmssm_ext_za_17 = A,Z => sd1,sd1c	
process nmssm_ext_za_18 = A,Z => sd2,sd2c	
process nmssm_ext_za_19 = A,Z => ss1,ss1c	
process nmssm_ext_za_20 = A,Z => ss2,ss2c	
process nmssm_ext_za_21 = A,Z => sb1,sb1c	
process nmssm_ext_za_22 = A,Z => sb2,sb2c	
process nmssm_ext_za_23 = A,Z => sb1,sb2c	
process nmssm_ext_za_24 = A,Z => "ch1+","ch1-"	
process nmssm_ext_za_25 = A,Z => "ch1+","ch2-"	
process nmssm_ext_za_26 = A,Z => "ch2+","ch2-"	
process nmssm_ext_za_27 = A,Z => Hp,Hm		
process nmssm_ext_za_28 = A,Z => t,T		
process nmssm_ext_za_29 = A,Z => Wp,Wm		
process nmssm_ext_za_30 = A,Z => se1,SE1	
process nmssm_ext_za_31 = A,Z => se2,SE2	
process nmssm_ext_za_32 = A,Z => smu1,SMU1	
process nmssm_ext_za_33 = A,Z => smu2,SMU2	
process nmssm_ext_za_34 = A,Z => stau1,STAU1	
process nmssm_ext_za_35 = A,Z => stau2,STAU2	
process nmssm_ext_za_36 = A,Z => stau1,STAU2	
process nmssm_ext_za_37 = A,Z => su1,su1c	
process nmssm_ext_za_38 = A,Z => su2,su2c	
process nmssm_ext_za_39 = A,Z => sc1,sc1c	
process nmssm_ext_za_40 = A,Z => sc2,sc2c	
process nmssm_ext_za_41 = A,Z => st1,st1c	
process nmssm_ext_za_42 = A,Z => st2,st2c	
process nmssm_ext_za_43 = A,Z => st1,st2c	
process nmssm_ext_za_44 = A,Z => sd1,sd1c	
process nmssm_ext_za_45 = A,Z => sd2,sd2c	
process nmssm_ext_za_46 = A,Z => ss1,ss1c	
process nmssm_ext_za_47 = A,Z => ss2,ss2c	
process nmssm_ext_za_48 = A,Z => sb1,sb1c	
process nmssm_ext_za_49 = A,Z => sb2,sb2c	
process nmssm_ext_za_50 = A,Z => sb1,sb2c	
process nmssm_ext_za_51 = A,Z => "ch1+","ch1-"	
process nmssm_ext_za_52 = A,Z => "ch1+","ch2-"	
process nmssm_ext_za_53 = A,Z => "ch2+","ch2-"	
process nmssm_ext_za_54 = A,Z => Hp,Hm		
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating A,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_1)
printf "************************************************************************"
printf "* Integrating A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_2)
printf "************************************************************************"
printf "* Integrating A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_3)
printf "************************************************************************"
printf "* Integrating A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_4)
printf "************************************************************************"
printf "* Integrating A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_5)
printf "************************************************************************"
printf "* Integrating A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_6)
printf "************************************************************************"
printf "* Integrating A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_7)
printf "************************************************************************"
printf "* Integrating A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_8)
printf "************************************************************************"
printf "* Integrating A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_9)
printf "************************************************************************"
printf "* Integrating A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_10)
printf "************************************************************************"
printf "* Integrating A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_11)
printf "************************************************************************"
printf "* Integrating A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_12)
printf "************************************************************************"
printf "* Integrating A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_13)
printf "************************************************************************"
printf "* Integrating A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_14)
printf "************************************************************************"
printf "* Integrating A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_15)
printf "************************************************************************"
printf "* Integrating A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_16)
printf "************************************************************************"
printf "* Integrating A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_17)
printf "************************************************************************"
printf "* Integrating A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_18)
printf "************************************************************************"
printf "* Integrating A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_19)
printf "************************************************************************"
printf "* Integrating A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_20)
printf "************************************************************************"
printf "* Integrating A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_21)
printf "************************************************************************"
printf "* Integrating A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_22)
printf "************************************************************************"
printf "* Integrating A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_23)
printf "************************************************************************"
printf "* Integrating A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_24)
printf "************************************************************************"
printf "* Integrating A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_25)
printf "************************************************************************"
printf "* Integrating A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_26)
printf "************************************************************************"
printf "* Integrating A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_27)
printf "************************************************************************"
printf "* Integrating A,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_28)
printf "************************************************************************"
printf "* Integrating A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_29)
printf "************************************************************************"
printf "* Integrating A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_30)
printf "************************************************************************"
printf "* Integrating A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_31)
printf "************************************************************************"
printf "* Integrating A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_32)
printf "************************************************************************"
printf "* Integrating A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_33)
printf "************************************************************************"
printf "* Integrating A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_34)
printf "************************************************************************"
printf "* Integrating A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_35)
printf "************************************************************************"
printf "* Integrating A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_36)
printf "************************************************************************"
printf "* Integrating A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_37)
printf "************************************************************************"
printf "* Integrating A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_38)
printf "************************************************************************"
printf "* Integrating A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_39)
printf "************************************************************************"
printf "* Integrating A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_40)
printf "************************************************************************"
printf "* Integrating A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_41)
printf "************************************************************************"
printf "* Integrating A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_42)
printf "************************************************************************"
printf "* Integrating A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_43)
printf "************************************************************************"
printf "* Integrating A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_44)
printf "************************************************************************"
printf "* Integrating A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_45)
printf "************************************************************************"
printf "* Integrating A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_46)
printf "************************************************************************"
printf "* Integrating A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_47)
printf "************************************************************************"
printf "* Integrating A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_48)
printf "************************************************************************"
printf "* Integrating A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_49)
printf "************************************************************************"
printf "* Integrating A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_50)
printf "************************************************************************"
printf "* Integrating A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_51)
printf "************************************************************************"
printf "* Integrating A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_52)
printf "************************************************************************"
printf "* Integrating A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_53)
printf "************************************************************************"
printf "* Integrating A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = A,Z
seed = 0
integrate (nmssm_ext_za_54)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking A,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.62E-01) ** 2 + error(nmssm_ext_za_1) ** 2)
printf "Expecting 4.7148089E+02"
show(integral(nmssm_ext_za_1))
real pull = abs (integral (nmssm_ext_za_1) - 4.7148089E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_1) == 4.7148089E+02)
printf "************************************************************************"
printf "* Checking A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.30E+02) ** 2 + error(nmssm_ext_za_2) ** 2)
printf "Expecting 2.3815974E+05"
show(integral(nmssm_ext_za_2))
real pull = abs (integral (nmssm_ext_za_2) - 2.3815974E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_2) == 2.3815974E+05)
printf "************************************************************************"
printf "* Checking A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.99E-03) ** 2 + error(nmssm_ext_za_3) ** 2)
printf "Expecting 4.0288953E+00"
show(integral(nmssm_ext_za_3))
real pull = abs (integral (nmssm_ext_za_3) - 4.0288953E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_3) == 4.0288953E+00)
printf "************************************************************************"
printf "* Checking A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.63E-03) ** 2 + error(nmssm_ext_za_4) ** 2)
printf "Expecting 3.0902050E+00"
show(integral(nmssm_ext_za_4))
real pull = abs (integral (nmssm_ext_za_4) - 3.0902050E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_4) == 3.0902050E+00)
printf "************************************************************************"
printf "* Checking A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.04E-03) ** 2 + error(nmssm_ext_za_5) ** 2)
printf "Expecting 4.0221098E+00"
show(integral(nmssm_ext_za_5))
real pull = abs (integral (nmssm_ext_za_5) - 4.0221098E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_5) == 4.0221098E+00)
printf "************************************************************************"
printf "* Checking A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.57E-03) ** 2 + error(nmssm_ext_za_6) ** 2)
printf "Expecting 3.0939320E+00"
show(integral(nmssm_ext_za_6))
real pull = abs (integral (nmssm_ext_za_6) - 3.0939320E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_6) == 3.0939320E+00)
printf "************************************************************************"
printf "* Checking A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.42E-05) ** 2 + error(nmssm_ext_za_7) ** 2)
printf "Expecting 9.2711947E-03"
show(integral(nmssm_ext_za_7))
real pull = abs (integral (nmssm_ext_za_7) - 9.2711947E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_7) == 9.2711947E-03)
printf "************************************************************************"
printf "* Checking A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.30E-05) ** 2 + error(nmssm_ext_za_8) ** 2)
printf "Expecting 2.2349162E-02"
show(integral(nmssm_ext_za_8))
real pull = abs (integral (nmssm_ext_za_8) - 2.2349162E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_8) == 2.2349162E-02)
printf "************************************************************************"
printf "* Checking A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.31E-03) ** 2 + error(nmssm_ext_za_9) ** 2)
printf "Expecting 3.5742883E+00"
show(integral(nmssm_ext_za_9))
real pull = abs (integral (nmssm_ext_za_9) - 3.5742883E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_9) == 3.5742883E+00)
printf "************************************************************************"
printf "* Checking A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-03) ** 2 + error(nmssm_ext_za_10) ** 2)
printf "Expecting 3.9894974E+00"
show(integral(nmssm_ext_za_10))
real pull = abs (integral (nmssm_ext_za_10) - 3.9894974E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_10) == 3.9894974E+00)
printf "************************************************************************"
printf "* Checking A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.81E-04) ** 2 + error(nmssm_ext_za_11) ** 2)
printf "Expecting 8.1671773E-01"
show(integral(nmssm_ext_za_11))
real pull = abs (integral (nmssm_ext_za_11) - 8.1671773E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_11) == 8.1671773E-01)
printf "************************************************************************"
printf "* Checking A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-03) ** 2 + error(nmssm_ext_za_12) ** 2)
printf "Expecting 3.9905985E+00"
show(integral(nmssm_ext_za_12))
real pull = abs (integral (nmssm_ext_za_12) - 3.9905985E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_12) == 3.9905985E+00)
printf "************************************************************************"
printf "* Checking A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.91E-04) ** 2 + error(nmssm_ext_za_13) ** 2)
printf "Expecting 8.1688763E-01"
show(integral(nmssm_ext_za_13))
real pull = abs (integral (nmssm_ext_za_13) - 8.1688763E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_13) == 8.1688763E-01)
printf "************************************************************************"
printf "* Checking A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.86E-04) ** 2 + error(nmssm_ext_za_14) ** 2)
printf "Expecting 3.5578476E-01"
show(integral(nmssm_ext_za_14))
real pull = abs (integral (nmssm_ext_za_14) - 3.5578476E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_14) == 3.5578476E-01)
printf "************************************************************************"
printf "* Checking A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.06E-05) ** 2 + error(nmssm_ext_za_15) ** 2)
printf "Expecting 2.7587370E-01"
show(integral(nmssm_ext_za_15))
real pull = abs (integral (nmssm_ext_za_15) - 2.7587370E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_15) == 2.7587370E-01)
printf "************************************************************************"
printf "* Checking A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.86E-02) ** 2 + error(nmssm_ext_za_16) ** 2)
printf "Expecting 3.8472182E+01"
show(integral(nmssm_ext_za_16))
real pull = abs (integral (nmssm_ext_za_16) - 3.8472182E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_16) == 3.8472182E+01)
printf "************************************************************************"
printf "* Checking A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.08E-04) ** 2 + error(nmssm_ext_za_17) ** 2)
printf "Expecting 1.4995206E+00"
show(integral(nmssm_ext_za_17))
real pull = abs (integral (nmssm_ext_za_17) - 1.4995206E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_17) == 1.4995206E+00)
printf "************************************************************************"
printf "* Checking A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.77E-05) ** 2 + error(nmssm_ext_za_18) ** 2)
printf "Expecting 5.1052372E-02"
show(integral(nmssm_ext_za_18))
real pull = abs (integral (nmssm_ext_za_18) - 5.1052372E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_18) == 5.1052372E-02)
printf "************************************************************************"
printf "* Checking A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.89E-04) ** 2 + error(nmssm_ext_za_19) ** 2)
printf "Expecting 1.4988856E+00"
show(integral(nmssm_ext_za_19))
real pull = abs (integral (nmssm_ext_za_19) - 1.4988856E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_19) == 1.4988856E+00)
printf "************************************************************************"
printf "* Checking A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.71E-05) ** 2 + error(nmssm_ext_za_20) ** 2)
printf "Expecting 5.1062779E-02"
show(integral(nmssm_ext_za_20))
real pull = abs (integral (nmssm_ext_za_20) - 5.1062779E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_20) == 5.1062779E-02)
printf "************************************************************************"
printf "* Checking A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.37E-05) ** 2 + error(nmssm_ext_za_21) ** 2)
printf "Expecting 1.8633006E-01"
show(integral(nmssm_ext_za_21))
real pull = abs (integral (nmssm_ext_za_21) - 1.8633006E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_21) == 1.8633006E-01)
printf "************************************************************************"
printf "* Checking A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.09E-04) ** 2 + error(nmssm_ext_za_22) ** 2)
printf "Expecting 3.2120074E-01"
show(integral(nmssm_ext_za_22))
real pull = abs (integral (nmssm_ext_za_22) - 3.2120074E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_22) == 3.2120074E-01)
printf "************************************************************************"
printf "* Checking A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.76E-04) ** 2 + error(nmssm_ext_za_23) ** 2)
printf "Expecting 5.2511465E-01"
show(integral(nmssm_ext_za_23))
real pull = abs (integral (nmssm_ext_za_23) - 5.2511465E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_23) == 5.2511465E-01)
printf "************************************************************************"
printf "* Checking A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.87E-02) ** 2 + error(nmssm_ext_za_24) ** 2)
printf "Expecting 3.7103808E+02"
show(integral(nmssm_ext_za_24))
real pull = abs (integral (nmssm_ext_za_24) - 3.7103808E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_24) == 3.7103808E+02)
printf "************************************************************************"
printf "* Checking A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.19E-02) ** 2 + error(nmssm_ext_za_25) ** 2)
printf "Expecting 5.6722565E+01"
show(integral(nmssm_ext_za_25))
real pull = abs (integral (nmssm_ext_za_25) - 5.6722565E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_25) == 5.6722565E+01)
printf "************************************************************************"
printf "* Checking A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.79E-03) ** 2 + error(nmssm_ext_za_26) ** 2)
printf "Expecting 2.8241363E+01"
show(integral(nmssm_ext_za_26))
real pull = abs (integral (nmssm_ext_za_26) - 2.8241363E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_26) == 2.8241363E+01)
printf "************************************************************************"
printf "* Checking A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-04) ** 2 + error(nmssm_ext_za_27) ** 2)
printf "Expecting 1.5728086E+00"
show(integral(nmssm_ext_za_27))
real pull = abs (integral (nmssm_ext_za_27) - 1.5728086E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => Hp,Hm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_27) == 1.5728086E+00)
printf "************************************************************************"
printf "* Checking A,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.20E-02) ** 2 + error(nmssm_ext_za_28) ** 2)
printf "Expecting 2.0106882E+02"
show(integral(nmssm_ext_za_28))
real pull = abs (integral (nmssm_ext_za_28) - 2.0106882E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_28) == 2.0106882E+02)
printf "************************************************************************"
printf "* Checking A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.17E+02) ** 2 + error(nmssm_ext_za_29) ** 2)
printf "Expecting 2.3891931E+05"
show(integral(nmssm_ext_za_29))
real pull = abs (integral (nmssm_ext_za_29) - 2.3891931E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => Wp,Wm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_29) == 2.3891931E+05)
printf "************************************************************************"
printf "* Checking A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.44E-03) ** 2 + error(nmssm_ext_za_30) ** 2)
printf "Expecting 1.5236563E+00"
show(integral(nmssm_ext_za_30))
real pull = abs (integral (nmssm_ext_za_30) - 1.5236563E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_30) == 1.5236563E+00)
printf "************************************************************************"
printf "* Checking A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-03) ** 2 + error(nmssm_ext_za_31) ** 2)
printf "Expecting 1.1724302E+00"
show(integral(nmssm_ext_za_31))
real pull = abs (integral (nmssm_ext_za_31) - 1.1724302E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_31) == 1.1724302E+00)
printf "************************************************************************"
printf "* Checking A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.44E-03) ** 2 + error(nmssm_ext_za_32) ** 2)
printf "Expecting 1.5207938E+00"
show(integral(nmssm_ext_za_32))
real pull = abs (integral (nmssm_ext_za_32) - 1.5207938E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_32) == 1.5207938E+00)
printf "************************************************************************"
printf "* Checking A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-03) ** 2 + error(nmssm_ext_za_33) ** 2)
printf "Expecting 1.1714825E+00"
show(integral(nmssm_ext_za_33))
real pull = abs (integral (nmssm_ext_za_33) - 1.1714825E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_33) == 1.1714825E+00)
printf "************************************************************************"
printf "* Checking A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.35E-06) ** 2 + error(nmssm_ext_za_34) ** 2)
printf "Expecting 3.4901967E-03"
show(integral(nmssm_ext_za_34))
real pull = abs (integral (nmssm_ext_za_34) - 3.4901967E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_34) == 3.4901967E-03)
printf "************************************************************************"
printf "* Checking A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.06E-06) ** 2 + error(nmssm_ext_za_35) ** 2)
printf "Expecting 8.5176294E-03"
show(integral(nmssm_ext_za_35))
real pull = abs (integral (nmssm_ext_za_35) - 8.5176294E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_35) == 8.5176294E-03)
printf "************************************************************************"
printf "* Checking A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.25E-03) ** 2 + error(nmssm_ext_za_36) ** 2)
printf "Expecting 1.3465546E+00"
show(integral(nmssm_ext_za_36))
real pull = abs (integral (nmssm_ext_za_36) - 1.3465546E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_36) == 1.3465546E+00)
printf "************************************************************************"
printf "* Checking A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.74E-04) ** 2 + error(nmssm_ext_za_37) ** 2)
printf "Expecting 2.0959712E+00"
show(integral(nmssm_ext_za_37))
real pull = abs (integral (nmssm_ext_za_37) - 2.0959712E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_37) == 2.0959712E+00)
printf "************************************************************************"
printf "* Checking A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.97E-04) ** 2 + error(nmssm_ext_za_38) ** 2)
printf "Expecting 4.2917180E-01"
show(integral(nmssm_ext_za_38))
real pull = abs (integral (nmssm_ext_za_38) - 4.2917180E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_38) == 4.2917180E-01)
printf "************************************************************************"
printf "* Checking A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.56E-04) ** 2 + error(nmssm_ext_za_39) ** 2)
printf "Expecting 2.0982522E+00"
show(integral(nmssm_ext_za_39))
real pull = abs (integral (nmssm_ext_za_39) - 2.0982522E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_39) == 2.0982522E+00)
printf "************************************************************************"
printf "* Checking A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.97E-04) ** 2 + error(nmssm_ext_za_40) ** 2)
printf "Expecting 4.2898610E-01"
show(integral(nmssm_ext_za_40))
real pull = abs (integral (nmssm_ext_za_40) - 4.2898610E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_40) == 4.2898610E-01)
printf "************************************************************************"
printf "* Checking A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.09E-04) ** 2 + error(nmssm_ext_za_41) ** 2)
printf "Expecting 1.8461567E-01"
show(integral(nmssm_ext_za_41))
real pull = abs (integral (nmssm_ext_za_41) - 1.8461567E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_41) == 1.8461567E-01)
printf "************************************************************************"
printf "* Checking A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.86E-05) ** 2 + error(nmssm_ext_za_42) ** 2)
printf "Expecting 1.3603745E-01"
show(integral(nmssm_ext_za_42))
real pull = abs (integral (nmssm_ext_za_42) - 1.3603745E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_42) == 1.3603745E-01)
printf "************************************************************************"
printf "* Checking A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.64E-03) ** 2 + error(nmssm_ext_za_43) ** 2)
printf "Expecting 1.3518376E+01"
show(integral(nmssm_ext_za_43))
real pull = abs (integral (nmssm_ext_za_43) - 1.3518376E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_43) == 1.3518376E+01)
printf "************************************************************************"
printf "* Checking A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.62E-04) ** 2 + error(nmssm_ext_za_44) ** 2)
printf "Expecting 7.8737267E-01"
show(integral(nmssm_ext_za_44))
real pull = abs (integral (nmssm_ext_za_44) - 7.8737267E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_44) == 7.8737267E-01)
printf "************************************************************************"
printf "* Checking A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.24E-05) ** 2 + error(nmssm_ext_za_45) ** 2)
printf "Expecting 2.6811458E-02"
show(integral(nmssm_ext_za_45))
real pull = abs (integral (nmssm_ext_za_45) - 2.6811458E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_45) == 2.6811458E-02)
printf "************************************************************************"
printf "* Checking A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.63E-04) ** 2 + error(nmssm_ext_za_46) ** 2)
printf "Expecting 7.8722473E-01"
show(integral(nmssm_ext_za_46))
real pull = abs (integral (nmssm_ext_za_46) - 7.8722473E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_46) == 7.8722473E-01)
printf "************************************************************************"
printf "* Checking A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.24E-05) ** 2 + error(nmssm_ext_za_47) ** 2)
printf "Expecting 2.6806936E-02"
show(integral(nmssm_ext_za_47))
real pull = abs (integral (nmssm_ext_za_47) - 2.6806936E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_47) == 2.6806936E-02)
printf "************************************************************************"
printf "* Checking A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.47E-05) ** 2 + error(nmssm_ext_za_48) ** 2)
printf "Expecting 9.7963012E-02"
show(integral(nmssm_ext_za_48))
real pull = abs (integral (nmssm_ext_za_48) - 9.7963012E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_48) == 9.7963012E-02)
printf "************************************************************************"
printf "* Checking A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.61E-05) ** 2 + error(nmssm_ext_za_49) ** 2)
printf "Expecting 1.6855604E-01"
show(integral(nmssm_ext_za_49))
real pull = abs (integral (nmssm_ext_za_49) - 1.6855604E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_49) == 1.6855604E-01)
printf "************************************************************************"
printf "* Checking A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.26E-04) ** 2 + error(nmssm_ext_za_50) ** 2)
printf "Expecting 2.7516986E-01"
show(integral(nmssm_ext_za_50))
real pull = abs (integral (nmssm_ext_za_50) - 2.7516986E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_50) == 2.7516986E-01)
printf "************************************************************************"
printf "* Checking A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.48E-02) ** 2 + error(nmssm_ext_za_51) ** 2)
printf "Expecting 1.5833221E+02"
show(integral(nmssm_ext_za_51))
real pull = abs (integral (nmssm_ext_za_51) - 1.5833221E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_51) == 1.5833221E+02)
printf "************************************************************************"
printf "* Checking A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.81E-03) ** 2 + error(nmssm_ext_za_52) ** 2)
printf "Expecting 2.6033927E+01"
show(integral(nmssm_ext_za_52))
real pull = abs (integral (nmssm_ext_za_52) - 2.6033927E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_52) == 2.6033927E+01)
printf "************************************************************************"
printf "* Checking A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.00E-03) ** 2 + error(nmssm_ext_za_53) ** 2)
printf "Expecting 1.3523317E+01"
show(integral(nmssm_ext_za_53))
real pull = abs (integral (nmssm_ext_za_53) - 1.3523317E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_53) == 1.3523317E+01)
printf "************************************************************************"
printf "* Checking A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.48E-04) ** 2 + error(nmssm_ext_za_54) ** 2)
printf "Expecting 7.7371343E-01"
show(integral(nmssm_ext_za_54))
real pull = abs (integral (nmssm_ext_za_54) - 7.7371343E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,Z => Hp,Hm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_za_54) == 7.7371343E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
