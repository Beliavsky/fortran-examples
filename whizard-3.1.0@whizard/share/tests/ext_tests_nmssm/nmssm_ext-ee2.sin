

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-ee.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------



























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_ee2_1 = e1,E1 => n1,N1	
process nmssm_ext_ee2_2 = e1,E1 => n2,N2	
process nmssm_ext_ee2_3 = e1,E1 => n3,N3	
process nmssm_ext_ee2_4 = e1,E1 => t,T		
process nmssm_ext_ee2_5 = e1,E1 => Wp,Wm	
process nmssm_ext_ee2_6 = e1,E1 => Z,Z		
process nmssm_ext_ee2_7 = e1,E1 => se1,SE1	
process nmssm_ext_ee2_8 = e1,E1 => se2,SE2	
process nmssm_ext_ee2_9 = e1,E1 => se1,SE2	
process nmssm_ext_ee2_10 = e1,E1 => smu1,SMU1	
process nmssm_ext_ee2_11 = e1,E1 => smu2,SMU2	
process nmssm_ext_ee2_12 = e1,E1 => stau1,STAU1	
process nmssm_ext_ee2_13 = e1,E1 => stau2,STAU2	
process nmssm_ext_ee2_14 = e1,E1 => stau1,STAU2	
process nmssm_ext_ee2_15 = e1,E1 => sn11,SN11	
process nmssm_ext_ee2_16 = e1,E1 => sn21,SN21	
process nmssm_ext_ee2_17 = e1,E1 => sn31,SN31	
process nmssm_ext_ee2_18 = e1,E1 => sc2,sc2c	
process nmssm_ext_ee2_19 = e1,E1 => sc1,sc1c	
process nmssm_ext_ee2_20 = e1,E1 => su2,su2c	
process nmssm_ext_ee2_21 = e1,E1 => su1,su1c	
process nmssm_ext_ee2_22 = e1,E1 => st1,st1c	
process nmssm_ext_ee2_23 = e1,E1 => st2,st2c	
process nmssm_ext_ee2_24 = e1,E1 => st1,st2c	
process nmssm_ext_ee2_25 = e1,E1 => sd1,sd1c	
process nmssm_ext_ee2_26 = e1,E1 => ss1,ss1c	
process nmssm_ext_ee2_27 = e1,E1 => sb2,sb2c	
process nmssm_ext_ee2_28 = e1,E1 => ss2,ss2c	
process nmssm_ext_ee2_29 = e1,E1 => sb1,sb1c	
process nmssm_ext_ee2_30 = e1,E1 => sd2,sd2c	
process nmssm_ext_ee2_31 = e1,E1 => sb1,sb2c	
process nmssm_ext_ee2_32 = e1,E1 => neu1,neu1	
process nmssm_ext_ee2_33 = e1,E1 => neu1,neu2	
process nmssm_ext_ee2_34 = e1,E1 => neu1,neu3	
process nmssm_ext_ee2_35 = e1,E1 => neu1,neu4	
process nmssm_ext_ee2_36 = e1,E1 => neu1,neu5	
process nmssm_ext_ee2_37 = e1,E1 => neu2,neu2	
process nmssm_ext_ee2_38 = e1,E1 => neu2,neu3	
process nmssm_ext_ee2_39 = e1,E1 => neu2,neu4	
process nmssm_ext_ee2_40 = e1,E1 => neu2,neu5	
process nmssm_ext_ee2_41 = e1,E1 => neu3,neu3	
process nmssm_ext_ee2_42 = e1,E1 => neu3,neu4	
process nmssm_ext_ee2_43 = e1,E1 => neu3,neu5	
process nmssm_ext_ee2_44 = e1,E1 => neu4,neu4	
process nmssm_ext_ee2_45 = e1,E1 => neu4,neu5	
process nmssm_ext_ee2_46 = e1,E1 => neu5,neu5	
process nmssm_ext_ee2_47 = e1,E1 => "ch1+","ch1-"
process nmssm_ext_ee2_48 = e1,E1 => "ch2+","ch2-"
process nmssm_ext_ee2_49 = e1,E1 => "ch1+","ch2-"
process nmssm_ext_ee2_50 = e1,E1 => Z,h01	
process nmssm_ext_ee2_51 = e1,E1 => Z,h02	
process nmssm_ext_ee2_52 = e1,E1 => Z,h03	
process nmssm_ext_ee2_53 = e1,E1 => A01,h01	
process nmssm_ext_ee2_54 = e1,E1 => A01,h02	
process nmssm_ext_ee2_55 = e1,E1 => A01,h03	
process nmssm_ext_ee2_56 = e1,E1 => A02,h01	
process nmssm_ext_ee2_57 = e1,E1 => A02,h02	
process nmssm_ext_ee2_58 = e1,E1 => A02,h03	
process nmssm_ext_ee2_59 = e1,E1 => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_1)
printf "************************************************************************"
printf "* Integrating e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_2)
printf "************************************************************************"
printf "* Integrating e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_3)
printf "************************************************************************"
printf "* Integrating e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_4)
printf "************************************************************************"
printf "* Integrating e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_5)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_6)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_7)
printf "************************************************************************"
printf "* Integrating e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_8)
printf "************************************************************************"
printf "* Integrating e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_9)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_10)
printf "************************************************************************"
printf "* Integrating e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_11)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_12)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_13)
printf "************************************************************************"
printf "* Integrating e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_14)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_15)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_16)
printf "************************************************************************"
printf "* Integrating e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_17)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_18)
printf "************************************************************************"
printf "* Integrating e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_19)
printf "************************************************************************"
printf "* Integrating e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_20)
printf "************************************************************************"
printf "* Integrating e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_21)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_22)
printf "************************************************************************"
printf "* Integrating e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_23)
printf "************************************************************************"
printf "* Integrating e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_24)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_25)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_26)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_27)
printf "************************************************************************"
printf "* Integrating e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_28)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_29)
printf "************************************************************************"
printf "* Integrating e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_30)
printf "************************************************************************"
printf "* Integrating e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_31)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_32)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_33)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_34)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_35)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_36)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_37)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_38)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_39)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_40)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_41)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_42)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_43)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_44)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_45)
printf "************************************************************************"
printf "* Integrating e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_46)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_47)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_48)
printf "************************************************************************"
printf "* Integrating e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_49)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_50)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_51)
printf "************************************************************************"
printf "* Integrating e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_52)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_53)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_54)
printf "************************************************************************"
printf "* Integrating e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_55)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_56)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_57)
printf "************************************************************************"
printf "* Integrating e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_58)
printf "************************************************************************"
printf "* Integrating e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,E1
seed = 0
integrate (nmssm_ext_ee2_59)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.50E+01) ** 2 + error(nmssm_ext_ee2_1) ** 2)
printf "Expecting 5.3542631E+04"
show(integral(nmssm_ext_ee2_1))
real pull = abs (integral (nmssm_ext_ee2_1) - 5.3542631E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n1,N1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_1) == 5.3542631E+04)
printf "************************************************************************"
printf "* Checking e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.23E-05) ** 2 + error(nmssm_ext_ee2_2) ** 2)
printf "Expecting 9.7653103E-01"
show(integral(nmssm_ext_ee2_2))
real pull = abs (integral (nmssm_ext_ee2_2) - 9.7653103E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n2,N2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_2) == 9.7653103E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.36E-05) ** 2 + error(nmssm_ext_ee2_3) ** 2)
printf "Expecting 9.7635885E-01"
show(integral(nmssm_ext_ee2_3))
real pull = abs (integral (nmssm_ext_ee2_3) - 9.7635885E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => n3,N3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_3) == 9.7635885E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.61E-03) ** 2 + error(nmssm_ext_ee2_4) ** 2)
printf "Expecting 7.1159051E+00"
show(integral(nmssm_ext_ee2_4))
real pull = abs (integral (nmssm_ext_ee2_4) - 7.1159051E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_4) == 7.1159051E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.68E-01) ** 2 + error(nmssm_ext_ee2_5) ** 2)
printf "Expecting 1.9122473E+02"
show(integral(nmssm_ext_ee2_5))
real pull = abs (integral (nmssm_ext_ee2_5) - 1.9122473E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Wp,Wm	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_5) == 1.9122473E+02)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.32E-03) ** 2 + error(nmssm_ext_ee2_6) ** 2)
printf "Expecting 1.0478015E+01"
show(integral(nmssm_ext_ee2_6))
real pull = abs (integral (nmssm_ext_ee2_6) - 1.0478015E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,Z		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_6) == 1.0478015E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.57E-02) ** 2 + error(nmssm_ext_ee2_7) ** 2)
printf "Expecting 2.7041505E+01"
show(integral(nmssm_ext_ee2_7))
real pull = abs (integral (nmssm_ext_ee2_7) - 2.7041505E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_7) == 2.7041505E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.06E-02) ** 2 + error(nmssm_ext_ee2_8) ** 2)
printf "Expecting 2.9977109E+01"
show(integral(nmssm_ext_ee2_8))
real pull = abs (integral (nmssm_ext_ee2_8) - 2.9977109E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_8) == 2.9977109E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.06E-03) ** 2 + error(nmssm_ext_ee2_9) ** 2)
printf "Expecting 1.2502181E+00"
show(integral(nmssm_ext_ee2_9))
real pull = abs (integral (nmssm_ext_ee2_9) - 1.2502181E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => se1,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_9) == 1.2502181E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.82E-04) ** 2 + error(nmssm_ext_ee2_10) ** 2)
printf "Expecting 1.1715446E+00"
show(integral(nmssm_ext_ee2_10))
real pull = abs (integral (nmssm_ext_ee2_10) - 1.1715446E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_10) == 1.1715446E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.15E-04) ** 2 + error(nmssm_ext_ee2_11) ** 2)
printf "Expecting 1.0504992E+00"
show(integral(nmssm_ext_ee2_11))
real pull = abs (integral (nmssm_ext_ee2_11) - 1.0504992E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_11) == 1.0504992E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.83E-04) ** 2 + error(nmssm_ext_ee2_12) ** 2)
printf "Expecting 9.9168895E-01"
show(integral(nmssm_ext_ee2_12))
real pull = abs (integral (nmssm_ext_ee2_12) - 9.9168895E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_12) == 9.9168895E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.88E-04) ** 2 + error(nmssm_ext_ee2_13) ** 2)
printf "Expecting 9.8981565E-01"
show(integral(nmssm_ext_ee2_13))
real pull = abs (integral (nmssm_ext_ee2_13) - 9.8981565E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_13) == 9.8981565E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.00E-05) ** 2 + error(nmssm_ext_ee2_14) ** 2)
printf "Expecting 1.2073167E-01"
show(integral(nmssm_ext_ee2_14))
real pull = abs (integral (nmssm_ext_ee2_14) - 1.2073167E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_14) == 1.2073167E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.87E-02) ** 2 + error(nmssm_ext_ee2_15) ** 2)
printf "Expecting 7.6639759E+01"
show(integral(nmssm_ext_ee2_15))
real pull = abs (integral (nmssm_ext_ee2_15) - 7.6639759E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn11,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_15) == 7.6639759E+01)
printf "************************************************************************"
printf "* Checking e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.38E-04) ** 2 + error(nmssm_ext_ee2_16) ** 2)
printf "Expecting 4.8370603E-01"
show(integral(nmssm_ext_ee2_16))
real pull = abs (integral (nmssm_ext_ee2_16) - 4.8370603E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn21,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_16) == 4.8370603E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.38E-04) ** 2 + error(nmssm_ext_ee2_17) ** 2)
printf "Expecting 4.8377582E-01"
show(integral(nmssm_ext_ee2_17))
real pull = abs (integral (nmssm_ext_ee2_17) - 4.8377582E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sn31,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_17) == 4.8377582E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.27E-04) ** 2 + error(nmssm_ext_ee2_18) ** 2)
printf "Expecting 1.0799307E+00"
show(integral(nmssm_ext_ee2_18))
real pull = abs (integral (nmssm_ext_ee2_18) - 1.0799307E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_18) == 1.0799307E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.16E-04) ** 2 + error(nmssm_ext_ee2_19) ** 2)
printf "Expecting 1.6385992E+00"
show(integral(nmssm_ext_ee2_19))
real pull = abs (integral (nmssm_ext_ee2_19) - 1.6385992E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_19) == 1.6385992E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.28E-04) ** 2 + error(nmssm_ext_ee2_20) ** 2)
printf "Expecting 1.0794030E+00"
show(integral(nmssm_ext_ee2_20))
real pull = abs (integral (nmssm_ext_ee2_20) - 1.0794030E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_20) == 1.0794030E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.07E-04) ** 2 + error(nmssm_ext_ee2_21) ** 2)
printf "Expecting 1.6399474E+00"
show(integral(nmssm_ext_ee2_21))
real pull = abs (integral (nmssm_ext_ee2_21) - 1.6399474E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_21) == 1.6399474E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.97E-04) ** 2 + error(nmssm_ext_ee2_22) ** 2)
printf "Expecting 1.2051313E+00"
show(integral(nmssm_ext_ee2_22))
real pull = abs (integral (nmssm_ext_ee2_22) - 1.2051313E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_22) == 1.2051313E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.63E-04) ** 2 + error(nmssm_ext_ee2_23) ** 2)
printf "Expecting 9.4604008E-01"
show(integral(nmssm_ext_ee2_23))
real pull = abs (integral (nmssm_ext_ee2_23) - 9.4604008E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_23) == 9.4604008E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-04) ** 2 + error(nmssm_ext_ee2_24) ** 2)
printf "Expecting 2.7850741E-01"
show(integral(nmssm_ext_ee2_24))
real pull = abs (integral (nmssm_ext_ee2_24) - 2.7850741E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_24) == 2.7850741E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.48E-04) ** 2 + error(nmssm_ext_ee2_25) ** 2)
printf "Expecting 1.1071735E+00"
show(integral(nmssm_ext_ee2_25))
real pull = abs (integral (nmssm_ext_ee2_25) - 1.1071735E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_25) == 1.1071735E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.48E-04) ** 2 + error(nmssm_ext_ee2_26) ** 2)
printf "Expecting 1.1073977E+00"
show(integral(nmssm_ext_ee2_26))
real pull = abs (integral (nmssm_ext_ee2_26) - 1.1073977E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_26) == 1.1073977E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.18E-04) ** 2 + error(nmssm_ext_ee2_27) ** 2)
printf "Expecting 4.5086848E-01"
show(integral(nmssm_ext_ee2_27))
real pull = abs (integral (nmssm_ext_ee2_27) - 4.5086848E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_27) == 4.5086848E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-04) ** 2 + error(nmssm_ext_ee2_28) ** 2)
printf "Expecting 2.6945558E-01"
show(integral(nmssm_ext_ee2_28))
real pull = abs (integral (nmssm_ext_ee2_28) - 2.6945558E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_28) == 2.6945558E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.85E-04) ** 2 + error(nmssm_ext_ee2_29) ** 2)
printf "Expecting 3.7348139E-01"
show(integral(nmssm_ext_ee2_29))
real pull = abs (integral (nmssm_ext_ee2_29) - 3.7348139E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_29) == 3.7348139E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.31E-04) ** 2 + error(nmssm_ext_ee2_30) ** 2)
printf "Expecting 2.6997913E-01"
show(integral(nmssm_ext_ee2_30))
real pull = abs (integral (nmssm_ext_ee2_30) - 2.6997913E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_30) == 2.6997913E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-04) ** 2 + error(nmssm_ext_ee2_31) ** 2)
printf "Expecting 2.7681447E-01"
show(integral(nmssm_ext_ee2_31))
real pull = abs (integral (nmssm_ext_ee2_31) - 2.7681447E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_31) == 2.7681447E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.20E-03) ** 2 + error(nmssm_ext_ee2_32) ** 2)
printf "Expecting 4.4534250E+00"
show(integral(nmssm_ext_ee2_32))
real pull = abs (integral (nmssm_ext_ee2_32) - 4.4534250E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_32) == 4.4534250E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.51E-04) ** 2 + error(nmssm_ext_ee2_33) ** 2)
printf "Expecting 6.2935770E-01"
show(integral(nmssm_ext_ee2_33))
real pull = abs (integral (nmssm_ext_ee2_33) - 6.2935770E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_33) == 6.2935770E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.70E-04) ** 2 + error(nmssm_ext_ee2_34) ** 2)
printf "Expecting 1.2201185E+00"
show(integral(nmssm_ext_ee2_34))
real pull = abs (integral (nmssm_ext_ee2_34) - 1.2201185E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_34) == 1.2201185E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.76E-05) ** 2 + error(nmssm_ext_ee2_35) ** 2)
printf "Expecting 8.5488270E-02"
show(integral(nmssm_ext_ee2_35))
real pull = abs (integral (nmssm_ext_ee2_35) - 8.5488270E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_35) == 8.5488270E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.36E-05) ** 2 + error(nmssm_ext_ee2_36) ** 2)
printf "Expecting 3.7669965E-02"
show(integral(nmssm_ext_ee2_36))
real pull = abs (integral (nmssm_ext_ee2_36) - 3.7669965E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu1,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_36) == 3.7669965E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.66E-05) ** 2 + error(nmssm_ext_ee2_37) ** 2)
printf "Expecting 9.3520991E-02"
show(integral(nmssm_ext_ee2_37))
real pull = abs (integral (nmssm_ext_ee2_37) - 9.3520991E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_37) == 9.3520991E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.60E-04) ** 2 + error(nmssm_ext_ee2_38) ** 2)
printf "Expecting 9.2255931E-01"
show(integral(nmssm_ext_ee2_38))
real pull = abs (integral (nmssm_ext_ee2_38) - 9.2255931E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_38) == 9.2255931E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.87E-05) ** 2 + error(nmssm_ext_ee2_39) ** 2)
printf "Expecting 4.8420385E-02"
show(integral(nmssm_ext_ee2_39))
real pull = abs (integral (nmssm_ext_ee2_39) - 4.8420385E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_39) == 4.8420385E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.31E-05) ** 2 + error(nmssm_ext_ee2_40) ** 2)
printf "Expecting 2.1101591E-02"
show(integral(nmssm_ext_ee2_40))
real pull = abs (integral (nmssm_ext_ee2_40) - 2.1101591E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu2,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_40) == 2.1101591E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.26E-03) ** 2 + error(nmssm_ext_ee2_41) ** 2)
printf "Expecting 3.1178635E+00"
show(integral(nmssm_ext_ee2_41))
real pull = abs (integral (nmssm_ext_ee2_41) - 3.1178635E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_41) == 3.1178635E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.26E-04) ** 2 + error(nmssm_ext_ee2_42) ** 2)
printf "Expecting 1.8161434E-01"
show(integral(nmssm_ext_ee2_42))
real pull = abs (integral (nmssm_ext_ee2_42) - 1.8161434E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_42) == 1.8161434E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.70E-05) ** 2 + error(nmssm_ext_ee2_43) ** 2)
printf "Expecting 5.9780766E-02"
show(integral(nmssm_ext_ee2_43))
real pull = abs (integral (nmssm_ext_ee2_43) - 5.9780766E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu3,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_43) == 5.9780766E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.94E-07) ** 2 + error(nmssm_ext_ee2_44) ** 2)
printf "Expecting 1.1128203E-03"
show(integral(nmssm_ext_ee2_44))
real pull = abs (integral (nmssm_ext_ee2_44) - 1.1128203E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu4,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_44) == 1.1128203E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.10E-03) ** 2 + error(nmssm_ext_ee2_45) ** 2)
printf "Expecting 1.7730710E+00"
show(integral(nmssm_ext_ee2_45))
real pull = abs (integral (nmssm_ext_ee2_45) - 1.7730710E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu4,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_45) == 1.7730710E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.01E-08) ** 2 + error(nmssm_ext_ee2_46) ** 2)
printf "Expecting 2.2572280E-05"
show(integral(nmssm_ext_ee2_46))
real pull = abs (integral (nmssm_ext_ee2_46) - 2.2572280E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => neu5,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_46) == 2.2572280E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.58E-03) ** 2 + error(nmssm_ext_ee2_47) ** 2)
printf "Expecting 8.4802746E+00"
show(integral(nmssm_ext_ee2_47))
real pull = abs (integral (nmssm_ext_ee2_47) - 8.4802746E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch1- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_47) == 8.4802746E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.45E-03) ** 2 + error(nmssm_ext_ee2_48) ** 2)
printf "Expecting 4.6006705E+00"
show(integral(nmssm_ext_ee2_48))
real pull = abs (integral (nmssm_ext_ee2_48) - 4.6006705E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch2+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_48) == 4.6006705E+00)
printf "************************************************************************"
printf "* Checking e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.43E-04) ** 2 + error(nmssm_ext_ee2_49) ** 2)
printf "Expecting 2.6356797E-01"
show(integral(nmssm_ext_ee2_49))
real pull = abs (integral (nmssm_ext_ee2_49) - 2.6356797E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => ch1+,ch2- @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_49) == 2.6356797E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.36E-04) ** 2 + error(nmssm_ext_ee2_50) ** 2)
printf "Expecting 4.7787333E-01"
show(integral(nmssm_ext_ee2_50))
real pull = abs (integral (nmssm_ext_ee2_50) - 4.7787333E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_50) == 4.7787333E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.04E-06) ** 2 + error(nmssm_ext_ee2_51) ** 2)
printf "Expecting 1.0244223E-02"
show(integral(nmssm_ext_ee2_51))
real pull = abs (integral (nmssm_ext_ee2_51) - 1.0244223E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_51) == 1.0244223E-02)
printf "************************************************************************"
printf "* Checking e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.03E-10) ** 2 + error(nmssm_ext_ee2_52) ** 2)
printf "Expecting 2.0848498E-07"
show(integral(nmssm_ext_ee2_52))
real pull = abs (integral (nmssm_ext_ee2_52) - 2.0848498E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Z,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_52) == 2.0848498E-07)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-10) ** 2 + error(nmssm_ext_ee2_53) ** 2)
printf "Expecting 2.7917432E-07"
show(integral(nmssm_ext_ee2_53))
real pull = abs (integral (nmssm_ext_ee2_53) - 2.7917432E-07) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_53) == 2.7917432E-07)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.42E-09) ** 2 + error(nmssm_ext_ee2_54) ** 2)
printf "Expecting 1.0978578E-05"
show(integral(nmssm_ext_ee2_54))
real pull = abs (integral (nmssm_ext_ee2_54) - 1.0978578E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_54) == 1.0978578E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-06) ** 2 + error(nmssm_ext_ee2_55) ** 2)
printf "Expecting 2.7734579E-03"
show(integral(nmssm_ext_ee2_55))
real pull = abs (integral (nmssm_ext_ee2_55) - 2.7734579E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_55) == 2.7734579E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.57E-08) ** 2 + error(nmssm_ext_ee2_56) ** 2)
printf "Expecting 3.1827326E-05"
show(integral(nmssm_ext_ee2_56))
real pull = abs (integral (nmssm_ext_ee2_56) - 3.1827326E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_56) == 3.1827326E-05)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.18E-07) ** 2 + error(nmssm_ext_ee2_57) ** 2)
printf "Expecting 1.2530522E-03"
show(integral(nmssm_ext_ee2_57))
real pull = abs (integral (nmssm_ext_ee2_57) - 1.2530522E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_57) == 1.2530522E-03)
printf "************************************************************************"
printf "* Checking e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.47E-04) ** 2 + error(nmssm_ext_ee2_58) ** 2)
printf "Expecting 2.9985928E-01"
show(integral(nmssm_ext_ee2_58))
real pull = abs (integral (nmssm_ext_ee2_58) - 2.9985928E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => A02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_58) == 2.9985928E-01)
printf "************************************************************************"
printf "* Checking e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.60E-04) ** 2 + error(nmssm_ext_ee2_59) ** 2)
printf "Expecting 7.3524903E-01"
show(integral(nmssm_ext_ee2_59))
real pull = abs (integral (nmssm_ext_ee2_59) - 7.3524903E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,E1 => Hp,Hm	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ee2_59) == 7.3524903E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
