

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-zz.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! --------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                    -----
! --------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! --------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! --------------------------------------------------------------------------
iterations = 3:200000
! --------------------------------------------------------------------------








































! --------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_zz_1 = Z,Z => se1,SE1        
process mssm_ext_zz_2 = Z,Z => se2,SE2        
process mssm_ext_zz_3 = Z,Z => smu1,SMU1      
process mssm_ext_zz_4 = Z,Z => smu2,SMU2      
process mssm_ext_zz_5 = Z,Z => stau1,STAU1    
process mssm_ext_zz_6 = Z,Z => stau2,STAU2    
process mssm_ext_zz_7 = Z,Z => stau1,STAU2    
process mssm_ext_zz_8 = Z,Z => sn11,SN11      
process mssm_ext_zz_9 = Z,Z => sn21,SN21      
process mssm_ext_zz_10 = Z,Z => sn31,SN31      
process mssm_ext_zz_11 = Z,Z => h,h            
process mssm_ext_zz_12 = Z,Z => se1,SE1        
process mssm_ext_zz_13 = Z,Z => se2,SE2        
process mssm_ext_zz_14 = Z,Z => smu1,SMU1      
process mssm_ext_zz_15 = Z,Z => smu2,SMU2      
process mssm_ext_zz_16 = Z,Z => stau1,STAU1    
process mssm_ext_zz_17 = Z,Z => stau2,STAU2    
process mssm_ext_zz_18 = Z,Z => stau1,STAU2    
process mssm_ext_zz_19 = Z,Z => sn11,SN11      
process mssm_ext_zz_20 = Z,Z => sn21,SN21      
process mssm_ext_zz_21 = Z,Z => sn31,SN31      
process mssm_ext_zz_22 = Z,Z => su1,su1c       
process mssm_ext_zz_23 = Z,Z => su2,su2c       
process mssm_ext_zz_24 = Z,Z => sc1,sc1c       
process mssm_ext_zz_25 = Z,Z => sc2,sc2c       
process mssm_ext_zz_26 = Z,Z => st1,st1c       
process mssm_ext_zz_27 = Z,Z => st2,st2c       
process mssm_ext_zz_28 = Z,Z => st1,st2c       
process mssm_ext_zz_29 = Z,Z => sd1,sd1c       
process mssm_ext_zz_30 = Z,Z => sd2,sd2c       
process mssm_ext_zz_31 = Z,Z => ss1,ss1c       
process mssm_ext_zz_32 = Z,Z => ss2,ss2c       
process mssm_ext_zz_33 = Z,Z => sb1,sb1c       
process mssm_ext_zz_34 = Z,Z => sb2,sb2c       
process mssm_ext_zz_35 = Z,Z => sb1,sb2c       
process mssm_ext_zz_36 = Z,Z => h,h            
process mssm_ext_zz_37 = Z,Z => h,HH           
process mssm_ext_zz_38 = Z,Z => HH,HH          
process mssm_ext_zz_39 = Z,Z => HA,HA          
process mssm_ext_zz_40 = Z,Z => Hp,Hm          
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_1)
printf "************************************************************************"
printf "* Integrating Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_2)
printf "************************************************************************"
printf "* Integrating Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_3)
printf "************************************************************************"
printf "* Integrating Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_4)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_5)
printf "************************************************************************"
printf "* Integrating Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_6)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_7)
printf "************************************************************************"
printf "* Integrating Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_8)
printf "************************************************************************"
printf "* Integrating Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_9)
printf "************************************************************************"
printf "* Integrating Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_10)
printf "************************************************************************"
printf "* Integrating Z,Z => h,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_11)
printf "************************************************************************"
printf "* Integrating Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_12)
printf "************************************************************************"
printf "* Integrating Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_13)
printf "************************************************************************"
printf "* Integrating Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_14)
printf "************************************************************************"
printf "* Integrating Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_15)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_16)
printf "************************************************************************"
printf "* Integrating Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_17)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_18)
printf "************************************************************************"
printf "* Integrating Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_19)
printf "************************************************************************"
printf "* Integrating Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_20)
printf "************************************************************************"
printf "* Integrating Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_21)
printf "************************************************************************"
printf "* Integrating Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_22)
printf "************************************************************************"
printf "* Integrating Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_23)
printf "************************************************************************"
printf "* Integrating Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_24)
printf "************************************************************************"
printf "* Integrating Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_25)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_26)
printf "************************************************************************"
printf "* Integrating Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_27)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_28)
printf "************************************************************************"
printf "* Integrating Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_29)
printf "************************************************************************"
printf "* Integrating Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_30)
printf "************************************************************************"
printf "* Integrating Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_31)
printf "************************************************************************"
printf "* Integrating Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_32)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_33)
printf "************************************************************************"
printf "* Integrating Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_34)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_35)
printf "************************************************************************"
printf "* Integrating Z,Z => h,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_36)
printf "************************************************************************"
printf "* Integrating Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_37)
printf "************************************************************************"
printf "* Integrating Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_38)
printf "************************************************************************"
printf "* Integrating Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_39)
printf "************************************************************************"
printf "* Integrating Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Z,Z
seed = 0
integrate (mssm_ext_zz_40)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_1) ** 2)
printf "Expecting 35.7923     "
show(integral(mssm_ext_zz_1))
real pull = abs (integral (mssm_ext_zz_1) - 35.7923     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se1,SE1         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_1) == 35.7923     )
printf "************************************************************************"
printf "* Checking Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_2) ** 2)
printf "Expecting 22.9508     "
show(integral(mssm_ext_zz_2))
real pull = abs (integral (mssm_ext_zz_2) - 22.9508     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se2,SE2         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_2) == 22.9508     )
printf "************************************************************************"
printf "* Checking Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_3) ** 2)
printf "Expecting 35.7920     "
show(integral(mssm_ext_zz_3))
real pull = abs (integral (mssm_ext_zz_3) - 35.7920     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu1,SMU1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_3) == 35.7920     )
printf "************************************************************************"
printf "* Checking Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_4) ** 2)
printf "Expecting 22.9509     "
show(integral(mssm_ext_zz_4))
real pull = abs (integral (mssm_ext_zz_4) - 22.9509     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu2,SMU2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_4) == 22.9509     )
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_zz_5) ** 2)
printf "Expecting 19.7282     "
show(integral(mssm_ext_zz_5))
real pull = abs (integral (mssm_ext_zz_5) - 19.7282     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_5) == 19.7282     )
printf "************************************************************************"
printf "* Checking Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_6) ** 2)
printf "Expecting 30.0574     "
show(integral(mssm_ext_zz_6))
real pull = abs (integral (mssm_ext_zz_6) - 30.0574     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau2,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_6) == 30.0574     )
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002   ) ** 2 + error(mssm_ext_zz_7) ** 2)
printf "Expecting 0.51455    "
show(integral(mssm_ext_zz_7))
real pull = abs (integral (mssm_ext_zz_7) - 0.51455    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_7) == 0.51455    )
printf "************************************************************************"
printf "* Checking Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_zz_8) ** 2)
printf "Expecting 232.517      "
show(integral(mssm_ext_zz_8))
real pull = abs (integral (mssm_ext_zz_8) - 232.517      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn11,SN11       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_8) == 232.517      )
printf "************************************************************************"
printf "* Checking Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_zz_9) ** 2)
printf "Expecting 232.515      "
show(integral(mssm_ext_zz_9))
real pull = abs (integral (mssm_ext_zz_9) - 232.515      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn21,SN21       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_9) == 232.515      )
printf "************************************************************************"
printf "* Checking Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_zz_10) ** 2)
printf "Expecting 233.341      "
show(integral(mssm_ext_zz_10))
real pull = abs (integral (mssm_ext_zz_10) - 233.341      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn31,SN31       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_10) == 233.341      )
printf "************************************************************************"
printf "* Checking Z,Z => h,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1       ) ** 2 + error(mssm_ext_zz_11) ** 2)
printf "Expecting 7887.5        "
show(integral(mssm_ext_zz_11))
real pull = abs (integral (mssm_ext_zz_11) - 7887.5        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h,h             @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h,h             @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h,h             @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h,h             @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h,h             @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_11) == 7887.5        )
printf "************************************************************************"
printf "* Checking Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_12) ** 2)
printf "Expecting 3.8011     "
show(integral(mssm_ext_zz_12))
real pull = abs (integral (mssm_ext_zz_12) - 3.8011     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se1,SE1         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_12) == 3.8011     )
printf "************************************************************************"
printf "* Checking Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_zz_13) ** 2)
printf "Expecting 1.9234     "
show(integral(mssm_ext_zz_13))
real pull = abs (integral (mssm_ext_zz_13) - 1.9234     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se2,SE2         @ sqrt(s) = 2000 GeV"
endif
tolerance = 5 * error_sum
expect (integral (mssm_ext_zz_13) == 1.9234     )
printf "************************************************************************"
printf "* Checking Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_14) ** 2)
printf "Expecting 3.8008     "
show(integral(mssm_ext_zz_14))
real pull = abs (integral (mssm_ext_zz_14) - 3.8008     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu1,SMU1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_14) == 3.8008     )
printf "************************************************************************"
printf "* Checking Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_zz_15) ** 2)
printf "Expecting 1.9239     "
show(integral(mssm_ext_zz_15))
real pull = abs (integral (mssm_ext_zz_15) - 1.9239     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu2,SMU2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_15) == 1.9239     )
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008   ) ** 2 + error(mssm_ext_zz_16) ** 2)
printf "Expecting 1.99985    "
show(integral(mssm_ext_zz_16))
real pull = abs (integral (mssm_ext_zz_16) - 1.99985    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_16) == 1.99985    )
printf "************************************************************************"
printf "* Checking Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_zz_17) ** 2)
printf "Expecting 3.6161     "
show(integral(mssm_ext_zz_17))
real pull = abs (integral (mssm_ext_zz_17) - 3.6161     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau2,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_17) == 3.6161     )
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000002  ) ** 2 + error(mssm_ext_zz_18) ** 2)
printf "Expecting 0.057456   "
show(integral(mssm_ext_zz_18))
real pull = abs (integral (mssm_ext_zz_18) - 0.057456   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_18) == 0.057456   )
printf "************************************************************************"
printf "* Checking Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_zz_19) ** 2)
printf "Expecting 32.037      "
show(integral(mssm_ext_zz_19))
real pull = abs (integral (mssm_ext_zz_19) - 32.037      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn11,SN11       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_19) == 32.037      )
printf "************************************************************************"
printf "* Checking Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_zz_20) ** 2)
printf "Expecting 32.037      "
show(integral(mssm_ext_zz_20))
real pull = abs (integral (mssm_ext_zz_20) - 32.037      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn21,SN21       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_20) == 32.037      )
printf "************************************************************************"
printf "* Checking Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_zz_21) ** 2)
printf "Expecting 32.072      "
show(integral(mssm_ext_zz_21))
real pull = abs (integral (mssm_ext_zz_21) - 32.072      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn31,SN31       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_21) == 32.072      )
printf "************************************************************************"
printf "* Checking Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_zz_22) ** 2)
printf "Expecting 15.6792     "
show(integral(mssm_ext_zz_22))
real pull = abs (integral (mssm_ext_zz_22) - 15.6792     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_22) == 15.6792     )
printf "************************************************************************"
printf "* Checking Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002   ) ** 2 + error(mssm_ext_zz_23) ** 2)
printf "Expecting 1.20948    "
show(integral(mssm_ext_zz_23))
real pull = abs (integral (mssm_ext_zz_23) - 1.20948    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_23) == 1.20948    )
printf "************************************************************************"
printf "* Checking Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_zz_24) ** 2)
printf "Expecting 15.6791     "
show(integral(mssm_ext_zz_24))
real pull = abs (integral (mssm_ext_zz_24) - 15.6791     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_24) == 15.6791     )
printf "************************************************************************"
printf "* Checking Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002   ) ** 2 + error(mssm_ext_zz_25) ** 2)
printf "Expecting 1.20949    "
show(integral(mssm_ext_zz_25))
real pull = abs (integral (mssm_ext_zz_25) - 1.20949    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_25) == 1.20949    )
printf "************************************************************************"
printf "* Checking Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.008     ) ** 2 + error(mssm_ext_zz_26) ** 2)
printf "Expecting 262.155      "
show(integral(mssm_ext_zz_26))
real pull = abs (integral (mssm_ext_zz_26) - 262.155      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_26) == 262.155      )
printf "************************************************************************"
printf "* Checking Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.01      ) ** 2 + error(mssm_ext_zz_27) ** 2)
printf "Expecting 475.11       "
show(integral(mssm_ext_zz_27))
real pull = abs (integral (mssm_ext_zz_27) - 475.11       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_27) == 475.11       )
printf "************************************************************************"
printf "* Checking Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_28) ** 2)
printf "Expecting 10.7125     "
show(integral(mssm_ext_zz_28))
real pull = abs (integral (mssm_ext_zz_28) - 10.7125     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_28) == 10.7125     )
printf "************************************************************************"
printf "* Checking Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_zz_29) ** 2)
printf "Expecting 30.5474     "
show(integral(mssm_ext_zz_29))
real pull = abs (integral (mssm_ext_zz_29) - 30.5474     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_29) == 30.5474     )
printf "************************************************************************"
printf "* Checking Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000006  ) ** 2 + error(mssm_ext_zz_30) ** 2)
printf "Expecting 0.238127   "
show(integral(mssm_ext_zz_30))
real pull = abs (integral (mssm_ext_zz_30) - 0.238127   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_30) == 0.238127   )
printf "************************************************************************"
printf "* Checking Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_zz_31) ** 2)
printf "Expecting 30.5475     "
show(integral(mssm_ext_zz_31))
real pull = abs (integral (mssm_ext_zz_31) - 30.5475     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_31) == 30.5475     )
printf "************************************************************************"
printf "* Checking Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000006  ) ** 2 + error(mssm_ext_zz_32) ** 2)
printf "Expecting 0.238115   "
show(integral(mssm_ext_zz_32))
real pull = abs (integral (mssm_ext_zz_32) - 0.238115   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_32) == 0.238115   )
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_33) ** 2)
printf "Expecting 20.7329     "
show(integral(mssm_ext_zz_33))
real pull = abs (integral (mssm_ext_zz_33) - 20.7329     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_33) == 20.7329     )
printf "************************************************************************"
printf "* Checking Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_34) ** 2)
printf "Expecting 10.6865     "
show(integral(mssm_ext_zz_34))
real pull = abs (integral (mssm_ext_zz_34) - 10.6865     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_34) == 10.6865     )
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_35) ** 2)
printf "Expecting 18.6455     "
show(integral(mssm_ext_zz_35))
real pull = abs (integral (mssm_ext_zz_35) - 18.6455     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_35) == 18.6455     )
printf "************************************************************************"
printf "* Checking Z,Z => h,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.3       ) ** 2 + error(mssm_ext_zz_36) ** 2)
printf "Expecting 7802.5        "
show(integral(mssm_ext_zz_36))
real pull = abs (integral (mssm_ext_zz_36) - 7802.5        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h,h             @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_36) == 7802.5        )
printf "************************************************************************"
printf "* Checking Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_zz_37) ** 2)
printf "Expecting 2.7726     "
show(integral(mssm_ext_zz_37))
real pull = abs (integral (mssm_ext_zz_37) - 2.7726     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h,HH            @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_37) == 2.7726     )
printf "************************************************************************"
printf "* Checking Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_38) ** 2)
printf "Expecting 11.5209     "
show(integral(mssm_ext_zz_38))
real pull = abs (integral (mssm_ext_zz_38) - 11.5209     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => HH,HH           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_38) == 11.5209     )
printf "************************************************************************"
printf "* Checking Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_zz_39) ** 2)
printf "Expecting 11.3528     "
show(integral(mssm_ext_zz_39))
real pull = abs (integral (mssm_ext_zz_39) - 11.3528     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => HA,HA           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_39) == 11.3528     )
printf "************************************************************************"
printf "* Checking Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005   ) ** 2 + error(mssm_ext_zz_40) ** 2)
printf "Expecting 3.17136    "
show(integral(mssm_ext_zz_40))
real pull = abs (integral (mssm_ext_zz_40) - 3.17136    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Hp,Hm           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_zz_40) == 3.17136    )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
