! WHIZARD 3.1.0 Dec 14 2022
!
! Copyright (C) 1999-2022 by
!     Wolfgang Kilian <kilian@physik.uni-siegen.de>
!     Thorsten Ohl <ohl@physik.uni-wuerzburg.de>
!     Juergen Reuter <juergen.reuter@desy.de>
!
!     with contributions from
!     cf. main AUTHORS file
!
! WHIZARD is free software; you can redistribute it and/or modify it
! under the terms of the GNU General Public License as published by
! the Free Software Foundation; either version 2, or (at your option)
! any later version.
!
! WHIZARD is distributed in the hope that it will be useful, but
! WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program; if not, write to the Free Software
! Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! This file has been stripped of most comments.  For documentation, refer
! to the source 'whizard.nw'

module prc_openloops

  use, intrinsic :: iso_c_binding !NODEP!

  use kinds
  use iso_varying_string, string_t => varying_string
  use string_utils, only: str
  use physics_defs
  use variables
  use os_interface
  use lorentz
  use interactions
  use model_data
  use prc_core_def
  use prc_core

  use blha_config
  use blha_olp_interfaces

  use mpi_f08 !NODEP!

  implicit none
  private

  public :: openloops_def_t
  public :: openloops_state_t
  public :: prc_openloops_t

  integer :: N_EXTERNAL = 0


  type, extends (prc_blha_writer_t) :: openloops_writer_t
  contains
    procedure, nopass :: type_name => openloops_writer_type_name
  end type openloops_writer_t

  type, extends (blha_def_t) :: openloops_def_t
     integer :: verbosity
  contains
    procedure :: init => openloops_def_init
    procedure, nopass :: type_string => openloops_def_type_string
    procedure :: write => openloops_def_write
    procedure :: read => openloops_def_read
    procedure :: allocate_driver => openloops_def_allocate_driver
  end type openloops_def_t

  type, extends (blha_driver_t) :: openloops_driver_t
    integer :: n_external = 0
    type(string_t) :: olp_file
    procedure(ol_evaluate_scpowheg), nopass, pointer :: &
         evaluate_spin_correlations_powheg => null ()
    procedure(ol_getparameter_double), nopass, pointer :: &
         get_parameter_double => null ()
  contains
    procedure :: init_dlaccess_to_library => &
         openloops_driver_init_dlaccess_to_library
    procedure :: set_alpha_s => openloops_driver_set_alpha_s
    procedure :: set_alpha_qed => openloops_driver_set_alpha_qed
    procedure :: set_GF => openloops_driver_set_GF
    procedure :: set_weinberg_angle => openloops_driver_set_weinberg_angle
    procedure :: print_alpha_s => openloops_driver_print_alpha_s
    procedure, nopass :: type_name => openloops_driver_type_name
    procedure :: load_procedures => openloops_driver_load_procedures
  end type openloops_driver_t

  type :: openloops_threshold_data_t
    logical :: nlo = .true.
    real(default) :: alpha_ew
    real(default) :: sinthw
    real(default) :: m_b, m_W
    real(default) :: vtb
  contains
    procedure :: compute_top_width => &
         openloops_threshold_data_compute_top_width
  end type openloops_threshold_data_t

  type, extends (blha_state_t) :: openloops_state_t
    type(openloops_threshold_data_t), allocatable :: threshold_data
  contains
    procedure :: init_threshold => openloops_state_init_threshold
    procedure :: write => openloops_state_write
  end type openloops_state_t

  type, extends (prc_blha_t) :: prc_openloops_t
  contains
    procedure :: allocate_workspace => prc_openloops_allocate_workspace
    procedure :: init_driver => prc_openloops_init_driver
    procedure :: write => prc_openloops_write
    procedure :: write_name => prc_openloops_write_name
    procedure :: prepare_library => prc_openloops_prepare_library
    procedure :: load_driver => prc_openloops_load_driver
    procedure :: start => prc_openloops_start
    procedure :: set_n_external => prc_openloops_set_n_external
    procedure :: reset_parameters => prc_openloops_reset_parameters
    procedure :: set_verbosity => prc_openloops_set_verbosity
    procedure :: prepare_external_code => &
         prc_openloops_prepare_external_code
    procedure :: compute_sqme_spin_c => prc_openloops_compute_sqme_spin_c
    procedure :: get_alpha_qed => prc_openloops_get_alpha_qed
  end type prc_openloops_t


  abstract interface
     subroutine ol_evaluate_scpowheg (id, pp, emitter, res, resmunu) bind(C)
       import
       integer(kind = c_int), value :: id, emitter
       real(kind = c_double), intent(in) :: pp(5 * N_EXTERNAL)
       real(kind = c_double), intent(out) :: res, resmunu(16)
     end subroutine ol_evaluate_scpowheg
  end interface

  abstract interface
     subroutine ol_getparameter_double (variable_name, value) bind(C)
       import
       character(kind = c_char,len = 1), intent(in) :: variable_name
       real(kind = c_double), intent(out) :: value
     end subroutine ol_getparameter_double
  end interface


  interface
    module function openloops_threshold_data_compute_top_width &
         (data, mtop, alpha_s) result (wtop)
      real(default) :: wtop
      class(openloops_threshold_data_t), intent(in) :: data
      real(default), intent(in) :: mtop, alpha_s
    end function openloops_threshold_data_compute_top_width
    module subroutine openloops_state_init_threshold (object, model)
      class(openloops_state_t), intent(inout) :: object
      type(model_data_t), intent(in) :: model
    end subroutine openloops_state_init_threshold
    module function openloops_writer_type_name () result (string)
      type(string_t) :: string
    end function openloops_writer_type_name
    module function openloops_def_type_string () result (string)
      type(string_t) :: string
    end function openloops_def_type_string
    module subroutine openloops_def_write (object, unit)
      class(openloops_def_t), intent(in) :: object
      integer, intent(in) :: unit
    end subroutine openloops_def_write
    module subroutine openloops_driver_init_dlaccess_to_library &
       (object, os_data, dlaccess, success)
      class(openloops_driver_t), intent(in) :: object
      type(os_data_t), intent(in) :: os_data
      type(dlaccess_t), intent(out) :: dlaccess
      logical, intent(out) :: success
    end subroutine openloops_driver_init_dlaccess_to_library
    module subroutine openloops_driver_set_alpha_s (driver, alpha_s)
      class(openloops_driver_t), intent(in) :: driver
      real(default), intent(in) :: alpha_s
    end subroutine openloops_driver_set_alpha_s
    module subroutine openloops_driver_set_alpha_qed (driver, alpha)
      class(openloops_driver_t), intent(inout) :: driver
      real(default), intent(in) :: alpha
    end subroutine openloops_driver_set_alpha_qed
    module subroutine openloops_driver_set_GF (driver, GF)
      class(openloops_driver_t), intent(inout) :: driver
      real(default), intent(in) :: GF
    end subroutine openloops_driver_set_GF
    module subroutine openloops_driver_set_weinberg_angle (driver, sw2)
      class(openloops_driver_t), intent(inout) :: driver
      real(default), intent(in) :: sw2
    end subroutine openloops_driver_set_weinberg_angle
    module subroutine openloops_driver_print_alpha_s (object)
      class(openloops_driver_t), intent(in) :: object
    end subroutine openloops_driver_print_alpha_s
    module function openloops_driver_type_name () result (type)
      type(string_t) :: type
    end function openloops_driver_type_name
    module subroutine openloops_driver_load_procedures &
         (object, os_data, success)
      class(openloops_driver_t), intent(inout) :: object
      type(os_data_t), intent(in) :: os_data
      logical, intent(out) :: success
    end subroutine openloops_driver_load_procedures
    module subroutine openloops_def_read (object, unit)
      class(openloops_def_t), intent(out) :: object
      integer, intent(in) :: unit
    end subroutine openloops_def_read
    module subroutine openloops_state_write (object, unit)
      class(openloops_state_t), intent(in) :: object
      integer, intent(in), optional :: unit
    end subroutine openloops_state_write
    module subroutine prc_openloops_init_driver (object, os_data)
      class(prc_openloops_t), intent(inout) :: object
      type(os_data_t), intent(in) :: os_data
    end subroutine prc_openloops_init_driver
    module subroutine prc_openloops_write (object, unit)
      class(prc_openloops_t), intent(in) :: object
      integer, intent(in), optional :: unit
    end subroutine prc_openloops_write
    module subroutine prc_openloops_write_name (object, unit)
      class(prc_openloops_t), intent(in) :: object
      integer, intent(in), optional :: unit
    end subroutine prc_openloops_write_name
    module subroutine prc_openloops_prepare_library (object, os_data, model)
      class(prc_openloops_t), intent(inout) :: object
      type(os_data_t), intent(in) :: os_data
      type(model_data_t), intent(in), target :: model
    end subroutine prc_openloops_prepare_library
    module subroutine prc_openloops_load_driver (object, os_data)
      class(prc_openloops_t), intent(inout) :: object
      type(os_data_t), intent(in) :: os_data
    end subroutine prc_openloops_load_driver
    module subroutine prc_openloops_start (object)
      class(prc_openloops_t), intent(inout) :: object
    end subroutine prc_openloops_start
    module subroutine prc_openloops_set_n_external (object, n)
      class(prc_openloops_t), intent(inout) :: object
      integer, intent(in) :: n
    end subroutine prc_openloops_set_n_external
    module subroutine prc_openloops_reset_parameters (object)
      class(prc_openloops_t), intent(inout) :: object
    end subroutine prc_openloops_reset_parameters
    module subroutine prc_openloops_set_verbosity (object, verbose)
      class(prc_openloops_t), intent(inout) :: object
      integer, intent(in) :: verbose
    end subroutine prc_openloops_set_verbosity
    module subroutine prc_openloops_prepare_external_code &
         (core, flv_states, var_list, os_data, libname, model, i_core, is_nlo)
      class(prc_openloops_t), intent(inout) :: core
      integer, intent(in), dimension(:,:), allocatable :: flv_states
      type(var_list_t), intent(in) :: var_list
      type(os_data_t), intent(in) :: os_data
      type(string_t), intent(in) :: libname
      type(model_data_t), intent(in), target :: model
      integer, intent(in) :: i_core
      logical, intent(in) :: is_nlo
    end subroutine prc_openloops_prepare_external_code
    module subroutine prc_openloops_compute_sqme_spin_c (object, &
         i_flv, i_hel, em, p, ren_scale, sqme_spin_c, bad_point)
      class(prc_openloops_t), intent(inout) :: object
      integer, intent(in) :: i_flv, i_hel
      integer, intent(in) :: em
      type(vector4_t), intent(in), dimension(:) :: p
      real(default), intent(in) :: ren_scale
      real(default), intent(out), dimension(6) :: sqme_spin_c
      logical, intent(out) :: bad_point
    end subroutine prc_openloops_compute_sqme_spin_c
    module function prc_openloops_get_alpha_qed &
         (object, core_state) result (alpha_qed)
      class(prc_openloops_t), intent(in) :: object
      class(prc_core_state_t), intent(in), allocatable :: core_state
      real(default) :: alpha_qed
    end function prc_openloops_get_alpha_qed
  end interface

contains

  subroutine openloops_def_init (object, basename, model_name, &
     prt_in, prt_out, nlo_type, restrictions, var_list)
    class(openloops_def_t), intent(inout) :: object
    type(string_t), intent(in) :: basename, model_name
    type(string_t), dimension(:), intent(in) :: prt_in, prt_out
    integer, intent(in) :: nlo_type
    type(string_t), intent(in), optional :: restrictions
    type(var_list_t), intent(in) :: var_list
    integer :: n_size, rank
    object%basename = basename
    allocate (openloops_writer_t :: object%writer)
    select case (nlo_type)
    case (BORN)
       object%suffix = '_BORN'
    case (NLO_REAL)
       object%suffix = '_REAL'
    case (NLO_VIRTUAL)
       object%suffix = '_LOOP'
    case (NLO_SUBTRACTION, NLO_MISMATCH)
       object%suffix = '_SUB'
    case (NLO_DGLAP)
       object%suffix = '_DGLAP'
    end select
    call MPI_comm_rank (MPI_COMM_WORLD, rank)
    call MPI_Comm_size (MPI_COMM_WORLD, n_size)
    if (n_size > 1) then
       object%suffix = object%suffix // var_str ("_") // str (rank)
    end if
    select type (writer => object%writer)
    class is (prc_blha_writer_t)
       call writer%init (model_name, prt_in, prt_out, restrictions)
    end select
    object%verbosity = var_list%get_ival (var_str ("openloops_verbosity"))
  end subroutine openloops_def_init

  subroutine openloops_def_allocate_driver (object, driver, basename)
    class(openloops_def_t), intent(in) :: object
    class(prc_core_driver_t), intent(out), allocatable :: driver
    type(string_t), intent(in) :: basename
    if (.not. allocated (driver)) allocate (openloops_driver_t :: driver)
  end subroutine openloops_def_allocate_driver

  subroutine prc_openloops_allocate_workspace (object, core_state)
    class(prc_openloops_t), intent(in) :: object
    class(prc_core_state_t), intent(inout), allocatable :: core_state
    allocate (openloops_state_t :: core_state)
  end subroutine prc_openloops_allocate_workspace


end module prc_openloops
