

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-aa.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! --------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                    -----
! --------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! --------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
!
seed = 0
!
show (al_h,mu_h,tanb_h)
! --------------------------------------------------------------------------
iterations = 3:200000
! --------------------------------------------------------------------------




























! --------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_aa_1 = A,A => se1,SE1        
process mssm_ext_aa_2 = A,A => se2,SE2        
process mssm_ext_aa_3 = A,A => smu1,SMU1      
process mssm_ext_aa_4 = A,A => smu2,SMU2      
process mssm_ext_aa_5 = A,A => stau1,STAU1    
process mssm_ext_aa_6 = A,A => stau2,STAU2    
process mssm_ext_aa_7 = A,A => "ch1+","ch1-"  
process mssm_ext_aa_8 = A,A => se1,SE1        
process mssm_ext_aa_9 = A,A => se2,SE2        
process mssm_ext_aa_10 = A,A => smu1,SMU1      
process mssm_ext_aa_11 = A,A => smu2,SMU2      
process mssm_ext_aa_12 = A,A => stau1,STAU1    
process mssm_ext_aa_13 = A,A => stau2,STAU2    
process mssm_ext_aa_14 = A,A => su1,su1c       
process mssm_ext_aa_15 = A,A => su2,su2c       
process mssm_ext_aa_16 = A,A => sc1,sc1c       
process mssm_ext_aa_17 = A,A => sc2,sc2c       
process mssm_ext_aa_18 = A,A => st1,st1c       
process mssm_ext_aa_19 = A,A => st2,st2c       
process mssm_ext_aa_20 = A,A => sd1,sd1c       
process mssm_ext_aa_21 = A,A => sd2,sd2c       
process mssm_ext_aa_22 = A,A => ss1,ss1c       
process mssm_ext_aa_23 = A,A => ss2,ss2c       
process mssm_ext_aa_24 = A,A => sb1,sb1c       
process mssm_ext_aa_25 = A,A => sb2,sb2c       
process mssm_ext_aa_26 = A,A => "ch1+","ch1-"  
process mssm_ext_aa_27 = A,A => "ch2+","ch2-"  
process mssm_ext_aa_28 = A,A => Hp,Hm          
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating A,A => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_1)
printf "************************************************************************"
printf "* Integrating A,A => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_2)
printf "************************************************************************"
printf "* Integrating A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_3)
printf "************************************************************************"
printf "* Integrating A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_4)
printf "************************************************************************"
printf "* Integrating A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_5)
printf "************************************************************************"
printf "* Integrating A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_6)
printf "************************************************************************"
printf "* Integrating A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_7)
printf "************************************************************************"
printf "* Integrating A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_8)
printf "************************************************************************"
printf "* Integrating A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_9)
printf "************************************************************************"
printf "* Integrating A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_10)
printf "************************************************************************"
printf "* Integrating A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_11)
printf "************************************************************************"
printf "* Integrating A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_12)
printf "************************************************************************"
printf "* Integrating A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_13)
printf "************************************************************************"
printf "* Integrating A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_14)
printf "************************************************************************"
printf "* Integrating A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_15)
printf "************************************************************************"
printf "* Integrating A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_16)
printf "************************************************************************"
printf "* Integrating A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_17)
printf "************************************************************************"
printf "* Integrating A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_18)
printf "************************************************************************"
printf "* Integrating A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_19)
printf "************************************************************************"
printf "* Integrating A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_20)
printf "************************************************************************"
printf "* Integrating A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_21)
printf "************************************************************************"
printf "* Integrating A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_22)
printf "************************************************************************"
printf "* Integrating A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_23)
printf "************************************************************************"
printf "* Integrating A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_24)
printf "************************************************************************"
printf "* Integrating A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_25)
printf "************************************************************************"
printf "* Integrating A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_26)
printf "************************************************************************"
printf "* Integrating A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_27)
printf "************************************************************************"
printf "* Integrating A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = A,A
seed = 0
integrate (mssm_ext_aa_28)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking A,A => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007     ) ** 2 + error(mssm_ext_aa_1) ** 2)
printf "Expecting 210.005      "
show(integral(mssm_ext_aa_1))
real pull = abs (integral (mssm_ext_aa_1) - 210.005      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se1,SE1         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_1) == 210.005      )
printf "************************************************************************"
printf "* Checking A,A => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.011     ) ** 2 + error(mssm_ext_aa_2) ** 2)
printf "Expecting 250.321      "
show(integral(mssm_ext_aa_2))
real pull = abs (integral (mssm_ext_aa_2) - 250.321      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se2,SE2         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_2) == 250.321      )
printf "************************************************************************"
printf "* Checking A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007     ) ** 2 + error(mssm_ext_aa_3) ** 2)
printf "Expecting 210.005      "
show(integral(mssm_ext_aa_3))
real pull = abs (integral (mssm_ext_aa_3) - 210.005      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu1,SMU1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_3) == 210.005      )
printf "************************************************************************"
printf "* Checking A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.011     ) ** 2 + error(mssm_ext_aa_4) ** 2)
printf "Expecting 250.322      "
show(integral(mssm_ext_aa_4))
real pull = abs (integral (mssm_ext_aa_4) - 250.322      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu2,SMU2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_4) == 250.322      )
printf "************************************************************************"
printf "* Checking A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.013     ) ** 2 + error(mssm_ext_aa_5) ** 2)
printf "Expecting 263.362      "
show(integral(mssm_ext_aa_5))
real pull = abs (integral (mssm_ext_aa_5) - 263.362      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau1,STAU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_5) == 263.362      )
printf "************************************************************************"
printf "* Checking A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007     ) ** 2 + error(mssm_ext_aa_6) ** 2)
printf "Expecting 207.618      "
show(integral(mssm_ext_aa_6))
real pull = abs (integral (mssm_ext_aa_6) - 207.618      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau2,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_6) == 207.618      )
printf "************************************************************************"
printf "* Checking A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.06      ) ** 2 + error(mssm_ext_aa_7) ** 2)
printf "Expecting 1459.04       "
show(integral(mssm_ext_aa_7))
real pull = abs (integral (mssm_ext_aa_7) - 1459.04       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch1+,ch1-   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_7) == 1459.04       )
printf "************************************************************************"
printf "* Checking A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.005     ) ** 2 + error(mssm_ext_aa_8) ** 2)
printf "Expecting 29.056      "
show(integral(mssm_ext_aa_8))
real pull = abs (integral (mssm_ext_aa_8) - 29.056      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se1,SE1         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_8) == 29.056      )
printf "************************************************************************"
printf "* Checking A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.006     ) ** 2 + error(mssm_ext_aa_9) ** 2)
printf "Expecting 31.381      "
show(integral(mssm_ext_aa_9))
real pull = abs (integral (mssm_ext_aa_9) - 31.381      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => se2,SE2         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_9) == 31.381      )
printf "************************************************************************"
printf "* Checking A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.005     ) ** 2 + error(mssm_ext_aa_10) ** 2)
printf "Expecting 29.056      "
show(integral(mssm_ext_aa_10))
real pull = abs (integral (mssm_ext_aa_10) - 29.056      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu1,SMU1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_10) == 29.056      )
printf "************************************************************************"
printf "* Checking A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.006     ) ** 2 + error(mssm_ext_aa_11) ** 2)
printf "Expecting 31.379      "
show(integral(mssm_ext_aa_11))
real pull = abs (integral (mssm_ext_aa_11) - 31.379      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => smu2,SMU2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_11) == 31.379      )
printf "************************************************************************"
printf "* Checking A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.006     ) ** 2 + error(mssm_ext_aa_12) ** 2)
printf "Expecting 31.714      "
show(integral(mssm_ext_aa_12))
real pull = abs (integral (mssm_ext_aa_12) - 31.714      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau1,STAU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_12) == 31.714      )
printf "************************************************************************"
printf "* Checking A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.005     ) ** 2 + error(mssm_ext_aa_13) ** 2)
printf "Expecting 28.897      "
show(integral(mssm_ext_aa_13))
real pull = abs (integral (mssm_ext_aa_13) - 28.897      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => stau2,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_13) == 28.897      )
printf "************************************************************************"
printf "* Checking A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_aa_14) ** 2)
printf "Expecting 9.4536     "
show(integral(mssm_ext_aa_14))
real pull = abs (integral (mssm_ext_aa_14) - 9.4536     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_14) == 9.4536     )
printf "************************************************************************"
printf "* Checking A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_aa_15) ** 2)
printf "Expecting 9.7244     "
show(integral(mssm_ext_aa_15))
real pull = abs (integral (mssm_ext_aa_15) - 9.7244     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_15) == 9.7244     )
printf "************************************************************************"
printf "* Checking A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_aa_16) ** 2)
printf "Expecting 9.4534     "
show(integral(mssm_ext_aa_16))
real pull = abs (integral (mssm_ext_aa_16) - 9.4534     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_16) == 9.4534     )
printf "************************************************************************"
printf "* Checking A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_aa_17) ** 2)
printf "Expecting 9.7230     "
show(integral(mssm_ext_aa_17))
real pull = abs (integral (mssm_ext_aa_17) - 9.7230     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_aa_17) == 9.7230     )
printf "************************************************************************"
printf "* Checking A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009    ) ** 2 + error(mssm_ext_aa_18) ** 2)
printf "Expecting 12.5159     "
show(integral(mssm_ext_aa_18))
real pull = abs (integral (mssm_ext_aa_18) - 12.5159     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_18) == 12.5159     )
printf "************************************************************************"
printf "* Checking A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_aa_19) ** 2)
printf "Expecting 9.2298     "
show(integral(mssm_ext_aa_19))
real pull = abs (integral (mssm_ext_aa_19) - 9.2298     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_19) == 9.2298     )
printf "************************************************************************"
printf "* Checking A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_20) ** 2)
printf "Expecting 0.58655    "
show(integral(mssm_ext_aa_20))
real pull = abs (integral (mssm_ext_aa_20) - 0.58655    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_20) == 0.58655    )
printf "************************************************************************"
printf "* Checking A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_21) ** 2)
printf "Expecting 0.60853    "
show(integral(mssm_ext_aa_21))
real pull = abs (integral (mssm_ext_aa_21) - 0.60853    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_21) == 0.60853    )
printf "************************************************************************"
printf "* Checking A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_22) ** 2)
printf "Expecting 0.58656    "
show(integral(mssm_ext_aa_22))
real pull = abs (integral (mssm_ext_aa_22) - 0.58656    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_22) == 0.58656    )
printf "************************************************************************"
printf "* Checking A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_23) ** 2)
printf "Expecting 0.60863    "
show(integral(mssm_ext_aa_23))
real pull = abs (integral (mssm_ext_aa_23) - 0.60863    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_23) == 0.60863    )
printf "************************************************************************"
printf "* Checking A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_24) ** 2)
printf "Expecting 0.63761    "
show(integral(mssm_ext_aa_24))
real pull = abs (integral (mssm_ext_aa_24) - 0.63761    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_24) == 0.63761    )
printf "************************************************************************"
printf "* Checking A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_aa_25) ** 2)
printf "Expecting 0.61045    "
show(integral(mssm_ext_aa_25))
real pull = abs (integral (mssm_ext_aa_25) - 0.61045    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_25) == 0.61045    )
printf "************************************************************************"
printf "* Checking A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.009     ) ** 2 + error(mssm_ext_aa_26) ** 2)
printf "Expecting 274.020      "
show(integral(mssm_ext_aa_26))
real pull = abs (integral (mssm_ext_aa_26) - 274.020      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_aa_26) == 274.020      )
printf "************************************************************************"
printf "* Checking A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.006     ) ** 2 + error(mssm_ext_aa_27) ** 2)
printf "Expecting 181.542      "
show(integral(mssm_ext_aa_27))
real pull = abs (integral (mssm_ext_aa_27) - 181.542      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_aa_27) == 181.542      )
printf "************************************************************************"
printf "* Checking A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_aa_28) ** 2)
printf "Expecting 20.644      "
show(integral(mssm_ext_aa_28))
real pull = abs (integral (mssm_ext_aa_28) - 20.644      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in A,A => Hp,Hm           @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_aa_28) == 20.644      )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
