

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssmtest-dd.m4 1764 2010-02-11 23:33:52Z jr_reuter $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! ------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                  -----
! ------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! ------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! ------------------------------------------------------------------------
iterations = 3:200000
! ------------------------------------------------------------------------


























































! ------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_dd_1 = d,D => se1,SE1        
process mssm_ext_dd_2 = d,D => se2,SE2        
process mssm_ext_dd_3 = d,D => smu1,SMU1      
process mssm_ext_dd_4 = d,D => smu2,SMU2      
process mssm_ext_dd_5 = d,D => stau1,STAU1    
process mssm_ext_dd_6 = d,D => stau2,STAU2    
process mssm_ext_dd_7 = d,D => stau1,STAU2    
process mssm_ext_dd_8 = d,D => sn11,SN11      
process mssm_ext_dd_9 = d,D => sn21,SN21      
process mssm_ext_dd_10 = d,D => sn31,SN31      
process mssm_ext_dd_11 = d,D => neu1,neu1      
process mssm_ext_dd_12 = d,D => neu1,neu2      
process mssm_ext_dd_13 = d,D => neu1,neu3      
process mssm_ext_dd_14 = d,D => neu1,neu4      
process mssm_ext_dd_15 = d,D => neu2,neu2      
process mssm_ext_dd_16 = d,D => "ch1+","ch1-"  
process mssm_ext_dd_17 = d,D => Z,h            
process mssm_ext_dd_18 = d,D => Z,HH           
process mssm_ext_dd_19 = d,D => sgl,sgl        
process mssm_ext_dd_20 = d,D => se1,SE1        
process mssm_ext_dd_21 = d,D => se2,SE2        
process mssm_ext_dd_22 = d,D => smu1,SMU1      
process mssm_ext_dd_23 = d,D => smu2,SMU2      
process mssm_ext_dd_24 = d,D => stau1,STAU1    
process mssm_ext_dd_25 = d,D => stau2,STAU2    
process mssm_ext_dd_26 = d,D => stau1,STAU2    
process mssm_ext_dd_27 = d,D => sn11,SN11      
process mssm_ext_dd_28 = d,D => sn21,SN21      
process mssm_ext_dd_29 = d,D => sn31,SN31      
process mssm_ext_dd_30 = d,D => su1,su1c       
process mssm_ext_dd_31 = d,D => su2,su2c       
process mssm_ext_dd_32 = d,D => sc1,sc1c       
process mssm_ext_dd_33 = d,D => sc2,sc2c       
process mssm_ext_dd_34 = d,D => st1,st1c       
process mssm_ext_dd_35 = d,D => st2,st2c       
process mssm_ext_dd_36 = d,D => st1,st2c       
process mssm_ext_dd_37 = d,D => sd1,sd1c       
process mssm_ext_dd_38 = d,D => sd2,sd2c       
process mssm_ext_dd_39 = d,D => ss1,ss1c       
process mssm_ext_dd_40 = d,D => ss2,ss2c       
process mssm_ext_dd_41 = d,D => sb1,sb1c       
process mssm_ext_dd_42 = d,D => sb2,sb2c       
process mssm_ext_dd_43 = d,D => sb1,sb2c       
process mssm_ext_dd_44 = d,D => neu1,neu1      
process mssm_ext_dd_45 = d,D => neu1,neu2      
process mssm_ext_dd_46 = d,D => neu1,neu3      
process mssm_ext_dd_47 = d,D => neu1,neu4      
process mssm_ext_dd_48 = d,D => neu2,neu2      
process mssm_ext_dd_49 = d,D => neu2,neu3      
process mssm_ext_dd_50 = d,D => neu2,neu4      
process mssm_ext_dd_51 = d,D => neu3,neu3      
process mssm_ext_dd_52 = d,D => neu3,neu4      
process mssm_ext_dd_53 = d,D => neu4,neu4      
process mssm_ext_dd_54 = d,D => "ch1+","ch1-"  
process mssm_ext_dd_55 = d,D => "ch2+","ch2-"  
process mssm_ext_dd_56 = d,D => "ch1+","ch2-"  
process mssm_ext_dd_57 = d,D => Z,h            
process mssm_ext_dd_58 = d,D => Z,HH           
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating d,D => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_1)
printf "************************************************************************"
printf "* Integrating d,D => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_2)
printf "************************************************************************"
printf "* Integrating d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_3)
printf "************************************************************************"
printf "* Integrating d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_4)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_5)
printf "************************************************************************"
printf "* Integrating d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_6)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_7)
printf "************************************************************************"
printf "* Integrating d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_8)
printf "************************************************************************"
printf "* Integrating d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_9)
printf "************************************************************************"
printf "* Integrating d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_10)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_11)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_12)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_13)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_14)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_15)
printf "************************************************************************"
printf "* Integrating d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_16)
printf "************************************************************************"
printf "* Integrating d,D => Z,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_17)
printf "************************************************************************"
printf "* Integrating d,D => Z,HH            @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_18)
printf "************************************************************************"
printf "* Integrating d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_19)
printf "************************************************************************"
printf "* Integrating d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_20)
printf "************************************************************************"
printf "* Integrating d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_21)
printf "************************************************************************"
printf "* Integrating d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_22)
printf "************************************************************************"
printf "* Integrating d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_23)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_24)
printf "************************************************************************"
printf "* Integrating d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_25)
printf "************************************************************************"
printf "* Integrating d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_26)
printf "************************************************************************"
printf "* Integrating d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_27)
printf "************************************************************************"
printf "* Integrating d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_28)
printf "************************************************************************"
printf "* Integrating d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_29)
printf "************************************************************************"
printf "* Integrating d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_30)
printf "************************************************************************"
printf "* Integrating d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_31)
printf "************************************************************************"
printf "* Integrating d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_32)
printf "************************************************************************"
printf "* Integrating d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_33)
printf "************************************************************************"
printf "* Integrating d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_34)
printf "************************************************************************"
printf "* Integrating d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_35)
printf "************************************************************************"
printf "* Integrating d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_36)
printf "************************************************************************"
printf "* Integrating d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_37)
printf "************************************************************************"
printf "* Integrating d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_38)
printf "************************************************************************"
printf "* Integrating d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_39)
printf "************************************************************************"
printf "* Integrating d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_40)
printf "************************************************************************"
printf "* Integrating d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_41)
printf "************************************************************************"
printf "* Integrating d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_42)
printf "************************************************************************"
printf "* Integrating d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_43)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_44)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_45)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_46)
printf "************************************************************************"
printf "* Integrating d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_47)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_48)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_49)
printf "************************************************************************"
printf "* Integrating d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_50)
printf "************************************************************************"
printf "* Integrating d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_51)
printf "************************************************************************"
printf "* Integrating d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_52)
printf "************************************************************************"
printf "* Integrating d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_53)
printf "************************************************************************"
printf "* Integrating d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_54)
printf "************************************************************************"
printf "* Integrating d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_55)
printf "************************************************************************"
printf "* Integrating d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_56)
printf "************************************************************************"
printf "* Integrating d,D => Z,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_57)
printf "************************************************************************"
printf "* Integrating d,D => Z,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = d,D
seed = 0
integrate (mssm_ext_dd_58)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking d,D => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006     ) ** 2 + error(mssm_ext_dd_1) ** 2)
printf "Expecting 3.3472     "
show(integral(mssm_ext_dd_1))
real pull = abs (integral (mssm_ext_dd_1) - 3.3472     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se1,SE1         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_1) == 3.3472     )
printf "************************************************************************"
printf "* Checking d,D => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_dd_2) ** 2)
printf "Expecting 2.0047     "
show(integral(mssm_ext_dd_2))
real pull = abs (integral (mssm_ext_dd_2) - 2.0047     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se2,SE2         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_2) == 2.0047     )
printf "************************************************************************"
printf "* Checking d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006     ) ** 2 + error(mssm_ext_dd_3) ** 2)
printf "Expecting 3.3465     "
show(integral(mssm_ext_dd_3))
real pull = abs (integral (mssm_ext_dd_3) - 3.3465     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu1,SMU1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_3) == 3.3465     )
printf "************************************************************************"
printf "* Checking d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_dd_4) ** 2)
printf "Expecting 2.0041     "
show(integral(mssm_ext_dd_4))
real pull = abs (integral (mssm_ext_dd_4) - 2.0041     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu2,SMU2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_4) == 2.0041     )
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_dd_5) ** 2)
printf "Expecting 1.7271     "
show(integral(mssm_ext_dd_5))
real pull = abs (integral (mssm_ext_dd_5) - 1.7271     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_5) == 1.7271     )
printf "************************************************************************"
printf "* Checking d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004     ) ** 2 + error(mssm_ext_dd_6) ** 2)
printf "Expecting 2.4570     "
show(integral(mssm_ext_dd_6))
real pull = abs (integral (mssm_ext_dd_6) - 2.4570     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau2,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_6) == 2.4570     )
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_dd_7) ** 2)
printf "Expecting 0.6950     "
show(integral(mssm_ext_dd_7))
real pull = abs (integral (mssm_ext_dd_7) - 0.6950     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_7) == 0.6950     )
printf "************************************************************************"
printf "* Checking d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_dd_8) ** 2)
printf "Expecting 7.318      "
show(integral(mssm_ext_dd_8))
real pull = abs (integral (mssm_ext_dd_8) - 7.318      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn11,SN11       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_8) == 7.318      )
printf "************************************************************************"
printf "* Checking d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_dd_9) ** 2)
printf "Expecting 7.314      "
show(integral(mssm_ext_dd_9))
real pull = abs (integral (mssm_ext_dd_9) - 7.314      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn21,SN21       @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_dd_9) == 7.314      )
printf "************************************************************************"
printf "* Checking d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_dd_10) ** 2)
printf "Expecting 7.454      "
show(integral(mssm_ext_dd_10))
real pull = abs (integral (mssm_ext_dd_10) - 7.454      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn31,SN31       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_10) == 7.454      )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000007  ) ** 2 + error(mssm_ext_dd_11) ** 2)
printf "Expecting 0.1189331  "
show(integral(mssm_ext_dd_11))
real pull = abs (integral (mssm_ext_dd_11) - 0.1189331  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_11) == 0.1189331  )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000001   ) ** 2 + error(mssm_ext_dd_12) ** 2)
printf "Expecting 0.249935   "
show(integral(mssm_ext_dd_12))
real pull = abs (integral (mssm_ext_dd_12) - 0.249935   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_12) == 0.249935   )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000004   ) ** 2 + error(mssm_ext_dd_13) ** 2)
printf "Expecting 0.817225   "
show(integral(mssm_ext_dd_13))
real pull = abs (integral (mssm_ext_dd_13) - 0.817225   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu3       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_13) == 0.817225   )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000002  ) ** 2 + error(mssm_ext_dd_14) ** 2)
printf "Expecting 0.0212673  "
show(integral(mssm_ext_dd_14))
real pull = abs (integral (mssm_ext_dd_14) - 0.0212673  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu4       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_14) == 0.0212673  )
printf "************************************************************************"
printf "* Checking d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000009   ) ** 2 + error(mssm_ext_dd_15) ** 2)
printf "Expecting 1.939907   "
show(integral(mssm_ext_dd_15))
real pull = abs (integral (mssm_ext_dd_15) - 1.939907   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_15) == 1.939907   )
printf "************************************************************************"
printf "* Checking d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003      ) ** 2 + error(mssm_ext_dd_16) ** 2)
printf "Expecting 137.161      "
show(integral(mssm_ext_dd_16))
real pull = abs (integral (mssm_ext_dd_16) - 137.161      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch1+,ch1-   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_16) == 137.161      )
printf "************************************************************************"
printf "* Checking d,D => Z,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003      ) ** 2 + error(mssm_ext_dd_17) ** 2)
printf "Expecting 29.235      "
show(integral(mssm_ext_dd_17))
real pull = abs (integral (mssm_ext_dd_17) - 29.235      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,h             @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_17) == 29.235      )
printf "************************************************************************"
printf "* Checking d,D => Z,HH            @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00000002 ) ** 2 + error(mssm_ext_dd_18) ** 2)
printf "Expecting 0.00030421 "
show(integral(mssm_ext_dd_18))
real pull = abs (integral (mssm_ext_dd_18) - 0.00030421 ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,HH            @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_18) == 0.00030421 )
printf "************************************************************************"
printf "* Checking d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.2        ) ** 2 + error(mssm_ext_dd_19) ** 2)
printf "Expecting 1133.4        "
show(integral(mssm_ext_dd_19))
real pull = abs (integral (mssm_ext_dd_19) - 1133.4        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sgl,sgl         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_19) == 1133.4        )
printf "************************************************************************"
printf "* Checking d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_dd_20) ** 2)
printf "Expecting 0.9845     "
show(integral(mssm_ext_dd_20))
real pull = abs (integral (mssm_ext_dd_20) - 0.9845     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se1,SE1         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_20) == 0.9845     )
printf "************************************************************************"
printf "* Checking d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004    ) ** 2 + error(mssm_ext_dd_21) ** 2)
printf "Expecting 0.21578    "
show(integral(mssm_ext_dd_21))
real pull = abs (integral (mssm_ext_dd_21) - 0.21578    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => se2,SE2         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_21) == 0.21578    )
printf "************************************************************************"
printf "* Checking d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_dd_22) ** 2)
printf "Expecting 0.9843     "
show(integral(mssm_ext_dd_22))
real pull = abs (integral (mssm_ext_dd_22) - 0.9843     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu1,SMU1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_22) == 0.9843     )
printf "************************************************************************"
printf "* Checking d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004    ) ** 2 + error(mssm_ext_dd_23) ** 2)
printf "Expecting 0.21572    "
show(integral(mssm_ext_dd_23))
real pull = abs (integral (mssm_ext_dd_23) - 0.21572    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => smu2,SMU2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_23) == 0.21572    )
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003    ) ** 2 + error(mssm_ext_dd_24) ** 2)
printf "Expecting 0.17264    "
show(integral(mssm_ext_dd_24))
real pull = abs (integral (mssm_ext_dd_24) - 0.17264    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_24) == 0.17264    )
printf "************************************************************************"
printf "* Checking d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_dd_25) ** 2)
printf "Expecting 0.8171     "
show(integral(mssm_ext_dd_25))
real pull = abs (integral (mssm_ext_dd_25) - 0.8171     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau2,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_dd_25) == 0.8171     )
printf "************************************************************************"
printf "* Checking d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002    ) ** 2 + error(mssm_ext_dd_26) ** 2)
printf "Expecting 0.10538    "
show(integral(mssm_ext_dd_26))
real pull = abs (integral (mssm_ext_dd_26) - 0.10538    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => stau1,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_26) == 0.10538    )
printf "************************************************************************"
printf "* Checking d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_dd_27) ** 2)
printf "Expecting 1.4391     "
show(integral(mssm_ext_dd_27))
real pull = abs (integral (mssm_ext_dd_27) - 1.4391     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn11,SN11       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_27) == 1.4391     )
printf "************************************************************************"
printf "* Checking d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_dd_28) ** 2)
printf "Expecting 1.4385     "
show(integral(mssm_ext_dd_28))
real pull = abs (integral (mssm_ext_dd_28) - 1.4385     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn21,SN21       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_28) == 1.4385     )
printf "************************************************************************"
printf "* Checking d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_dd_29) ** 2)
printf "Expecting 1.4400     "
show(integral(mssm_ext_dd_29))
real pull = abs (integral (mssm_ext_dd_29) - 1.4400     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sn31,SN31       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_29) == 1.4400     )
printf "************************************************************************"
printf "* Checking d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_30) ** 2)
printf "Expecting 174.67       "
show(integral(mssm_ext_dd_30))
real pull = abs (integral (mssm_ext_dd_30) - 174.67       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_30) == 174.67       )
printf "************************************************************************"
printf "* Checking d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_dd_31) ** 2)
printf "Expecting 185.19       "
show(integral(mssm_ext_dd_31))
real pull = abs (integral (mssm_ext_dd_31) - 185.19       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_31) == 185.19       )
printf "************************************************************************"
printf "* Checking d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_32) ** 2)
printf "Expecting 178.10       "
show(integral(mssm_ext_dd_32))
real pull = abs (integral (mssm_ext_dd_32) - 178.10       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_32) == 178.10       )
printf "************************************************************************"
printf "* Checking d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_33) ** 2)
printf "Expecting 185.21       "
show(integral(mssm_ext_dd_33))
real pull = abs (integral (mssm_ext_dd_33) - 185.21       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_33) == 185.21       )
printf "************************************************************************"
printf "* Checking d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_dd_34) ** 2)
printf "Expecting 244.45       "
show(integral(mssm_ext_dd_34))
real pull = abs (integral (mssm_ext_dd_34) - 244.45       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_34) == 244.45       )
printf "************************************************************************"
printf "* Checking d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_35) ** 2)
printf "Expecting 168.80       "
show(integral(mssm_ext_dd_35))
real pull = abs (integral (mssm_ext_dd_35) - 168.80       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_35) == 168.80       )
printf "************************************************************************"
printf "* Checking d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008    ) ** 2 + error(mssm_ext_dd_36) ** 2)
printf "Expecting 0.61183    "
show(integral(mssm_ext_dd_36))
real pull = abs (integral (mssm_ext_dd_36) - 0.61183    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => st1,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_36) == 0.61183    )
printf "************************************************************************"
printf "* Checking d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1        ) ** 2 + error(mssm_ext_dd_37) ** 2)
printf "Expecting 790.3        "
show(integral(mssm_ext_dd_37))
real pull = abs (integral (mssm_ext_dd_37) - 790.3        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_37) == 790.3        )
printf "************************************************************************"
printf "* Checking d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1        ) ** 2 + error(mssm_ext_dd_38) ** 2)
printf "Expecting 926.9        "
show(integral(mssm_ext_dd_38))
real pull = abs (integral (mssm_ext_dd_38) - 926.9        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_38) == 926.9        )
printf "************************************************************************"
printf "* Checking d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_39) ** 2)
printf "Expecting 175.92       "
show(integral(mssm_ext_dd_39))
real pull = abs (integral (mssm_ext_dd_39) - 175.92       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_39) == 175.92       )
printf "************************************************************************"
printf "* Checking d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_40) ** 2)
printf "Expecting 185.47       "
show(integral(mssm_ext_dd_40))
real pull = abs (integral (mssm_ext_dd_40) - 185.47       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_40) == 185.47       )
printf "************************************************************************"
printf "* Checking d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_dd_41) ** 2)
printf "Expecting 200.54       "
show(integral(mssm_ext_dd_41))
real pull = abs (integral (mssm_ext_dd_41) - 200.54       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_41) == 200.54       )
printf "************************************************************************"
printf "* Checking d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_dd_42) ** 2)
printf "Expecting 186.37       "
show(integral(mssm_ext_dd_42))
real pull = abs (integral (mssm_ext_dd_42) - 186.37       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_42) == 186.37       )
printf "************************************************************************"
printf "* Checking d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_dd_43) ** 2)
printf "Expecting 0.25429    "
show(integral(mssm_ext_dd_43))
real pull = abs (integral (mssm_ext_dd_43) - 0.25429    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => sb1,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_43) == 0.25429    )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000004   ) ** 2 + error(mssm_ext_dd_44) ** 2)
printf "Expecting 0.079125   "
show(integral(mssm_ext_dd_44))
real pull = abs (integral (mssm_ext_dd_44) - 0.079125   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_44) == 0.079125   )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002    ) ** 2 + error(mssm_ext_dd_45) ** 2)
printf "Expecting 0.34310    "
show(integral(mssm_ext_dd_45))
real pull = abs (integral (mssm_ext_dd_45) - 0.34310    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_45) == 0.34310    )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000003   ) ** 2 + error(mssm_ext_dd_46) ** 2)
printf "Expecting 0.173875   "
show(integral(mssm_ext_dd_46))
real pull = abs (integral (mssm_ext_dd_46) - 0.173875   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_46) == 0.173875   )
printf "************************************************************************"
printf "* Checking d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000003   ) ** 2 + error(mssm_ext_dd_47) ** 2)
printf "Expecting 0.140020   "
show(integral(mssm_ext_dd_47))
real pull = abs (integral (mssm_ext_dd_47) - 0.140020   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu1,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_47) == 0.140020   )
printf "************************************************************************"
printf "* Checking d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_dd_48) ** 2)
printf "Expecting 3.1011     "
show(integral(mssm_ext_dd_48))
real pull = abs (integral (mssm_ext_dd_48) - 3.1011     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_48) == 3.1011     )
printf "************************************************************************"
printf "* Checking d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002    ) ** 2 + error(mssm_ext_dd_49) ** 2)
printf "Expecting 1.07909    "
show(integral(mssm_ext_dd_49))
real pull = abs (integral (mssm_ext_dd_49) - 1.07909    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_49) == 1.07909    )
printf "************************************************************************"
printf "* Checking d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00006    ) ** 2 + error(mssm_ext_dd_50) ** 2)
printf "Expecting 1.16852    "
show(integral(mssm_ext_dd_50))
real pull = abs (integral (mssm_ext_dd_50) - 1.16852    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu2,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_50) == 1.16852    )
printf "************************************************************************"
printf "* Checking d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00000004 ) ** 2 + error(mssm_ext_dd_51) ** 2)
printf "Expecting 0.00266298 "
show(integral(mssm_ext_dd_51))
real pull = abs (integral (mssm_ext_dd_51) - 0.00266298 ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu3,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_51) == 0.00266298 )
printf "************************************************************************"
printf "* Checking d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_dd_52) ** 2)
printf "Expecting 4.76810    "
show(integral(mssm_ext_dd_52))
real pull = abs (integral (mssm_ext_dd_52) - 4.76810    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu3,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_52) == 4.76810    )
printf "************************************************************************"
printf "* Checking d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000006   ) ** 2 + error(mssm_ext_dd_53) ** 2)
printf "Expecting 0.087994   "
show(integral(mssm_ext_dd_53))
real pull = abs (integral (mssm_ext_dd_53) - 0.087994   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => neu4,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_53) == 0.087994   )
printf "************************************************************************"
printf "* Checking d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_dd_54) ** 2)
printf "Expecting 10.504      "
show(integral(mssm_ext_dd_54))
real pull = abs (integral (mssm_ext_dd_54) - 10.504      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_54) == 10.504      )
printf "************************************************************************"
printf "* Checking d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_dd_55) ** 2)
printf "Expecting 4.4960     "
show(integral(mssm_ext_dd_55))
real pull = abs (integral (mssm_ext_dd_55) - 4.4960     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_55) == 4.4960     )
printf "************************************************************************"
printf "* Checking d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005    ) ** 2 + error(mssm_ext_dd_56) ** 2)
printf "Expecting 0.77407    "
show(integral(mssm_ext_dd_56))
real pull = abs (integral (mssm_ext_dd_56) - 0.77407    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_dd_56) == 0.77407    )
printf "************************************************************************"
printf "* Checking d,D => Z,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_dd_57) ** 2)
printf "Expecting 1.5337     "
show(integral(mssm_ext_dd_57))
real pull = abs (integral (mssm_ext_dd_57) - 1.5337     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,h             @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_57) == 1.5337     )
printf "************************************************************************"
printf "* Checking d,D => Z,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005E-4  ) ** 2 + error(mssm_ext_dd_58) ** 2)
printf "Expecting 2.7112E-4  "
show(integral(mssm_ext_dd_58))
real pull = abs (integral (mssm_ext_dd_58) - 2.7112E-4  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,D => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,D => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,D => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,D => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,D => Z,HH            @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_dd_58) == 2.7112E-4  )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
