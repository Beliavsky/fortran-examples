

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssmtest-gz.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! --------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                    -----
! --------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! --------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! --------------------------------------------------------------------------
iterations = 3:200000
! --------------------------------------------------------------------------














! --------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_gz_1 = g,Z => su1,su1c       
process mssm_ext_gz_2 = g,Z => su2,su2c       
process mssm_ext_gz_3 = g,Z => sc1,sc1c       
process mssm_ext_gz_4 = g,Z => sc2,sc2c       
process mssm_ext_gz_5 = g,Z => st1,st1c       
process mssm_ext_gz_6 = g,Z => st2,st2c       
process mssm_ext_gz_7 = g,Z => st1,st2c       
process mssm_ext_gz_8 = g,Z => sd1,sd1c       
process mssm_ext_gz_9 = g,Z => sd2,sd2c       
process mssm_ext_gz_10 = g,Z => ss1,ss1c       
process mssm_ext_gz_11 = g,Z => ss2,ss2c       
process mssm_ext_gz_12 = g,Z => sb1,sb1c       
process mssm_ext_gz_13 = g,Z => sb2,sb2c       
process mssm_ext_gz_14 = g,Z => sb1,sb2c       
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_1)
printf "************************************************************************"
printf "* Integrating g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_2)
printf "************************************************************************"
printf "* Integrating g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_3)
printf "************************************************************************"
printf "* Integrating g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_4)
printf "************************************************************************"
printf "* Integrating g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_5)
printf "************************************************************************"
printf "* Integrating g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_6)
printf "************************************************************************"
printf "* Integrating g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_7)
printf "************************************************************************"
printf "* Integrating g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_8)
printf "************************************************************************"
printf "* Integrating g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_9)
printf "************************************************************************"
printf "* Integrating g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_10)
printf "************************************************************************"
printf "* Integrating g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_11)
printf "************************************************************************"
printf "* Integrating g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_12)
printf "************************************************************************"
printf "* Integrating g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_13)
printf "************************************************************************"
printf "* Integrating g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = g,Z
seed = 0
integrate (mssm_ext_gz_14)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009    ) ** 2 + error(mssm_ext_gz_1) ** 2)
printf "Expecting 59.7774     "
show(integral(mssm_ext_gz_1))
real pull = abs (integral (mssm_ext_gz_1) - 59.7774     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_1) == 59.7774     )
printf "************************************************************************"
printf "* Checking g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_gz_2) ** 2)
printf "Expecting 10.9085     "
show(integral(mssm_ext_gz_2))
real pull = abs (integral (mssm_ext_gz_2) - 10.9085     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_2) == 10.9085     )
printf "************************************************************************"
printf "* Checking g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009    ) ** 2 + error(mssm_ext_gz_3) ** 2)
printf "Expecting 59.7772     "
show(integral(mssm_ext_gz_3))
real pull = abs (integral (mssm_ext_gz_3) - 59.7772     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_3) == 59.7772     )
printf "************************************************************************"
printf "* Checking g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_gz_4) ** 2)
printf "Expecting 10.9084     "
show(integral(mssm_ext_gz_4))
real pull = abs (integral (mssm_ext_gz_4) - 10.9084     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_4) == 10.9084     )
printf "************************************************************************"
printf "* Checking g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000002 ) ** 2 + error(mssm_ext_gz_5) ** 2)
printf "Expecting 0.0074179  "
show(integral(mssm_ext_gz_5))
real pull = abs (integral (mssm_ext_gz_5) - 0.0074179  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_5) == 0.0074179  )
printf "************************************************************************"
printf "* Checking g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003    ) ** 2 + error(mssm_ext_gz_6) ** 2)
printf "Expecting 20.2091     "
show(integral(mssm_ext_gz_6))
real pull = abs (integral (mssm_ext_gz_6) - 20.2091     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_6) == 20.2091     )
printf "************************************************************************"
printf "* Checking g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.004     ) ** 2 + error(mssm_ext_gz_7) ** 2)
printf "Expecting 111.986      "
show(integral(mssm_ext_gz_7))
real pull = abs (integral (mssm_ext_gz_7) - 111.986      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => st1,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_7) == 111.986      )
printf "************************************************************************"
printf "* Checking g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_gz_8) ** 2)
printf "Expecting 86.9615     "
show(integral(mssm_ext_gz_8))
real pull = abs (integral (mssm_ext_gz_8) - 86.9615     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 5 * error_sum
expect (integral (mssm_ext_gz_8) == 86.9615     )
printf "************************************************************************"
printf "* Checking g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004   ) ** 2 + error(mssm_ext_gz_9) ** 2)
printf "Expecting 2.73090    "
show(integral(mssm_ext_gz_9))
real pull = abs (integral (mssm_ext_gz_9) - 2.73090    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_gz_9) == 2.73090    )
printf "************************************************************************"
printf "* Checking g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_gz_10) ** 2)
printf "Expecting 86.959      "
show(integral(mssm_ext_gz_10))
real pull = abs (integral (mssm_ext_gz_10) - 86.959      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_gz_10) == 86.959      )
printf "************************************************************************"
printf "* Checking g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004   ) ** 2 + error(mssm_ext_gz_11) ** 2)
printf "Expecting 2.73090    "
show(integral(mssm_ext_gz_11))
real pull = abs (integral (mssm_ext_gz_11) - 2.73090    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_gz_11) == 2.73090    )
printf "************************************************************************"
printf "* Checking g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_gz_12) ** 2)
printf "Expecting 73.360      "
show(integral(mssm_ext_gz_12))
real pull = abs (integral (mssm_ext_gz_12) - 73.360      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_12) == 73.360      )
printf "************************************************************************"
printf "* Checking g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000004  ) ** 2 + error(mssm_ext_gz_13) ** 2)
printf "Expecting 0.268554   "
show(integral(mssm_ext_gz_13))
real pull = abs (integral (mssm_ext_gz_13) - 0.268554   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_13) == 0.268554   )
printf "************************************************************************"
printf "* Checking g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_gz_14) ** 2)
printf "Expecting 12.5214     "
show(integral(mssm_ext_gz_14))
real pull = abs (integral (mssm_ext_gz_14) - 12.5214     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in g,Z => sb1,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_gz_14) == 12.5214     )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
