

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-uu.m4 1764 2010-02-11 23:33:52Z jr_reuter $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! ------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                  -----
! ------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! ------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! ------------------------------------------------------------------------
iterations = 3:200000
! ------------------------------------------------------------------------



























































! ------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_uu_1 = u,U => se1,SE1        
process mssm_ext_uu_2 = u,U => se2,SE2        
process mssm_ext_uu_3 = u,U => smu1,SMU1      
process mssm_ext_uu_4 = u,U => smu2,SMU2      
process mssm_ext_uu_5 = u,U => stau1,STAU1    
process mssm_ext_uu_6 = u,U => stau2,STAU2    
process mssm_ext_uu_7 = u,U => stau1,STAU2    
process mssm_ext_uu_8 = u,U => sn11,SN11      
process mssm_ext_uu_9 = u,U => sn21,SN21      
process mssm_ext_uu_10 = u,U => sn31,SN31      
process mssm_ext_uu_11 = u,U => neu1,neu1      
process mssm_ext_uu_12 = u,U => neu1,neu2      
process mssm_ext_uu_13 = u,U => neu1,neu3      
process mssm_ext_uu_14 = u,U => neu1,neu4      
process mssm_ext_uu_15 = u,U => neu2,neu2      
process mssm_ext_uu_16 = u,U => "ch1+","ch1-"  
process mssm_ext_uu_17 = u,U => Z,h            
process mssm_ext_uu_18 = u,U => Z,HH           
process mssm_ext_uu_19 = u,U => sgl,sgl        
process mssm_ext_uu_20 = u,U => se1,SE1        
process mssm_ext_uu_21 = u,U => se2,SE2        
process mssm_ext_uu_22 = u,U => smu1,SMU1      
process mssm_ext_uu_23 = u,U => smu2,SMU2      
process mssm_ext_uu_24 = u,U => stau1,STAU1    
process mssm_ext_uu_25 = u,U => stau2,STAU2    
process mssm_ext_uu_26 = u,U => stau1,STAU2    
process mssm_ext_uu_27 = u,U => sn11,SN11      
process mssm_ext_uu_28 = u,U => sn21,SN21      
process mssm_ext_uu_29 = u,U => sn31,SN31      
process mssm_ext_uu_30 = u,U => su1,su1c       
process mssm_ext_uu_31 = u,U => su2,su2c       
process mssm_ext_uu_32 = u,U => su1,su2c       
process mssm_ext_uu_33 = u,U => sc1,sc1c       
process mssm_ext_uu_34 = u,U => sc2,sc2c       
process mssm_ext_uu_35 = u,U => st1,st1c       
process mssm_ext_uu_36 = u,U => st2,st2c       
process mssm_ext_uu_37 = u,U => st1,st2c       
process mssm_ext_uu_38 = u,U => sd1,sd1c       
process mssm_ext_uu_39 = u,U => sd2,sd2c       
process mssm_ext_uu_40 = u,U => ss1,ss1c       
process mssm_ext_uu_41 = u,U => ss2,ss2c       
process mssm_ext_uu_42 = u,U => sb1,sb1c       
process mssm_ext_uu_43 = u,U => sb2,sb2c       
process mssm_ext_uu_44 = u,U => sb1,sb2c       
process mssm_ext_uu_45 = u,U => neu1,neu1      
process mssm_ext_uu_46 = u,U => neu1,neu2      
process mssm_ext_uu_47 = u,U => neu1,neu3      
process mssm_ext_uu_48 = u,U => neu1,neu4      
process mssm_ext_uu_49 = u,U => neu2,neu2      
process mssm_ext_uu_50 = u,U => neu2,neu3      
process mssm_ext_uu_51 = u,U => neu2,neu4      
process mssm_ext_uu_52 = u,U => neu3,neu3      
process mssm_ext_uu_53 = u,U => neu3,neu4      
process mssm_ext_uu_54 = u,U => neu4,neu4      
process mssm_ext_uu_55 = u,U => "ch1+","ch1-"  
process mssm_ext_uu_56 = u,U => "ch2+","ch2-"  
process mssm_ext_uu_57 = u,U => "ch1+","ch2-"  
process mssm_ext_uu_58 = u,U => Z,h            
process mssm_ext_uu_59 = u,U => Z,HH           
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating u,U => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_1)
printf "************************************************************************"
printf "* Integrating u,U => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_2)
printf "************************************************************************"
printf "* Integrating u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_3)
printf "************************************************************************"
printf "* Integrating u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_4)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_5)
printf "************************************************************************"
printf "* Integrating u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_6)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_7)
printf "************************************************************************"
printf "* Integrating u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_8)
printf "************************************************************************"
printf "* Integrating u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_9)
printf "************************************************************************"
printf "* Integrating u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_10)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_11)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_12)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_13)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_14)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_15)
printf "************************************************************************"
printf "* Integrating u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_16)
printf "************************************************************************"
printf "* Integrating u,U => Z,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_17)
printf "************************************************************************"
printf "* Integrating u,U => Z,HH            @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_18)
printf "************************************************************************"
printf "* Integrating u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_19)
printf "************************************************************************"
printf "* Integrating u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_20)
printf "************************************************************************"
printf "* Integrating u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_21)
printf "************************************************************************"
printf "* Integrating u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_22)
printf "************************************************************************"
printf "* Integrating u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_23)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_24)
printf "************************************************************************"
printf "* Integrating u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_25)
printf "************************************************************************"
printf "* Integrating u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_26)
printf "************************************************************************"
printf "* Integrating u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_27)
printf "************************************************************************"
printf "* Integrating u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_28)
printf "************************************************************************"
printf "* Integrating u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_29)
printf "************************************************************************"
printf "* Integrating u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_30)
printf "************************************************************************"
printf "* Integrating u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_31)
printf "************************************************************************"
printf "* Integrating u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_32)
printf "************************************************************************"
printf "* Integrating u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_33)
printf "************************************************************************"
printf "* Integrating u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_34)
printf "************************************************************************"
printf "* Integrating u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_35)
printf "************************************************************************"
printf "* Integrating u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_36)
printf "************************************************************************"
printf "* Integrating u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_37)
printf "************************************************************************"
printf "* Integrating u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_38)
printf "************************************************************************"
printf "* Integrating u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_39)
printf "************************************************************************"
printf "* Integrating u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_40)
printf "************************************************************************"
printf "* Integrating u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_41)
printf "************************************************************************"
printf "* Integrating u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_42)
printf "************************************************************************"
printf "* Integrating u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_43)
printf "************************************************************************"
printf "* Integrating u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_44)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_45)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_46)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_47)
printf "************************************************************************"
printf "* Integrating u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_48)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_49)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_50)
printf "************************************************************************"
printf "* Integrating u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_51)
printf "************************************************************************"
printf "* Integrating u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_52)
printf "************************************************************************"
printf "* Integrating u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_53)
printf "************************************************************************"
printf "* Integrating u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_54)
printf "************************************************************************"
printf "* Integrating u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_55)
printf "************************************************************************"
printf "* Integrating u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_56)
printf "************************************************************************"
printf "* Integrating u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_57)
printf "************************************************************************"
printf "* Integrating u,U => Z,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_58)
printf "************************************************************************"
printf "* Integrating u,U => Z,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = u,U
seed = 0
integrate (mssm_ext_uu_59)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking u,U => se1,SE1         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009     ) ** 2 + error(mssm_ext_uu_1) ** 2)
printf "Expecting 5.1698     "
show(integral(mssm_ext_uu_1))
real pull = abs (integral (mssm_ext_uu_1) - 5.1698     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se1,SE1         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se1,SE1         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_1) == 5.1698     )
printf "************************************************************************"
printf "* Checking u,U => se2,SE2         @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_2) ** 2)
printf "Expecting 6.538      "
show(integral(mssm_ext_uu_2))
real pull = abs (integral (mssm_ext_uu_2) - 6.538      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se2,SE2         @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se2,SE2         @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_2) == 6.538      )
printf "************************************************************************"
printf "* Checking u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0009     ) ** 2 + error(mssm_ext_uu_3) ** 2)
printf "Expecting 5.1687     "
show(integral(mssm_ext_uu_3))
real pull = abs (integral (mssm_ext_uu_3) - 5.1687     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu1,SMU1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_3) == 5.1687     )
printf "************************************************************************"
printf "* Checking u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_4) ** 2)
printf "Expecting 6.536      "
show(integral(mssm_ext_uu_4))
real pull = abs (integral (mssm_ext_uu_4) - 6.536      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu2,SMU2       @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_4) == 6.536      )
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_5) ** 2)
printf "Expecting 6.992      "
show(integral(mssm_ext_uu_5))
real pull = abs (integral (mssm_ext_uu_5) - 6.992      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_5) == 6.992      )
printf "************************************************************************"
printf "* Checking u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007     ) ** 2 + error(mssm_ext_uu_6) ** 2)
printf "Expecting 4.1264     "
show(integral(mssm_ext_uu_6))
real pull = abs (integral (mssm_ext_uu_6) - 4.1264     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau2,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_6) == 4.1264     )
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00009    ) ** 2 + error(mssm_ext_uu_7) ** 2)
printf "Expecting 0.54193    "
show(integral(mssm_ext_uu_7))
real pull = abs (integral (mssm_ext_uu_7) - 0.54193    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_7) == 0.54193    )
printf "************************************************************************"
printf "* Checking u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_8) ** 2)
printf "Expecting 5.706      "
show(integral(mssm_ext_uu_8))
real pull = abs (integral (mssm_ext_uu_8) - 5.706      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn11,SN11       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_8) == 5.706      )
printf "************************************************************************"
printf "* Checking u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_9) ** 2)
printf "Expecting 5.704      "
show(integral(mssm_ext_uu_9))
real pull = abs (integral (mssm_ext_uu_9) - 5.704      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn21,SN21       @ sqrt(s) = 500 GeV"
endif
tolerance = 5 * error_sum
expect (integral (mssm_ext_uu_9) == 5.704      )
printf "************************************************************************"
printf "* Checking u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_10) ** 2)
printf "Expecting 5.813      "
show(integral(mssm_ext_uu_10))
real pull = abs (integral (mssm_ext_uu_10) - 5.813      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn31,SN31       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_10) == 5.813      )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00002    ) ** 2 + error(mssm_ext_uu_11) ** 2)
printf "Expecting 2.24829    "
show(integral(mssm_ext_uu_11))
real pull = abs (integral (mssm_ext_uu_11) - 2.24829    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu1       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_11) == 2.24829    )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000009  ) ** 2 + error(mssm_ext_uu_12) ** 2)
printf "Expecting 0.0538560  "
show(integral(mssm_ext_uu_12))
real pull = abs (integral (mssm_ext_uu_12) - 0.0538560  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_12) == 0.0538560  )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000003   ) ** 2 + error(mssm_ext_uu_13) ** 2)
printf "Expecting 0.524526   "
show(integral(mssm_ext_uu_13))
real pull = abs (integral (mssm_ext_uu_13) - 0.524526   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu3       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_13) == 0.524526   )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00000008 ) ** 2 + error(mssm_ext_uu_14) ** 2)
printf "Expecting 0.00982339 "
show(integral(mssm_ext_uu_14))
real pull = abs (integral (mssm_ext_uu_14) - 0.00982339 ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu4       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_14) == 0.00982339 )
printf "************************************************************************"
printf "* Checking u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003    ) ** 2 + error(mssm_ext_uu_15) ** 2)
printf "Expecting 3.66472    "
show(integral(mssm_ext_uu_15))
real pull = abs (integral (mssm_ext_uu_15) - 3.66472    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_15) == 3.66472    )
printf "************************************************************************"
printf "* Checking u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_16) ** 2)
printf "Expecting 153.97       "
show(integral(mssm_ext_uu_16))
real pull = abs (integral (mssm_ext_uu_16) - 153.97       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch1+,ch1-   @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_16) == 153.97       )
printf "************************************************************************"
printf "* Checking u,U => Z,h             @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001      ) ** 2 + error(mssm_ext_uu_17) ** 2)
printf "Expecting 22.797      "
show(integral(mssm_ext_uu_17))
real pull = abs (integral (mssm_ext_uu_17) - 22.797      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,h             @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,h             @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_17) == 22.797      )
printf "************************************************************************"
printf "* Checking u,U => Z,HH            @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000000001) ** 2 + error(mssm_ext_uu_18) ** 2)
printf "Expecting 0.000237224"
show(integral(mssm_ext_uu_18))
real pull = abs (integral (mssm_ext_uu_18) - 0.000237224) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,HH            @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,HH            @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_18) == 0.000237224)
printf "************************************************************************"
printf "* Checking u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.2        ) ** 2 + error(mssm_ext_uu_19) ** 2)
printf "Expecting 1137.8        "
show(integral(mssm_ext_uu_19))
real pull = abs (integral (mssm_ext_uu_19) - 1137.8        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sgl,sgl         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_19) == 1137.8        )
printf "************************************************************************"
printf "* Checking u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_20) ** 2)
printf "Expecting 1.5469     "
show(integral(mssm_ext_uu_20))
real pull = abs (integral (mssm_ext_uu_20) - 1.5469     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se1,SE1         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_20) == 1.5469     )
printf "************************************************************************"
printf "* Checking u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_uu_21) ** 2)
printf "Expecting 0.7318     "
show(integral(mssm_ext_uu_21))
real pull = abs (integral (mssm_ext_uu_21) - 0.7318     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => se2,SE2         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_21) == 0.7318     )
printf "************************************************************************"
printf "* Checking u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0003     ) ** 2 + error(mssm_ext_uu_22) ** 2)
printf "Expecting 1.5466     "
show(integral(mssm_ext_uu_22))
real pull = abs (integral (mssm_ext_uu_22) - 1.5466     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu1,SMU1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_22) == 1.5466     )
printf "************************************************************************"
printf "* Checking u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_uu_23) ** 2)
printf "Expecting 0.7316     "
show(integral(mssm_ext_uu_23))
real pull = abs (integral (mssm_ext_uu_23) - 0.7316     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => smu2,SMU2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_23) == 0.7316     )
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_uu_24) ** 2)
printf "Expecting 0.7194     "
show(integral(mssm_ext_uu_24))
real pull = abs (integral (mssm_ext_uu_24) - 0.7194     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_24) == 0.7194     )
printf "************************************************************************"
printf "* Checking u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_25) ** 2)
printf "Expecting 1.3957     "
show(integral(mssm_ext_uu_25))
real pull = abs (integral (mssm_ext_uu_25) - 1.3957     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau2,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 6 * error_sum
expect (integral (mssm_ext_uu_25) == 1.3957     )
printf "************************************************************************"
printf "* Checking u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00001    ) ** 2 + error(mssm_ext_uu_26) ** 2)
printf "Expecting 0.08217    "
show(integral(mssm_ext_uu_26))
real pull = abs (integral (mssm_ext_uu_26) - 0.08217    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => stau1,STAU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_26) == 0.08217    )
printf "************************************************************************"
printf "* Checking u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_27) ** 2)
printf "Expecting 1.1222     "
show(integral(mssm_ext_uu_27))
real pull = abs (integral (mssm_ext_uu_27) - 1.1222     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn11,SN11       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_27) == 1.1222     )
printf "************************************************************************"
printf "* Checking u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_28) ** 2)
printf "Expecting 1.1217     "
show(integral(mssm_ext_uu_28))
real pull = abs (integral (mssm_ext_uu_28) - 1.1217     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn21,SN21       @ sqrt(s) = 2000 GeV"
endif
tolerance = 6 * error_sum
expect (integral (mssm_ext_uu_28) == 1.1217     )
printf "************************************************************************"
printf "* Checking u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_29) ** 2)
printf "Expecting 1.1229     "
show(integral(mssm_ext_uu_29))
real pull = abs (integral (mssm_ext_uu_29) - 1.1229     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sn31,SN31       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_29) == 1.1229     )
printf "************************************************************************"
printf "* Checking u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1        ) ** 2 + error(mssm_ext_uu_30) ** 2)
printf "Expecting 799.6        "
show(integral(mssm_ext_uu_30))
real pull = abs (integral (mssm_ext_uu_30) - 799.6        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su1,su1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_30) == 799.6        )
printf "************************************************************************"
printf "* Checking u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1        ) ** 2 + error(mssm_ext_uu_31) ** 2)
printf "Expecting 879.7        "
show(integral(mssm_ext_uu_31))
real pull = abs (integral (mssm_ext_uu_31) - 879.7        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su2,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_31) == 879.7        )
printf "************************************************************************"
printf "* Checking u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_uu_32) ** 2)
printf "Expecting 784.16       "
show(integral(mssm_ext_uu_32))
real pull = abs (integral (mssm_ext_uu_32) - 784.16       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => su1,su2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_32) == 784.16       )
printf "************************************************************************"
printf "* Checking u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_33) ** 2)
printf "Expecting 178.39       "
show(integral(mssm_ext_uu_33))
real pull = abs (integral (mssm_ext_uu_33) - 178.39       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sc1,sc1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_33) == 178.39       )
printf "************************************************************************"
printf "* Checking u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_34) ** 2)
printf "Expecting 185.62       "
show(integral(mssm_ext_uu_34))
real pull = abs (integral (mssm_ext_uu_34) - 185.62       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sc2,sc2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_34) == 185.62       )
printf "************************************************************************"
printf "* Checking u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_uu_35) ** 2)
printf "Expecting 245.11       "
show(integral(mssm_ext_uu_35))
real pull = abs (integral (mssm_ext_uu_35) - 245.11       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st1,st1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_35) == 245.11       )
printf "************************************************************************"
printf "* Checking u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_36) ** 2)
printf "Expecting 169.22       "
show(integral(mssm_ext_uu_36))
real pull = abs (integral (mssm_ext_uu_36) - 169.22       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st2,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_36) == 169.22       )
printf "************************************************************************"
printf "* Checking u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008    ) ** 2 + error(mssm_ext_uu_37) ** 2)
printf "Expecting 0.47714    "
show(integral(mssm_ext_uu_37))
real pull = abs (integral (mssm_ext_uu_37) - 0.47714    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => st1,st2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_37) == 0.47714    )
printf "************************************************************************"
printf "* Checking u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_38) ** 2)
printf "Expecting 166.60       "
show(integral(mssm_ext_uu_38))
real pull = abs (integral (mssm_ext_uu_38) - 166.60       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sd1,sd1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_38) == 166.60       )
printf "************************************************************************"
printf "* Checking u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.03       ) ** 2 + error(mssm_ext_uu_39) ** 2)
printf "Expecting 185.56       "
show(integral(mssm_ext_uu_39))
real pull = abs (integral (mssm_ext_uu_39) - 185.56       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sd2,sd2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_39) == 185.56       )
printf "************************************************************************"
printf "* Checking u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_40) ** 2)
printf "Expecting 175.68       "
show(integral(mssm_ext_uu_40))
real pull = abs (integral (mssm_ext_uu_40) - 175.68       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ss1,ss1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_40) == 175.68       )
printf "************************************************************************"
printf "* Checking u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02       ) ** 2 + error(mssm_ext_uu_41) ** 2)
printf "Expecting 185.58       "
show(integral(mssm_ext_uu_41))
real pull = abs (integral (mssm_ext_uu_41) - 185.58       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ss2,ss2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_41) == 185.58       )
printf "************************************************************************"
printf "* Checking u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.008      ) ** 2 + error(mssm_ext_uu_42) ** 2)
printf "Expecting 200.364      "
show(integral(mssm_ext_uu_42))
real pull = abs (integral (mssm_ext_uu_42) - 200.364      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb1,sb1c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_42) == 200.364      )
printf "************************************************************************"
printf "* Checking u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.007      ) ** 2 + error(mssm_ext_uu_43) ** 2)
printf "Expecting 186.500      "
show(integral(mssm_ext_uu_43))
real pull = abs (integral (mssm_ext_uu_43) - 186.500      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb2,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_43) == 186.500      )
printf "************************************************************************"
printf "* Checking u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000008   ) ** 2 + error(mssm_ext_uu_44) ** 2)
printf "Expecting 0.198272   "
show(integral(mssm_ext_uu_44))
real pull = abs (integral (mssm_ext_uu_44) - 0.198272   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => sb1,sb2c        @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_44) == 0.198272   )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001     ) ** 2 + error(mssm_ext_uu_45) ** 2)
printf "Expecting 1.2165     "
show(integral(mssm_ext_uu_45))
real pull = abs (integral (mssm_ext_uu_45) - 1.2165     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_45) == 1.2165     )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00001    ) ** 2 + error(mssm_ext_uu_46) ** 2)
printf "Expecting 0.10850    "
show(integral(mssm_ext_uu_46))
real pull = abs (integral (mssm_ext_uu_46) - 0.10850    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_46) == 0.10850    )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000005   ) ** 2 + error(mssm_ext_uu_47) ** 2)
printf "Expecting 0.096752   "
show(integral(mssm_ext_uu_47))
real pull = abs (integral (mssm_ext_uu_47) - 0.096752   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_47) == 0.096752   )
printf "************************************************************************"
printf "* Checking u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000006   ) ** 2 + error(mssm_ext_uu_48) ** 2)
printf "Expecting 0.067293   "
show(integral(mssm_ext_uu_48))
real pull = abs (integral (mssm_ext_uu_48) - 0.067293   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu1,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_48) == 0.067293   )
printf "************************************************************************"
printf "* Checking u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004     ) ** 2 + error(mssm_ext_uu_49) ** 2)
printf "Expecting 4.2296     "
show(integral(mssm_ext_uu_49))
real pull = abs (integral (mssm_ext_uu_49) - 4.2296     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_49) == 4.2296     )
printf "************************************************************************"
printf "* Checking u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000008   ) ** 2 + error(mssm_ext_uu_50) ** 2)
printf "Expecting 0.211458   "
show(integral(mssm_ext_uu_50))
real pull = abs (integral (mssm_ext_uu_50) - 0.211458   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 6 * error_sum
expect (integral (mssm_ext_uu_50) == 0.211458   )
printf "************************************************************************"
printf "* Checking u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008    ) ** 2 + error(mssm_ext_uu_51) ** 2)
printf "Expecting 0.55025    "
show(integral(mssm_ext_uu_51))
real pull = abs (integral (mssm_ext_uu_51) - 0.55025    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu2,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_51) == 0.55025    )
printf "************************************************************************"
printf "* Checking u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00000001 ) ** 2 + error(mssm_ext_uu_52) ** 2)
printf "Expecting 0.00033843 "
show(integral(mssm_ext_uu_52))
real pull = abs (integral (mssm_ext_uu_52) - 0.00033843 ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu3,neu3       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_52) == 0.00033843 )
printf "************************************************************************"
printf "* Checking u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_53) ** 2)
printf "Expecting 4.4433     "
show(integral(mssm_ext_uu_53))
real pull = abs (integral (mssm_ext_uu_53) - 4.4433     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu3,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_uu_53) == 4.4433     )
printf "************************************************************************"
printf "* Checking u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000003   ) ** 2 + error(mssm_ext_uu_54) ** 2)
printf "Expecting 0.016389   "
show(integral(mssm_ext_uu_54))
real pull = abs (integral (mssm_ext_uu_54) - 0.016389   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => neu4,neu4       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_54) == 0.016389   )
printf "************************************************************************"
printf "* Checking u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002      ) ** 2 + error(mssm_ext_uu_55) ** 2)
printf "Expecting 10.734      "
show(integral(mssm_ext_uu_55))
real pull = abs (integral (mssm_ext_uu_55) - 10.734      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch1+,ch1-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_55) == 10.734      )
printf "************************************************************************"
printf "* Checking u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_56) ** 2)
printf "Expecting 5.0401     "
show(integral(mssm_ext_uu_56))
real pull = abs (integral (mssm_ext_uu_56) - 5.0401     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch2+,ch2-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_56) == 5.0401     )
printf "************************************************************************"
printf "* Checking u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_57) ** 2)
printf "Expecting 1.5362     "
show(integral(mssm_ext_uu_57))
real pull = abs (integral (mssm_ext_uu_57) - 1.5362     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => ch1+,ch2-   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_57) == 1.5362     )
printf "************************************************************************"
printf "* Checking u,U => Z,h             @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002     ) ** 2 + error(mssm_ext_uu_58) ** 2)
printf "Expecting 1.1960     "
show(integral(mssm_ext_uu_58))
real pull = abs (integral (mssm_ext_uu_58) - 1.1960     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,h             @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,h             @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_58) == 1.1960     )
printf "************************************************************************"
printf "* Checking u,U => Z,HH            @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004E-4  ) ** 2 + error(mssm_ext_uu_59) ** 2)
printf "Expecting 2.1142E-4  "
show(integral(mssm_ext_uu_59))
real pull = abs (integral (mssm_ext_uu_59) - 2.1142E-4  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,U => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,U => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,U => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,U => Z,HH            @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,U => Z,HH            @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_uu_59) == 2.1142E-4  )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
