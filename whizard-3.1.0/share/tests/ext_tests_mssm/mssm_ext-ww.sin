

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: mssm_ext-ww.m4 -1   $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! --------------------------------------------------------------------------
model = MSSM
read_slha ("sps1a.slha")
?vis_history = false
! --------------------------------------------------------------------------
me = 0
mW = 80.419 
wW = 2.048
mZ = 91.1880
wZ = 2.446
mtop = 178.0
mb = 4.6
GF = 1.16639e-5
alphas = 0.118
show (al_h,mu_h,tanb_h)
! --------------------------------------------------------------------------
iterations = 3:200000
! --------------------------------------------------------------------------

































































! --------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process mssm_ext_ww_1 = Wm,Wp => se1,SE1      
process mssm_ext_ww_2 = Wm,Wp => se2,SE2      
process mssm_ext_ww_3 = Wm,Wp => smu1,SMU1    
process mssm_ext_ww_4 = Wm,Wp => smu2,SMU2    
process mssm_ext_ww_5 = Wm,Wp => stau1,STAU1  
process mssm_ext_ww_6 = Wm,Wp => stau2,STAU2  
process mssm_ext_ww_7 = Wm,Wp => stau1,STAU2  
process mssm_ext_ww_8 = Wm,Wp => sn11,SN11    
process mssm_ext_ww_9 = Wm,Wp => sn21,SN21    
process mssm_ext_ww_10 = Wm,Wp => sn31,SN31    
process mssm_ext_ww_11 = Wm,Wp => neu1,neu1    
process mssm_ext_ww_12 = Wm,Wp => neu1,neu2    
process mssm_ext_ww_13 = Wm,Wp => neu1,neu3    
process mssm_ext_ww_14 = Wm,Wp => neu1,neu4    
process mssm_ext_ww_15 = Wm,Wp => neu2,neu2    
process mssm_ext_ww_16 = Wm,Wp => "ch1+","ch1-"
process mssm_ext_ww_17 = Wm,Wp => h,h          
process mssm_ext_ww_18 = Wm,Wp => Z,h          
process mssm_ext_ww_19 = Wm,Wp => Z,HH         
process mssm_ext_ww_20 = Wm,Wp => se1,SE1      
process mssm_ext_ww_21 = Wm,Wp => se2,SE2      
process mssm_ext_ww_22 = Wm,Wp => smu1,SMU1    
process mssm_ext_ww_23 = Wm,Wp => smu2,SMU2    
process mssm_ext_ww_24 = Wm,Wp => stau1,STAU1  
process mssm_ext_ww_25 = Wm,Wp => stau2,STAU2  
process mssm_ext_ww_26 = Wm,Wp => stau1,STAU2  
process mssm_ext_ww_27 = Wm,Wp => sn11,SN11    
process mssm_ext_ww_28 = Wm,Wp => sn21,SN21    
process mssm_ext_ww_29 = Wm,Wp => sn31,SN31    
process mssm_ext_ww_30 = Wm,Wp => su1,su1c     
process mssm_ext_ww_31 = Wm,Wp => su2,su2c     
process mssm_ext_ww_32 = Wm,Wp => sc1,sc1c     
process mssm_ext_ww_33 = Wm,Wp => sc2,sc2c     
process mssm_ext_ww_34 = Wm,Wp => st1,st1c     
process mssm_ext_ww_35 = Wm,Wp => st2,st2c     
process mssm_ext_ww_36 = Wm,Wp => st1,st2c     
process mssm_ext_ww_37 = Wm,Wp => sd1,sd1c     
process mssm_ext_ww_38 = Wm,Wp => sd2,sd2c     
process mssm_ext_ww_39 = Wm,Wp => ss1,ss1c     
process mssm_ext_ww_40 = Wm,Wp => ss2,ss2c     
process mssm_ext_ww_41 = Wm,Wp => sb1,sb1c     
process mssm_ext_ww_42 = Wm,Wp => sb2,sb2c     
process mssm_ext_ww_43 = Wm,Wp => sb1,sb2c     
process mssm_ext_ww_44 = Wm,Wp => neu1,neu1    
process mssm_ext_ww_45 = Wm,Wp => neu1,neu2    
process mssm_ext_ww_46 = Wm,Wp => neu1,neu3    
process mssm_ext_ww_47 = Wm,Wp => neu1,neu4    
process mssm_ext_ww_48 = Wm,Wp => neu2,neu2    
process mssm_ext_ww_49 = Wm,Wp => neu2,neu3    
process mssm_ext_ww_50 = Wm,Wp => neu2,neu4    
process mssm_ext_ww_51 = Wm,Wp => neu3,neu3    
process mssm_ext_ww_52 = Wm,Wp => neu3,neu4    
process mssm_ext_ww_53 = Wm,Wp => neu4,neu4    
process mssm_ext_ww_54 = Wm,Wp => "ch1+","ch1-"
process mssm_ext_ww_55 = Wm,Wp => "ch2+","ch2-"
process mssm_ext_ww_56 = Wm,Wp => "ch1+","ch2-"
process mssm_ext_ww_57 = Wm,Wp => h,h          
process mssm_ext_ww_58 = Wm,Wp => h,HH         
process mssm_ext_ww_59 = Wm,Wp => HH,HH        
process mssm_ext_ww_60 = Wm,Wp => HA,HA        
process mssm_ext_ww_61 = Wm,Wp => Z,h          
process mssm_ext_ww_62 = Wm,Wp => Z,HH         
process mssm_ext_ww_63 = Wm,Wp => HA,h         
process mssm_ext_ww_64 = Wm,Wp => HA,HH        
process mssm_ext_ww_65 = Wm,Wp => Hp,Hm        
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_1)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_2)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_3)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_4)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_5)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_6)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_7)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_8)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_9)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_10)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_11)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_12)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_13)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_14)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_15)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_16)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_17)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_18)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
printf "************************************************************************"
sqrts = 500 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_19)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_20)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_21)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_22)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_23)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_24)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_25)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_26)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_27)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_28)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_29)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_30)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_31)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_32)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_33)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_34)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_35)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_36)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_37)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_38)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_39)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_40)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_41)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_42)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_43)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_44)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_45)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_46)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_47)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_48)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_49)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_50)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_51)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_52)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_53)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_54)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_55)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_56)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_57)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_58)
printf "************************************************************************"
printf "* Integrating Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_59)
printf "************************************************************************"
printf "* Integrating Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_60)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_61)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_62)
printf "************************************************************************"
printf "* Integrating Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_63)
printf "************************************************************************"
printf "* Integrating Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_64)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
sqrts = 2000 GeV
beams = Wm,Wp
seed = 0
integrate (mssm_ext_ww_65)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_1) ** 2)
printf "Expecting 192.145      "
show(integral(mssm_ext_ww_1))
real pull = abs (integral (mssm_ext_ww_1) - 192.145      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se1,SE1       @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_1) == 192.145      )
printf "************************************************************************"
printf "* Checking Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_2) ** 2)
printf "Expecting 14.2151     "
show(integral(mssm_ext_ww_2))
real pull = abs (integral (mssm_ext_ww_2) - 14.2151     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se2,SE2       @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_2) == 14.2151     )
printf "************************************************************************"
printf "* Checking Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_3) ** 2)
printf "Expecting 192.146      "
show(integral(mssm_ext_ww_3))
real pull = abs (integral (mssm_ext_ww_3) - 192.146      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_3) == 192.146      )
printf "************************************************************************"
printf "* Checking Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_4) ** 2)
printf "Expecting 14.2145     "
show(integral(mssm_ext_ww_4))
real pull = abs (integral (mssm_ext_ww_4) - 14.2145     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_4) == 14.2145     )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_ww_5) ** 2)
printf "Expecting 7.9266     "
show(integral(mssm_ext_ww_5))
real pull = abs (integral (mssm_ext_ww_5) - 7.9266     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_5) == 7.9266     )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_6) ** 2)
printf "Expecting 168.046      "
show(integral(mssm_ext_ww_6))
real pull = abs (integral (mssm_ext_ww_6) - 168.046      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 500 GeV"
endif
tolerance = 5 * error_sum
expect (integral (mssm_ext_ww_6) == 168.046      )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_ww_7) ** 2)
printf "Expecting 17.8521     "
show(integral(mssm_ext_ww_7))
real pull = abs (integral (mssm_ext_ww_7) - 17.8521     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_7) == 17.8521     )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_ww_8) ** 2)
printf "Expecting 157.809      "
show(integral(mssm_ext_ww_8))
real pull = abs (integral (mssm_ext_ww_8) - 157.809      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn11,SN11     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_8) == 157.809      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_ww_9) ** 2)
printf "Expecting 157.806      "
show(integral(mssm_ext_ww_9))
real pull = abs (integral (mssm_ext_ww_9) - 157.806      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn21,SN21     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_9) == 157.806      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_ww_10) ** 2)
printf "Expecting 152.509      "
show(integral(mssm_ext_ww_10))
real pull = abs (integral (mssm_ext_ww_10) - 152.509      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn31,SN31     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_10) == 152.509      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0001    ) ** 2 + error(mssm_ext_ww_11) ** 2)
printf "Expecting 3.8824     "
show(integral(mssm_ext_ww_11))
real pull = abs (integral (mssm_ext_ww_11) - 3.8824     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu1     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_11) == 3.8824     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_ww_12) ** 2)
printf "Expecting 121.2925     "
show(integral(mssm_ext_ww_12))
real pull = abs (integral (mssm_ext_ww_12) - 121.2925     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu2     @ sqrt(s) = 500 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_12) == 121.2925     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0002    ) ** 2 + error(mssm_ext_ww_13) ** 2)
printf "Expecting 6.8934     "
show(integral(mssm_ext_ww_13))
real pull = abs (integral (mssm_ext_ww_13) - 6.8934     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu3     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_13) == 6.8934     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006    ) ** 2 + error(mssm_ext_ww_14) ** 2)
printf "Expecting 1.4973     "
show(integral(mssm_ext_ww_14))
real pull = abs (integral (mssm_ext_ww_14) - 1.4973     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu4     @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_14) == 1.4973     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02      ) ** 2 + error(mssm_ext_ww_15) ** 2)
printf "Expecting 5996.57       "
show(integral(mssm_ext_ww_15))
real pull = abs (integral (mssm_ext_ww_15) - 5996.57       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu2     @ sqrt(s) = 500 GeV"
endif
tolerance = 5 * error_sum
expect (integral (mssm_ext_ww_15) == 5996.57       )
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.4       ) ** 2 + error(mssm_ext_ww_16) ** 2)
printf "Expecting 3771.6        "
show(integral(mssm_ext_ww_16))
real pull = abs (integral (mssm_ext_ww_16) - 3771.6        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_16) == 3771.6        )
printf "************************************************************************"
printf "* Checking Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.4       ) ** 2 + error(mssm_ext_ww_17) ** 2)
printf "Expecting 6024.7        "
show(integral(mssm_ext_ww_17))
real pull = abs (integral (mssm_ext_ww_17) - 6024.7        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h,h           @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_17) == 6024.7        )
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.0       ) ** 2 + error(mssm_ext_ww_18) ** 2)
printf "Expecting 75539.0        "
show(integral(mssm_ext_ww_18))
real pull = abs (integral (mssm_ext_ww_18) - 75539.0        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h           @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_18) == 75539.0        )
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008   ) ** 2 + error(mssm_ext_ww_19) ** 2)
printf "Expecting 1.70944    "
show(integral(mssm_ext_ww_19))
real pull = abs (integral (mssm_ext_ww_19) - 1.70944    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,HH          @ sqrt(s) = 500 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_19) == 1.70944    )
printf "************************************************************************"
printf "* Checking Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006    ) ** 2 + error(mssm_ext_ww_20) ** 2)
printf "Expecting 26.5380     "
show(integral(mssm_ext_ww_20))
real pull = abs (integral (mssm_ext_ww_20) - 26.5380     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se1,SE1       @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_20) == 26.5380     )
printf "************************************************************************"
printf "* Checking Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004   ) ** 2 + error(mssm_ext_ww_21) ** 2)
printf "Expecting 1.02966    "
show(integral(mssm_ext_ww_21))
real pull = abs (integral (mssm_ext_ww_21) - 1.02966    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se2,SE2       @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_21) == 1.02966    )
printf "************************************************************************"
printf "* Checking Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006    ) ** 2 + error(mssm_ext_ww_22) ** 2)
printf "Expecting 26.5380     "
show(integral(mssm_ext_ww_22))
real pull = abs (integral (mssm_ext_ww_22) - 26.5380     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu1,SMU1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_22) == 26.5380     )
printf "************************************************************************"
printf "* Checking Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00004   ) ** 2 + error(mssm_ext_ww_23) ** 2)
printf "Expecting 1.02972    "
show(integral(mssm_ext_ww_23))
real pull = abs (integral (mssm_ext_ww_23) - 1.02972    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu2,SMU2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_23) == 1.02972    )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_ww_24) ** 2)
printf "Expecting 0.83284    "
show(integral(mssm_ext_ww_24))
real pull = abs (integral (mssm_ext_ww_24) - 0.83284    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU1   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_24) == 0.83284    )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0005    ) ** 2 + error(mssm_ext_ww_25) ** 2)
printf "Expecting 22.4195     "
show(integral(mssm_ext_ww_25))
real pull = abs (integral (mssm_ext_ww_25) - 22.4195     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau2,STAU2   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_25) == 22.4195     )
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00005   ) ** 2 + error(mssm_ext_ww_26) ** 2)
printf "Expecting 2.32935    "
show(integral(mssm_ext_ww_26))
real pull = abs (integral (mssm_ext_ww_26) - 2.32935    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU2   @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_26) == 2.32935    )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_27) ** 2)
printf "Expecting 23.486      "
show(integral(mssm_ext_ww_27))
real pull = abs (integral (mssm_ext_ww_27) - 23.486      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn11,SN11     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_27) == 23.486      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_28) ** 2)
printf "Expecting 23.487      "
show(integral(mssm_ext_ww_28))
real pull = abs (integral (mssm_ext_ww_28) - 23.487      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn21,SN21     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_28) == 23.487      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_29) ** 2)
printf "Expecting 23.429      "
show(integral(mssm_ext_ww_29))
real pull = abs (integral (mssm_ext_ww_29) - 23.429      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn31,SN31     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_29) == 23.429      )
printf "************************************************************************"
printf "* Checking Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_30) ** 2)
printf "Expecting 41.590      "
show(integral(mssm_ext_ww_30))
real pull = abs (integral (mssm_ext_ww_30) - 41.590      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su1,su1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_30) == 41.590      )
printf "************************************************************************"
printf "* Checking Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_ww_31) ** 2)
printf "Expecting 1.07608    "
show(integral(mssm_ext_ww_31))
real pull = abs (integral (mssm_ext_ww_31) - 1.07608    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su2,su2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_31) == 1.07608    )
printf "************************************************************************"
printf "* Checking Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_32) ** 2)
printf "Expecting 41.588      "
show(integral(mssm_ext_ww_32))
real pull = abs (integral (mssm_ext_ww_32) - 41.588      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc1,sc1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_32) == 41.588      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00003   ) ** 2 + error(mssm_ext_ww_33) ** 2)
printf "Expecting 1.07603    "
show(integral(mssm_ext_ww_33))
real pull = abs (integral (mssm_ext_ww_33) - 1.07603    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc2,sc2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_33) == 1.07603    )
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.004     ) ** 2 + error(mssm_ext_ww_34) ** 2)
printf "Expecting 180.637      "
show(integral(mssm_ext_ww_34))
real pull = abs (integral (mssm_ext_ww_34) - 180.637      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_34) == 180.637      )
printf "************************************************************************"
printf "* Checking Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_ww_35) ** 2)
printf "Expecting 204.461      "
show(integral(mssm_ext_ww_35))
real pull = abs (integral (mssm_ext_ww_35) - 204.461      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st2,st2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_35) == 204.461      )
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_ww_36) ** 2)
printf "Expecting 85.178      "
show(integral(mssm_ext_ww_36))
real pull = abs (integral (mssm_ext_ww_36) - 85.178      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_36) == 85.178      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_37) ** 2)
printf "Expecting 39.0067     "
show(integral(mssm_ext_ww_37))
real pull = abs (integral (mssm_ext_ww_37) - 39.0067     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd1,sd1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_37) == 39.0067     )
printf "************************************************************************"
printf "* Checking Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000008  ) ** 2 + error(mssm_ext_ww_38) ** 2)
printf "Expecting 0.269305   "
show(integral(mssm_ext_ww_38))
real pull = abs (integral (mssm_ext_ww_38) - 0.269305   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd2,sd2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_38) == 0.269305   )
printf "************************************************************************"
printf "* Checking Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_39) ** 2)
printf "Expecting 39.0062     "
show(integral(mssm_ext_ww_39))
real pull = abs (integral (mssm_ext_ww_39) - 39.0062     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss1,ss1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_39) == 39.0062     )
printf "************************************************************************"
printf "* Checking Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.000008  ) ** 2 + error(mssm_ext_ww_40) ** 2)
printf "Expecting 0.269291   "
show(integral(mssm_ext_ww_40))
real pull = abs (integral (mssm_ext_ww_40) - 0.269291   ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss2,ss2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_40) == 0.269291   )
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.002     ) ** 2 + error(mssm_ext_ww_41) ** 2)
printf "Expecting 141.457      "
show(integral(mssm_ext_ww_41))
real pull = abs (integral (mssm_ext_ww_41) - 141.457      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb1c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_41) == 141.457      )
printf "************************************************************************"
printf "* Checking Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_42) ** 2)
printf "Expecting 19.7133     "
show(integral(mssm_ext_ww_42))
real pull = abs (integral (mssm_ext_ww_42) - 19.7133     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb2,sb2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_42) == 19.7133     )
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.001     ) ** 2 + error(mssm_ext_ww_43) ** 2)
printf "Expecting 61.090      "
show(integral(mssm_ext_ww_43))
real pull = abs (integral (mssm_ext_ww_43) - 61.090      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb2c      @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_43) == 61.090      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.00008   ) ** 2 + error(mssm_ext_ww_44) ** 2)
printf "Expecting 1.27423    "
show(integral(mssm_ext_ww_44))
real pull = abs (integral (mssm_ext_ww_44) - 1.27423    ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu1     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_44) == 1.27423    )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.003     ) ** 2 + error(mssm_ext_ww_45) ** 2)
printf "Expecting 24.472      "
show(integral(mssm_ext_ww_45))
real pull = abs (integral (mssm_ext_ww_45) - 24.472      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_45) == 24.472      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0008    ) ** 2 + error(mssm_ext_ww_46) ** 2)
printf "Expecting 12.8790     "
show(integral(mssm_ext_ww_46))
real pull = abs (integral (mssm_ext_ww_46) - 12.8790     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_46) == 12.8790     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_ww_47) ** 2)
printf "Expecting 9.7064     "
show(integral(mssm_ext_ww_47))
real pull = abs (integral (mssm_ext_ww_47) - 9.7064     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_47) == 9.7064     )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.05      ) ** 2 + error(mssm_ext_ww_48) ** 2)
printf "Expecting 1041.50       "
show(integral(mssm_ext_ww_48))
real pull = abs (integral (mssm_ext_ww_48) - 1041.50       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu2     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_48) == 1041.50       )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.006     ) ** 2 + error(mssm_ext_ww_49) ** 2)
printf "Expecting 365.615      "
show(integral(mssm_ext_ww_49))
real pull = abs (integral (mssm_ext_ww_49) - 365.615      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (mssm_ext_ww_49) == 365.615      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.008     ) ** 2 + error(mssm_ext_ww_50) ** 2)
printf "Expecting 467.775      "
show(integral(mssm_ext_ww_50))
real pull = abs (integral (mssm_ext_ww_50) - 467.775      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_50) == 467.775      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.008     ) ** 2 + error(mssm_ext_ww_51) ** 2)
printf "Expecting 82.347      "
show(integral(mssm_ext_ww_51))
real pull = abs (integral (mssm_ext_ww_51) - 82.347      ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu3     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_51) == 82.347      )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.01      ) ** 2 + error(mssm_ext_ww_52) ** 2)
printf "Expecting 138.18       "
show(integral(mssm_ext_ww_52))
real pull = abs (integral (mssm_ext_ww_52) - 138.18       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_52) == 138.18       )
printf "************************************************************************"
printf "* Checking Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.01      ) ** 2 + error(mssm_ext_ww_53) ** 2)
printf "Expecting 117.80       "
show(integral(mssm_ext_ww_53))
real pull = abs (integral (mssm_ext_ww_53) - 117.80       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu4,neu4     @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_53) == 117.80       )
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.1       ) ** 2 + error(mssm_ext_ww_54) ** 2)
printf "Expecting 944.2        "
show(integral(mssm_ext_ww_54))
real pull = abs (integral (mssm_ext_ww_54) - 944.2        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_54) == 944.2        )
printf "************************************************************************"
printf "* Checking Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.04      ) ** 2 + error(mssm_ext_ww_55) ** 2)
printf "Expecting 258.37       "
show(integral(mssm_ext_ww_55))
real pull = abs (integral (mssm_ext_ww_55) - 258.37       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_55) == 258.37       )
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.02      ) ** 2 + error(mssm_ext_ww_56) ** 2)
printf "Expecting 130.98       "
show(integral(mssm_ext_ww_56))
real pull = abs (integral (mssm_ext_ww_56) - 130.98       ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_56) == 130.98       )
printf "************************************************************************"
printf "* Checking Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.0       ) ** 2 + error(mssm_ext_ww_57) ** 2)
printf "Expecting 6061.0        "
show(integral(mssm_ext_ww_57))
real pull = abs (integral (mssm_ext_ww_57) - 6061.0        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h,h           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_57) == 6061.0        )
printf "************************************************************************"
printf "* Checking Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0006    ) ** 2 + error(mssm_ext_ww_58) ** 2)
printf "Expecting 2.1752     "
show(integral(mssm_ext_ww_58))
real pull = abs (integral (mssm_ext_ww_58) - 2.1752     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h,HH          @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_58) == 2.1752     )
printf "************************************************************************"
printf "* Checking Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0011    ) ** 2 + error(mssm_ext_ww_59) ** 2)
printf "Expecting 6.7509     "
show(integral(mssm_ext_ww_59))
real pull = abs (integral (mssm_ext_ww_59) - 6.7509     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => HH,HH         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_59) == 6.7509     )
printf "************************************************************************"
printf "* Checking Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0004    ) ** 2 + error(mssm_ext_ww_60) ** 2)
printf "Expecting 6.7273     "
show(integral(mssm_ext_ww_60))
real pull = abs (integral (mssm_ext_ww_60) - 6.7273     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => HA,HA         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_60) == 6.7273     )
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((20.0       ) ** 2 + error(mssm_ext_ww_61) ** 2)
printf "Expecting 86200.0        "
show(integral(mssm_ext_ww_61))
real pull = abs (integral (mssm_ext_ww_61) - 86200.0        ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h           @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_61) == 86200.0        )
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0037    ) ** 2 + error(mssm_ext_ww_62) ** 2)
printf "Expecting 16.3939     "
show(integral(mssm_ext_ww_62))
real pull = abs (integral (mssm_ext_ww_62) - 16.3939     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,HH          @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_62) == 16.3939     )
printf "************************************************************************"
printf "* Checking Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0000007 ) ** 2 + error(mssm_ext_ww_63) ** 2)
printf "Expecting 0.0060123  "
show(integral(mssm_ext_ww_63))
real pull = abs (integral (mssm_ext_ww_63) - 0.0060123  ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => HA,h          @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_63) == 0.0060123  )
printf "************************************************************************"
printf "* Checking Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0007    ) ** 2 + error(mssm_ext_ww_64) ** 2)
printf "Expecting 3.4708     "
show(integral(mssm_ext_ww_64))
real pull = abs (integral (mssm_ext_ww_64) - 3.4708     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => HA,HH         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_64) == 3.4708     )
printf "************************************************************************"
printf "* Checking Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((0.0023    ) ** 2 + error(mssm_ext_ww_65) ** 2)
printf "Expecting 19.6060     "
show(integral(mssm_ext_ww_65))
real pull = abs (integral (mssm_ext_ww_65) - 19.6060     ) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Hp,Hm         @ sqrt(s) = 2000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (mssm_ext_ww_65) == 19.6060     )
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************" 
