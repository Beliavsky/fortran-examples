

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: testsuite_sample.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------

























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_zz2_1 = Z,Z => t,T		
process nmssm_ext_zz2_2 = Z,Z => Wp,Wm	   	
process nmssm_ext_zz2_3 = Z,Z => Z,Z	   	
process nmssm_ext_zz2_4 = Z,Z => se1,SE1	
process nmssm_ext_zz2_5 = Z,Z => se2,SE2	
process nmssm_ext_zz2_6 = Z,Z => smu1,SMU1	
process nmssm_ext_zz2_7 = Z,Z => smu2,SMU2	
process nmssm_ext_zz2_8 = Z,Z => stau1,STAU1	
process nmssm_ext_zz2_9 = Z,Z => stau2,STAU2	
process nmssm_ext_zz2_10 = Z,Z => stau1,STAU2	
process nmssm_ext_zz2_11 = Z,Z => sn11,SN11	
process nmssm_ext_zz2_12 = Z,Z => sn21,SN21	
process nmssm_ext_zz2_13 = Z,Z => sn31,SN31	
process nmssm_ext_zz2_14 = Z,Z => su1,su1c	
process nmssm_ext_zz2_15 = Z,Z => su2,su2c	
process nmssm_ext_zz2_16 = Z,Z => sc1,sc1c	
process nmssm_ext_zz2_17 = Z,Z => sc2,sc2c	
process nmssm_ext_zz2_18 = Z,Z => st1,st1c	
process nmssm_ext_zz2_19 = Z,Z => st2,st2c	
process nmssm_ext_zz2_20 = Z,Z => st1,st2c	
process nmssm_ext_zz2_21 = Z,Z => sd1,sd1c	
process nmssm_ext_zz2_22 = Z,Z => sd2,sd2c	
process nmssm_ext_zz2_23 = Z,Z => ss1,ss1c	
process nmssm_ext_zz2_24 = Z,Z => ss2,ss2c	
process nmssm_ext_zz2_25 = Z,Z => sb1,sb1c	
process nmssm_ext_zz2_26 = Z,Z => sb2,sb2c	
process nmssm_ext_zz2_27 = Z,Z => sb1,sb2c	
process nmssm_ext_zz2_28 = Z,Z => neu1,neu1	
process nmssm_ext_zz2_29 = Z,Z => neu1,neu2	
process nmssm_ext_zz2_30 = Z,Z => neu1,neu3	
process nmssm_ext_zz2_31 = Z,Z => neu1,neu4	
process nmssm_ext_zz2_32 = Z,Z => neu1,neu5	
process nmssm_ext_zz2_33 = Z,Z => neu2,neu2	
process nmssm_ext_zz2_34 = Z,Z => neu2,neu3	
process nmssm_ext_zz2_35 = Z,Z => neu2,neu4	
process nmssm_ext_zz2_36 = Z,Z => neu2,neu5	
process nmssm_ext_zz2_37 = Z,Z => neu3,neu3	
process nmssm_ext_zz2_38 = Z,Z => neu3,neu4	
process nmssm_ext_zz2_39 = Z,Z => neu3,neu5	
process nmssm_ext_zz2_40 = Z,Z => neu4,neu4	
process nmssm_ext_zz2_41 = Z,Z => neu4,neu5	
process nmssm_ext_zz2_42 = Z,Z => neu5,neu5	
process nmssm_ext_zz2_43 = Z,Z => "ch1+","ch1-"	
process nmssm_ext_zz2_44 = Z,Z => "ch1+","ch2-"	
process nmssm_ext_zz2_45 = Z,Z => "ch2+","ch2-"	
process nmssm_ext_zz2_46 = Z,Z => h01,h01	
process nmssm_ext_zz2_47 = Z,Z => h01,h02	
process nmssm_ext_zz2_48 = Z,Z => h01,h03	
process nmssm_ext_zz2_49 = Z,Z => h02,h02	
process nmssm_ext_zz2_50 = Z,Z => h02,h03	
process nmssm_ext_zz2_51 = Z,Z => h03,h03	
process nmssm_ext_zz2_52 = Z,Z => A01,A01	
process nmssm_ext_zz2_53 = Z,Z => A01,A02	
process nmssm_ext_zz2_54 = Z,Z => A02,A02	
process nmssm_ext_zz2_55 = Z,Z => Z,A01		
process nmssm_ext_zz2_56 = Z,Z => Z,A02	   	
process nmssm_ext_zz2_57 = Z,Z => Hp,Hm	   	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_1)
printf "************************************************************************"
printf "* Integrating Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_2)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_3)
printf "************************************************************************"
printf "* Integrating Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_4)
printf "************************************************************************"
printf "* Integrating Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_5)
printf "************************************************************************"
printf "* Integrating Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_6)
printf "************************************************************************"
printf "* Integrating Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_7)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_8)
printf "************************************************************************"
printf "* Integrating Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_9)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_10)
printf "************************************************************************"
printf "* Integrating Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_11)
printf "************************************************************************"
printf "* Integrating Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_12)
printf "************************************************************************"
printf "* Integrating Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_13)
printf "************************************************************************"
printf "* Integrating Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_14)
printf "************************************************************************"
printf "* Integrating Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_15)
printf "************************************************************************"
printf "* Integrating Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_16)
printf "************************************************************************"
printf "* Integrating Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_17)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_18)
printf "************************************************************************"
printf "* Integrating Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_19)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_20)
printf "************************************************************************"
printf "* Integrating Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_21)
printf "************************************************************************"
printf "* Integrating Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_22)
printf "************************************************************************"
printf "* Integrating Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_23)
printf "************************************************************************"
printf "* Integrating Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_24)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_25)
printf "************************************************************************"
printf "* Integrating Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_26)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_27)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_28)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_29)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_30)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_31)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_32)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_33)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_34)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_35)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_36)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_37)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_38)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_39)
printf "************************************************************************"
printf "* Integrating Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_40)
printf "************************************************************************"
printf "* Integrating Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_41)
printf "************************************************************************"
printf "* Integrating Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_42)
printf "************************************************************************"
printf "* Integrating Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_43)
printf "************************************************************************"
printf "* Integrating Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_44)
printf "************************************************************************"
printf "* Integrating Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_45)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_46)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_47)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_48)
printf "************************************************************************"
printf "* Integrating Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_49)
printf "************************************************************************"
printf "* Integrating Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_50)
printf "************************************************************************"
printf "* Integrating Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_51)
printf "************************************************************************"
printf "* Integrating Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_52)
printf "************************************************************************"
printf "* Integrating Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_53)
printf "************************************************************************"
printf "* Integrating Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_54)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_55)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_56)
printf "************************************************************************"
printf "* Integrating Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz2_57)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.10E-01) ** 2 + error(nmssm_ext_zz2_1) ** 2)
printf "Expecting 6.3663452E+02"
show(integral(nmssm_ext_zz2_1))
real pull = abs (integral (nmssm_ext_zz2_1) - 6.3663452E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => t,T		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_1) == 6.3663452E+02)
printf "************************************************************************"
printf "* Checking Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.23E+02) ** 2 + error(nmssm_ext_zz2_2) ** 2)
printf "Expecting 6.0641622E+05"
show(integral(nmssm_ext_zz2_2))
real pull = abs (integral (nmssm_ext_zz2_2) - 6.0641622E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Wp,Wm	   	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_2) == 6.0641622E+05)
printf "************************************************************************"
printf "* Checking Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E-02) ** 2 + error(nmssm_ext_zz2_3) ** 2)
printf "Expecting 3.0759878E+01"
show(integral(nmssm_ext_zz2_3))
real pull = abs (integral (nmssm_ext_zz2_3) - 3.0759878E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,Z	   	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_3) == 3.0759878E+01)
printf "************************************************************************"
printf "* Checking Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.35E-04) ** 2 + error(nmssm_ext_zz2_4) ** 2)
printf "Expecting 4.6827560E-01"
show(integral(nmssm_ext_zz2_4))
real pull = abs (integral (nmssm_ext_zz2_4) - 4.6827560E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se1,SE1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_4) == 4.6827560E-01)
printf "************************************************************************"
printf "* Checking Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.06E-04) ** 2 + error(nmssm_ext_zz2_5) ** 2)
printf "Expecting 2.8928802E-01"
show(integral(nmssm_ext_zz2_5))
real pull = abs (integral (nmssm_ext_zz2_5) - 2.8928802E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se2,SE2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_5) == 2.8928802E-01)
printf "************************************************************************"
printf "* Checking Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.34E-04) ** 2 + error(nmssm_ext_zz2_6) ** 2)
printf "Expecting 4.6861168E-01"
show(integral(nmssm_ext_zz2_6))
real pull = abs (integral (nmssm_ext_zz2_6) - 4.6861168E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu1,SMU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_6) == 4.6861168E-01)
printf "************************************************************************"
printf "* Checking Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.07E-04) ** 2 + error(nmssm_ext_zz2_7) ** 2)
printf "Expecting 2.8899838E-01"
show(integral(nmssm_ext_zz2_7))
real pull = abs (integral (nmssm_ext_zz2_7) - 2.8899838E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu2,SMU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_7) == 2.8899838E-01)
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.67E-04) ** 2 + error(nmssm_ext_zz2_8) ** 2)
printf "Expecting 3.7406350E-01"
show(integral(nmssm_ext_zz2_8))
real pull = abs (integral (nmssm_ext_zz2_8) - 3.7406350E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_8) == 3.7406350E-01)
printf "************************************************************************"
printf "* Checking Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.65E-04) ** 2 + error(nmssm_ext_zz2_9) ** 2)
printf "Expecting 3.7479827E-01"
show(integral(nmssm_ext_zz2_9))
real pull = abs (integral (nmssm_ext_zz2_9) - 3.7479827E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau2,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_9) == 3.7479827E-01)
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.96E-06) ** 2 + error(nmssm_ext_zz2_10) ** 2)
printf "Expecting 5.6162694E-03"
show(integral(nmssm_ext_zz2_10))
real pull = abs (integral (nmssm_ext_zz2_10) - 5.6162694E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_10) == 5.6162694E-03)
printf "************************************************************************"
printf "* Checking Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.02E-03) ** 2 + error(nmssm_ext_zz2_11) ** 2)
printf "Expecting 5.2441341E+00"
show(integral(nmssm_ext_zz2_11))
real pull = abs (integral (nmssm_ext_zz2_11) - 5.2441341E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn11,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_11) == 5.2441341E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.01E-03) ** 2 + error(nmssm_ext_zz2_12) ** 2)
printf "Expecting 5.2533816E+00"
show(integral(nmssm_ext_zz2_12))
real pull = abs (integral (nmssm_ext_zz2_12) - 5.2533816E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn21,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_12) == 5.2533816E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.00E-03) ** 2 + error(nmssm_ext_zz2_13) ** 2)
printf "Expecting 5.2487743E+00"
show(integral(nmssm_ext_zz2_13))
real pull = abs (integral (nmssm_ext_zz2_13) - 5.2487743E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn31,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_13) == 5.2487743E+00)
printf "************************************************************************"
printf "* Checking Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.17E-04) ** 2 + error(nmssm_ext_zz2_14) ** 2)
printf "Expecting 2.3849179E+00"
show(integral(nmssm_ext_zz2_14))
real pull = abs (integral (nmssm_ext_zz2_14) - 2.3849179E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su1,su1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_14) == 2.3849179E+00)
printf "************************************************************************"
printf "* Checking Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.12E-05) ** 2 + error(nmssm_ext_zz2_15) ** 2)
printf "Expecting 1.4935063E-01"
show(integral(nmssm_ext_zz2_15))
real pull = abs (integral (nmssm_ext_zz2_15) - 1.4935063E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su2,su2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_15) == 1.4935063E-01)
printf "************************************************************************"
printf "* Checking Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.08E-04) ** 2 + error(nmssm_ext_zz2_16) ** 2)
printf "Expecting 2.3858442E+00"
show(integral(nmssm_ext_zz2_16))
real pull = abs (integral (nmssm_ext_zz2_16) - 2.3858442E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc1,sc1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_16) == 2.3858442E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.00E-05) ** 2 + error(nmssm_ext_zz2_17) ** 2)
printf "Expecting 1.4919940E-01"
show(integral(nmssm_ext_zz2_17))
real pull = abs (integral (nmssm_ext_zz2_17) - 1.4919940E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc2,sc2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_17) == 1.4919940E-01)
printf "************************************************************************"
printf "* Checking Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-02) ** 2 + error(nmssm_ext_zz2_18) ** 2)
printf "Expecting 6.1429364E+01"
show(integral(nmssm_ext_zz2_18))
real pull = abs (integral (nmssm_ext_zz2_18) - 6.1429364E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_18) == 6.1429364E+01)
printf "************************************************************************"
printf "* Checking Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.05E-02) ** 2 + error(nmssm_ext_zz2_19) ** 2)
printf "Expecting 1.2138685E+02"
show(integral(nmssm_ext_zz2_19))
real pull = abs (integral (nmssm_ext_zz2_19) - 1.2138685E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st2,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_19) == 1.2138685E+02)
printf "************************************************************************"
printf "* Checking Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.64E-04) ** 2 + error(nmssm_ext_zz2_20) ** 2)
printf "Expecting 2.1936014E+00"
show(integral(nmssm_ext_zz2_20))
real pull = abs (integral (nmssm_ext_zz2_20) - 2.1936014E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_20) == 2.1936014E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.77E-03) ** 2 + error(nmssm_ext_zz2_21) ** 2)
printf "Expecting 5.1618647E+00"
show(integral(nmssm_ext_zz2_21))
real pull = abs (integral (nmssm_ext_zz2_21) - 5.1618647E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd1,sd1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_21) == 5.1618647E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.36E-06) ** 2 + error(nmssm_ext_zz2_22) ** 2)
printf "Expecting 2.1004911E-02"
show(integral(nmssm_ext_zz2_22))
real pull = abs (integral (nmssm_ext_zz2_22) - 2.1004911E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd2,sd2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_22) == 2.1004911E-02)
printf "************************************************************************"
printf "* Checking Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.75E-03) ** 2 + error(nmssm_ext_zz2_23) ** 2)
printf "Expecting 5.1639219E+00"
show(integral(nmssm_ext_zz2_23))
real pull = abs (integral (nmssm_ext_zz2_23) - 5.1639219E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss1,ss1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_23) == 5.1639219E+00)
printf "************************************************************************"
printf "* Checking Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.40E-06) ** 2 + error(nmssm_ext_zz2_24) ** 2)
printf "Expecting 2.0978904E-02"
show(integral(nmssm_ext_zz2_24))
real pull = abs (integral (nmssm_ext_zz2_24) - 2.0978904E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss2,ss2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_24) == 2.0978904E-02)
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-04) ** 2 + error(nmssm_ext_zz2_25) ** 2)
printf "Expecting 1.4029722E+00"
show(integral(nmssm_ext_zz2_25))
real pull = abs (integral (nmssm_ext_zz2_25) - 1.4029722E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb1c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_25) == 1.4029722E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.19E-03) ** 2 + error(nmssm_ext_zz2_26) ** 2)
printf "Expecting 3.4385312E+00"
show(integral(nmssm_ext_zz2_26))
real pull = abs (integral (nmssm_ext_zz2_26) - 3.4385312E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb2,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_26) == 3.4385312E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.83E-04) ** 2 + error(nmssm_ext_zz2_27) ** 2)
printf "Expecting 1.1244023E+00"
show(integral(nmssm_ext_zz2_27))
real pull = abs (integral (nmssm_ext_zz2_27) - 1.1244023E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb2c	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_27) == 1.1244023E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.09E-04) ** 2 + error(nmssm_ext_zz2_28) ** 2)
printf "Expecting 7.1985290E-01"
show(integral(nmssm_ext_zz2_28))
real pull = abs (integral (nmssm_ext_zz2_28) - 7.1985290E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu1	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_28) == 7.1985290E-01)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.99E-04) ** 2 + error(nmssm_ext_zz2_29) ** 2)
printf "Expecting 9.8048153E-01"
show(integral(nmssm_ext_zz2_29))
real pull = abs (integral (nmssm_ext_zz2_29) - 9.8048153E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_29) == 9.8048153E-01)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.11E-03) ** 2 + error(nmssm_ext_zz2_30) ** 2)
printf "Expecting 1.4873207E+00"
show(integral(nmssm_ext_zz2_30))
real pull = abs (integral (nmssm_ext_zz2_30) - 1.4873207E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_30) == 1.4873207E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.11E-03) ** 2 + error(nmssm_ext_zz2_31) ** 2)
printf "Expecting 7.2680241E+00"
show(integral(nmssm_ext_zz2_31))
real pull = abs (integral (nmssm_ext_zz2_31) - 7.2680241E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_31) == 7.2680241E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.45E-05) ** 2 + error(nmssm_ext_zz2_32) ** 2)
printf "Expecting 1.5521212E-01"
show(integral(nmssm_ext_zz2_32))
real pull = abs (integral (nmssm_ext_zz2_32) - 1.5521212E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_32) == 1.5521212E-01)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.13E-03) ** 2 + error(nmssm_ext_zz2_33) ** 2)
printf "Expecting 7.2208348E+00"
show(integral(nmssm_ext_zz2_33))
real pull = abs (integral (nmssm_ext_zz2_33) - 7.2208348E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu2	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_33) == 7.2208348E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.97E-03) ** 2 + error(nmssm_ext_zz2_34) ** 2)
printf "Expecting 3.6724409E+00"
show(integral(nmssm_ext_zz2_34))
real pull = abs (integral (nmssm_ext_zz2_34) - 3.6724409E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_34) == 3.6724409E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.47E-03) ** 2 + error(nmssm_ext_zz2_35) ** 2)
printf "Expecting 4.3908722E+00"
show(integral(nmssm_ext_zz2_35))
real pull = abs (integral (nmssm_ext_zz2_35) - 4.3908722E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_35) == 4.3908722E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-02) ** 2 + error(nmssm_ext_zz2_36) ** 2)
printf "Expecting 2.3428498E+01"
show(integral(nmssm_ext_zz2_36))
real pull = abs (integral (nmssm_ext_zz2_36) - 2.3428498E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_36) == 2.3428498E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.48E-03) ** 2 + error(nmssm_ext_zz2_37) ** 2)
printf "Expecting 1.5521031E+00"
show(integral(nmssm_ext_zz2_37))
real pull = abs (integral (nmssm_ext_zz2_37) - 1.5521031E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu3	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_37) == 1.5521031E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.58E-03) ** 2 + error(nmssm_ext_zz2_38) ** 2)
printf "Expecting 8.2447296E+00"
show(integral(nmssm_ext_zz2_38))
real pull = abs (integral (nmssm_ext_zz2_38) - 8.2447296E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_38) == 8.2447296E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.67E-03) ** 2 + error(nmssm_ext_zz2_39) ** 2)
printf "Expecting 6.3749503E+00"
show(integral(nmssm_ext_zz2_39))
real pull = abs (integral (nmssm_ext_zz2_39) - 6.3749503E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_39) == 6.3749503E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.88E-02) ** 2 + error(nmssm_ext_zz2_40) ** 2)
printf "Expecting 3.7928006E+01"
show(integral(nmssm_ext_zz2_40))
real pull = abs (integral (nmssm_ext_zz2_40) - 3.7928006E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu4,neu4	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_40) == 3.7928006E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.64E-04) ** 2 + error(nmssm_ext_zz2_41) ** 2)
printf "Expecting 8.9942889E-01"
show(integral(nmssm_ext_zz2_41))
real pull = abs (integral (nmssm_ext_zz2_41) - 8.9942889E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu4,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_41) == 8.9942889E-01)
printf "************************************************************************"
printf "* Checking Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-02) ** 2 + error(nmssm_ext_zz2_42) ** 2)
printf "Expecting 2.7159161E+01"
show(integral(nmssm_ext_zz2_42))
real pull = abs (integral (nmssm_ext_zz2_42) - 2.7159161E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu5,neu5	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_42) == 2.7159161E+01)
printf "************************************************************************"
printf "* Checking Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E-01) ** 2 + error(nmssm_ext_zz2_43) ** 2)
printf "Expecting 3.4206675E+02"
show(integral(nmssm_ext_zz2_43))
real pull = abs (integral (nmssm_ext_zz2_43) - 3.4206675E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_43) == 3.4206675E+02)
printf "************************************************************************"
printf "* Checking Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.97E-02) ** 2 + error(nmssm_ext_zz2_44) ** 2)
printf "Expecting 7.3337377E+01"
show(integral(nmssm_ext_zz2_44))
real pull = abs (integral (nmssm_ext_zz2_44) - 7.3337377E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_44) == 7.3337377E+01)
printf "************************************************************************"
printf "* Checking Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.17E-03) ** 2 + error(nmssm_ext_zz2_45) ** 2)
printf "Expecting 1.7238883E+01"
show(integral(nmssm_ext_zz2_45))
real pull = abs (integral (nmssm_ext_zz2_45) - 1.7238883E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_45) == 1.7238883E+01)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.67E+00) ** 2 + error(nmssm_ext_zz2_46) ** 2)
printf "Expecting 7.4490352E+03"
show(integral(nmssm_ext_zz2_46))
real pull = abs (integral (nmssm_ext_zz2_46) - 7.4490352E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_46) == 7.4490352E+03)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.17E-01) ** 2 + error(nmssm_ext_zz2_47) ** 2)
printf "Expecting 3.2080731E+02"
show(integral(nmssm_ext_zz2_47))
real pull = abs (integral (nmssm_ext_zz2_47) - 3.2080731E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_zz2_47) == 3.2080731E+02)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.22E-04) ** 2 + error(nmssm_ext_zz2_48) ** 2)
printf "Expecting 1.1647312E+00"
show(integral(nmssm_ext_zz2_48))
real pull = abs (integral (nmssm_ext_zz2_48) - 1.1647312E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_48) == 1.1647312E+00)
printf "************************************************************************"
printf "* Checking Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.51E-03) ** 2 + error(nmssm_ext_zz2_49) ** 2)
printf "Expecting 5.3238961E+00"
show(integral(nmssm_ext_zz2_49))
real pull = abs (integral (nmssm_ext_zz2_49) - 5.3238961E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h02,h02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_49) == 5.3238961E+00)
printf "************************************************************************"
printf "* Checking Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.43E-04) ** 2 + error(nmssm_ext_zz2_50) ** 2)
printf "Expecting 5.6636899E-01"
show(integral(nmssm_ext_zz2_50))
real pull = abs (integral (nmssm_ext_zz2_50) - 5.6636899E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h02,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_50) == 5.6636899E-01)
printf "************************************************************************"
printf "* Checking Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.20E-03) ** 2 + error(nmssm_ext_zz2_51) ** 2)
printf "Expecting 2.0857873E+00"
show(integral(nmssm_ext_zz2_51))
real pull = abs (integral (nmssm_ext_zz2_51) - 2.0857873E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h03,h03	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_51) == 2.0857873E+00)
printf "************************************************************************"
printf "* Checking Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.56E-03) ** 2 + error(nmssm_ext_zz2_52) ** 2)
printf "Expecting 3.2147391E+00"
show(integral(nmssm_ext_zz2_52))
real pull = abs (integral (nmssm_ext_zz2_52) - 3.2147391E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A01,A01	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_52) == 3.2147391E+00)
printf "************************************************************************"
printf "* Checking Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.09E-04) ** 2 + error(nmssm_ext_zz2_53) ** 2)
printf "Expecting 7.9844798E-01"
show(integral(nmssm_ext_zz2_53))
real pull = abs (integral (nmssm_ext_zz2_53) - 7.9844798E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A01,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_53) == 7.9844798E-01)
printf "************************************************************************"
printf "* Checking Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.26E-03) ** 2 + error(nmssm_ext_zz2_54) ** 2)
printf "Expecting 1.9136559E+00"
show(integral(nmssm_ext_zz2_54))
real pull = abs (integral (nmssm_ext_zz2_54) - 1.9136559E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A02,A02	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_54) == 1.9136559E+00)
printf "************************************************************************"
printf "* Checking Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.91E-07) ** 2 + error(nmssm_ext_zz2_55) ** 2)
printf "Expecting 7.5040141E-04"
show(integral(nmssm_ext_zz2_55))
real pull = abs (integral (nmssm_ext_zz2_55) - 7.5040141E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,A01		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_55) == 7.5040141E-04)
printf "************************************************************************"
printf "* Checking Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.75E-05) ** 2 + error(nmssm_ext_zz2_56) ** 2)
printf "Expecting 1.2193386E-01"
show(integral(nmssm_ext_zz2_56))
real pull = abs (integral (nmssm_ext_zz2_56) - 1.2193386E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,A02	   	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz2_56) == 1.2193386E-01)
printf "************************************************************************"
printf "* Checking Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.34E-05) ** 2 + error(nmssm_ext_zz2_57) ** 2)
printf "Expecting 2.0506880E-01"
show(integral(nmssm_ext_zz2_57))
real pull = abs (integral (nmssm_ext_zz2_57) - 2.0506880E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_zz2_57) == 2.0506880E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
