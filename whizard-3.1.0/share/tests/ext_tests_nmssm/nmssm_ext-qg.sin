

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-qg.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------
















! -------------------------------------------------------------------------
	! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_qg_1 = u,gl => su1,sgl	
process nmssm_ext_qg_2 = u,gl => su2,sgl	
process nmssm_ext_qg_3 = U,gl => su1c,sgl	
process nmssm_ext_qg_4 = U,gl => su2c,sgl	
process nmssm_ext_qg_5 = d,gl => sd1,sgl	
process nmssm_ext_qg_6 = d,gl => sd2,sgl	
process nmssm_ext_qg_7 = D,gl => sd1c,sgl	
process nmssm_ext_qg_8 = D,gl => sd2c,sgl	
process nmssm_ext_qg_9 = u,gl => su1,sgl	
process nmssm_ext_qg_10 = u,gl => su2,sgl	
process nmssm_ext_qg_11 = U,gl => su1c,sgl	
process nmssm_ext_qg_12 = U,gl => su2c,sgl	
process nmssm_ext_qg_13 = d,gl => sd1,sgl	
process nmssm_ext_qg_14 = d,gl => sd2,sgl	
process nmssm_ext_qg_15 = D,gl => sd1c,sgl	
process nmssm_ext_qg_16 = D,gl => sd2c,sgl	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = u,gl
seed = 0
integrate (nmssm_ext_qg_1)
printf "************************************************************************"
printf "* Integrating u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = u,gl
seed = 0
integrate (nmssm_ext_qg_2)
printf "************************************************************************"
printf "* Integrating U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = U,gl
seed = 0
integrate (nmssm_ext_qg_3)
printf "************************************************************************"
printf "* Integrating U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = U,gl
seed = 0
integrate (nmssm_ext_qg_4)
printf "************************************************************************"
printf "* Integrating d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,gl
seed = 0
integrate (nmssm_ext_qg_5)
printf "************************************************************************"
printf "* Integrating d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = d,gl
seed = 0
integrate (nmssm_ext_qg_6)
printf "************************************************************************"
printf "* Integrating D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = D,gl
seed = 0
integrate (nmssm_ext_qg_7)
printf "************************************************************************"
printf "* Integrating D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = D,gl
seed = 0
integrate (nmssm_ext_qg_8)
printf "************************************************************************"
printf "* Integrating u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,gl
seed = 0
integrate (nmssm_ext_qg_9)
printf "************************************************************************"
printf "* Integrating u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = u,gl
seed = 0
integrate (nmssm_ext_qg_10)
printf "************************************************************************"
printf "* Integrating U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = U,gl
seed = 0
integrate (nmssm_ext_qg_11)
printf "************************************************************************"
printf "* Integrating U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = U,gl
seed = 0
integrate (nmssm_ext_qg_12)
printf "************************************************************************"
printf "* Integrating d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = d,gl
seed = 0
integrate (nmssm_ext_qg_13)
printf "************************************************************************"
printf "* Integrating d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = d,gl
seed = 0
integrate (nmssm_ext_qg_14)
printf "************************************************************************"
printf "* Integrating D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = D,gl
seed = 0
integrate (nmssm_ext_qg_15)
printf "************************************************************************"
printf "* Integrating D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = D,gl
seed = 0
integrate (nmssm_ext_qg_16)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E+00) ** 2 + error(nmssm_ext_qg_1) ** 2)
printf "Expecting 1.8992459E+03"
show(integral(nmssm_ext_qg_1))
real pull = abs (integral (nmssm_ext_qg_1) - 1.8992459E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,gl => su1,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_1) == 1.8992459E+03)
printf "************************************************************************"
printf "* Checking u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.27E+00) ** 2 + error(nmssm_ext_qg_2) ** 2)
printf "Expecting 1.9003712E+03"
show(integral(nmssm_ext_qg_2))
real pull = abs (integral (nmssm_ext_qg_2) - 1.9003712E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,gl => su2,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_2) == 1.9003712E+03)
printf "************************************************************************"
printf "* Checking U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.31E+00) ** 2 + error(nmssm_ext_qg_3) ** 2)
printf "Expecting 1.8990060E+03"
show(integral(nmssm_ext_qg_3))
real pull = abs (integral (nmssm_ext_qg_3) - 1.8990060E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in U,gl => su1c,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_3) == 1.8990060E+03)
printf "************************************************************************"
printf "* Checking U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E+00) ** 2 + error(nmssm_ext_qg_4) ** 2)
printf "Expecting 1.8991037E+03"
show(integral(nmssm_ext_qg_4))
real pull = abs (integral (nmssm_ext_qg_4) - 1.8991037E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in U,gl => su2c,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_4) == 1.8991037E+03)
printf "************************************************************************"
printf "* Checking d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E+00) ** 2 + error(nmssm_ext_qg_5) ** 2)
printf "Expecting 1.8976483E+03"
show(integral(nmssm_ext_qg_5))
real pull = abs (integral (nmssm_ext_qg_5) - 1.8976483E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,gl => sd1,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_5) == 1.8976483E+03)
printf "************************************************************************"
printf "* Checking d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E+00) ** 2 + error(nmssm_ext_qg_6) ** 2)
printf "Expecting 1.9001410E+03"
show(integral(nmssm_ext_qg_6))
real pull = abs (integral (nmssm_ext_qg_6) - 1.9001410E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,gl => sd2,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_6) == 1.9001410E+03)
printf "************************************************************************"
printf "* Checking D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.31E+00) ** 2 + error(nmssm_ext_qg_7) ** 2)
printf "Expecting 1.8966650E+03"
show(integral(nmssm_ext_qg_7))
real pull = abs (integral (nmssm_ext_qg_7) - 1.8966650E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in D,gl => sd1c,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_7) == 1.8966650E+03)
printf "************************************************************************"
printf "* Checking D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E+00) ** 2 + error(nmssm_ext_qg_8) ** 2)
printf "Expecting 1.9007399E+03"
show(integral(nmssm_ext_qg_8))
real pull = abs (integral (nmssm_ext_qg_8) - 1.9007399E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in D,gl => sd2c,sgl	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_8) == 1.9007399E+03)
printf "************************************************************************"
printf "* Checking u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.65E-01) ** 2 + error(nmssm_ext_qg_9) ** 2)
printf "Expecting 1.0844597E+03"
show(integral(nmssm_ext_qg_9))
real pull = abs (integral (nmssm_ext_qg_9) - 1.0844597E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,gl => su1,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_9) == 1.0844597E+03)
printf "************************************************************************"
printf "* Checking u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.42E-01) ** 2 + error(nmssm_ext_qg_10) ** 2)
printf "Expecting 1.0858668E+03"
show(integral(nmssm_ext_qg_10))
real pull = abs (integral (nmssm_ext_qg_10) - 1.0858668E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in u,gl => su2,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_10) == 1.0858668E+03)
printf "************************************************************************"
printf "* Checking U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.55E-01) ** 2 + error(nmssm_ext_qg_11) ** 2)
printf "Expecting 1.0848775E+03"
show(integral(nmssm_ext_qg_11))
real pull = abs (integral (nmssm_ext_qg_11) - 1.0848775E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in U,gl => su1c,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_11) == 1.0848775E+03)
printf "************************************************************************"
printf "* Checking U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.54E-01) ** 2 + error(nmssm_ext_qg_12) ** 2)
printf "Expecting 1.0855153E+03"
show(integral(nmssm_ext_qg_12))
real pull = abs (integral (nmssm_ext_qg_12) - 1.0855153E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in U,gl => su2c,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_12) == 1.0855153E+03)
printf "************************************************************************"
printf "* Checking d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.39E-01) ** 2 + error(nmssm_ext_qg_13) ** 2)
printf "Expecting 1.0863452E+03"
show(integral(nmssm_ext_qg_13))
real pull = abs (integral (nmssm_ext_qg_13) - 1.0863452E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,gl => sd1,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_13) == 1.0863452E+03)
printf "************************************************************************"
printf "* Checking d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.48E-01) ** 2 + error(nmssm_ext_qg_14) ** 2)
printf "Expecting 1.0860693E+03"
show(integral(nmssm_ext_qg_14))
real pull = abs (integral (nmssm_ext_qg_14) - 1.0860693E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in d,gl => sd2,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_14) == 1.0860693E+03)
printf "************************************************************************"
printf "* Checking D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.49E-01) ** 2 + error(nmssm_ext_qg_15) ** 2)
printf "Expecting 1.0858148E+03"
show(integral(nmssm_ext_qg_15))
real pull = abs (integral (nmssm_ext_qg_15) - 1.0858148E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in D,gl => sd1c,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_15) == 1.0858148E+03)
printf "************************************************************************"
printf "* Checking D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.31E-01) ** 2 + error(nmssm_ext_qg_16) ** 2)
printf "Expecting 1.0876225E+03"
show(integral(nmssm_ext_qg_16))
real pull = abs (integral (nmssm_ext_qg_16) - 1.0876225E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in D,gl => sd2c,sgl	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_qg_16) == 1.0876225E+03)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
