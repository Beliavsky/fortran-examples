

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-zz1.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------

























































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_zz1_1 = Z,Z => t,T		
process nmssm_ext_zz1_2 = Z,Z => Wp,Wm		
process nmssm_ext_zz1_3 = Z,Z => Z,Z		
process nmssm_ext_zz1_4 = Z,Z => se1,SE1	
process nmssm_ext_zz1_5 = Z,Z => se2,SE2	
process nmssm_ext_zz1_6 = Z,Z => smu1,SMU1	
process nmssm_ext_zz1_7 = Z,Z => smu2,SMU2	
process nmssm_ext_zz1_8 = Z,Z => stau1,STAU1	
process nmssm_ext_zz1_9 = Z,Z => stau2,STAU2	
process nmssm_ext_zz1_10 = Z,Z => stau1,STAU2	
process nmssm_ext_zz1_11 = Z,Z => sn11,SN11	
process nmssm_ext_zz1_12 = Z,Z => sn21,SN21	
process nmssm_ext_zz1_13 = Z,Z => sn31,SN31	
process nmssm_ext_zz1_14 = Z,Z => su1,su1c	
process nmssm_ext_zz1_15 = Z,Z => su2,su2c	
process nmssm_ext_zz1_16 = Z,Z => sc1,sc1c	
process nmssm_ext_zz1_17 = Z,Z => sc2,sc2c	
process nmssm_ext_zz1_18 = Z,Z => st1,st1c	
process nmssm_ext_zz1_19 = Z,Z => st2,st2c	
process nmssm_ext_zz1_20 = Z,Z => st1,st2c	
process nmssm_ext_zz1_21 = Z,Z => sd1,sd1c	
process nmssm_ext_zz1_22 = Z,Z => sd2,sd2c	
process nmssm_ext_zz1_23 = Z,Z => ss1,ss1c	
process nmssm_ext_zz1_24 = Z,Z => ss2,ss2c	
process nmssm_ext_zz1_25 = Z,Z => sb1,sb1c	
process nmssm_ext_zz1_26 = Z,Z => sb2,sb2c	
process nmssm_ext_zz1_27 = Z,Z => sb1,sb2c	
process nmssm_ext_zz1_28 = Z,Z => neu1,neu1	
process nmssm_ext_zz1_29 = Z,Z => neu1,neu2	
process nmssm_ext_zz1_30 = Z,Z => neu1,neu3	
process nmssm_ext_zz1_31 = Z,Z => neu1,neu4	
process nmssm_ext_zz1_32 = Z,Z => neu1,neu5	
process nmssm_ext_zz1_33 = Z,Z => neu2,neu2	
process nmssm_ext_zz1_34 = Z,Z => neu2,neu3	
process nmssm_ext_zz1_35 = Z,Z => neu2,neu4	
process nmssm_ext_zz1_36 = Z,Z => neu2,neu5	
process nmssm_ext_zz1_37 = Z,Z => neu3,neu3	
process nmssm_ext_zz1_38 = Z,Z => neu3,neu4	
process nmssm_ext_zz1_39 = Z,Z => neu3,neu5	
process nmssm_ext_zz1_40 = Z,Z => neu4,neu4	
process nmssm_ext_zz1_41 = Z,Z => neu4,neu5	
process nmssm_ext_zz1_42 = Z,Z => neu5,neu5	
process nmssm_ext_zz1_43 = Z,Z => "ch1+","ch1-"	
process nmssm_ext_zz1_44 = Z,Z => "ch1+","ch2-"	
process nmssm_ext_zz1_45 = Z,Z => "ch2+","ch2-"	
process nmssm_ext_zz1_46 = Z,Z => h01,h01	
process nmssm_ext_zz1_47 = Z,Z => h01,h02	
process nmssm_ext_zz1_48 = Z,Z => h01,h03	
process nmssm_ext_zz1_49 = Z,Z => h02,h02	
process nmssm_ext_zz1_50 = Z,Z => h02,h03	
process nmssm_ext_zz1_51 = Z,Z => h03,h03	
process nmssm_ext_zz1_52 = Z,Z => A01,A01	
process nmssm_ext_zz1_53 = Z,Z => A01,A02	
process nmssm_ext_zz1_54 = Z,Z => A02,A02	
process nmssm_ext_zz1_55 = Z,Z => Z,A01		
process nmssm_ext_zz1_56 = Z,Z => Z,A02	   	
process nmssm_ext_zz1_57 = Z,Z => Hp,Hm	   	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_1)
printf "************************************************************************"
printf "* Integrating Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_2)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_3)
printf "************************************************************************"
printf "* Integrating Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_4)
printf "************************************************************************"
printf "* Integrating Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_5)
printf "************************************************************************"
printf "* Integrating Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_6)
printf "************************************************************************"
printf "* Integrating Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_7)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_8)
printf "************************************************************************"
printf "* Integrating Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_9)
printf "************************************************************************"
printf "* Integrating Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_10)
printf "************************************************************************"
printf "* Integrating Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_11)
printf "************************************************************************"
printf "* Integrating Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_12)
printf "************************************************************************"
printf "* Integrating Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_13)
printf "************************************************************************"
printf "* Integrating Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_14)
printf "************************************************************************"
printf "* Integrating Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_15)
printf "************************************************************************"
printf "* Integrating Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_16)
printf "************************************************************************"
printf "* Integrating Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_17)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_18)
printf "************************************************************************"
printf "* Integrating Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_19)
printf "************************************************************************"
printf "* Integrating Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_20)
printf "************************************************************************"
printf "* Integrating Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_21)
printf "************************************************************************"
printf "* Integrating Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_22)
printf "************************************************************************"
printf "* Integrating Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_23)
printf "************************************************************************"
printf "* Integrating Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_24)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_25)
printf "************************************************************************"
printf "* Integrating Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_26)
printf "************************************************************************"
printf "* Integrating Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_27)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_28)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_29)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_30)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_31)
printf "************************************************************************"
printf "* Integrating Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_32)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_33)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_34)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_35)
printf "************************************************************************"
printf "* Integrating Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_36)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_37)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_38)
printf "************************************************************************"
printf "* Integrating Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_39)
printf "************************************************************************"
printf "* Integrating Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_40)
printf "************************************************************************"
printf "* Integrating Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_41)
printf "************************************************************************"
printf "* Integrating Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_42)
printf "************************************************************************"
printf "* Integrating Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_43)
printf "************************************************************************"
printf "* Integrating Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_44)
printf "************************************************************************"
printf "* Integrating Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_45)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_46)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_47)
printf "************************************************************************"
printf "* Integrating Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_48)
printf "************************************************************************"
printf "* Integrating Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_49)
printf "************************************************************************"
printf "* Integrating Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_50)
printf "************************************************************************"
printf "* Integrating Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_51)
printf "************************************************************************"
printf "* Integrating Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_52)
printf "************************************************************************"
printf "* Integrating Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_53)
printf "************************************************************************"
printf "* Integrating Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_54)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_55)
printf "************************************************************************"
printf "* Integrating Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_56)
printf "************************************************************************"
printf "* Integrating Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Z,Z
seed = 0
integrate (nmssm_ext_zz1_57)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E+00) ** 2 + error(nmssm_ext_zz1_1) ** 2)
printf "Expecting 1.3967134E+03"
show(integral(nmssm_ext_zz1_1))
real pull = abs (integral (nmssm_ext_zz1_1) - 1.3967134E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_1) == 1.3967134E+03)
printf "************************************************************************"
printf "* Checking Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.35E+03) ** 2 + error(nmssm_ext_zz1_2) ** 2)
printf "Expecting 6.0765347E+05"
show(integral(nmssm_ext_zz1_2))
real pull = abs (integral (nmssm_ext_zz1_2) - 6.0765347E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Wp,Wm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_2) == 6.0765347E+05)
printf "************************************************************************"
printf "* Checking Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.92E-02) ** 2 + error(nmssm_ext_zz1_3) ** 2)
printf "Expecting 8.4984692E+01"
show(integral(nmssm_ext_zz1_3))
real pull = abs (integral (nmssm_ext_zz1_3) - 8.4984692E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_3) == 8.4984692E+01)
printf "************************************************************************"
printf "* Checking Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.41E-03) ** 2 + error(nmssm_ext_zz1_4) ** 2)
printf "Expecting 1.2485340E+00"
show(integral(nmssm_ext_zz1_4))
real pull = abs (integral (nmssm_ext_zz1_4) - 1.2485340E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_4) == 1.2485340E+00)
printf "************************************************************************"
printf "* Checking Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.68E-04) ** 2 + error(nmssm_ext_zz1_5) ** 2)
printf "Expecting 7.7167582E-01"
show(integral(nmssm_ext_zz1_5))
real pull = abs (integral (nmssm_ext_zz1_5) - 7.7167582E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_5) == 7.7167582E-01)
printf "************************************************************************"
printf "* Checking Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.42E-03) ** 2 + error(nmssm_ext_zz1_6) ** 2)
printf "Expecting 1.2465830E+00"
show(integral(nmssm_ext_zz1_6))
real pull = abs (integral (nmssm_ext_zz1_6) - 1.2465830E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_6) == 1.2465830E+00)
printf "************************************************************************"
printf "* Checking Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.51E-04) ** 2 + error(nmssm_ext_zz1_7) ** 2)
printf "Expecting 7.7408572E-01"
show(integral(nmssm_ext_zz1_7))
real pull = abs (integral (nmssm_ext_zz1_7) - 7.7408572E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_zz1_7) == 7.7408572E-01)
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-03) ** 2 + error(nmssm_ext_zz1_8) ** 2)
printf "Expecting 1.0003363E+00"
show(integral(nmssm_ext_zz1_8))
real pull = abs (integral (nmssm_ext_zz1_8) - 1.0003363E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_8) == 1.0003363E+00)
printf "************************************************************************"
printf "* Checking Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.10E-03) ** 2 + error(nmssm_ext_zz1_9) ** 2)
printf "Expecting 9.9911458E-01"
show(integral(nmssm_ext_zz1_9))
real pull = abs (integral (nmssm_ext_zz1_9) - 9.9911458E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_9) == 9.9911458E-01)
printf "************************************************************************"
printf "* Checking Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.67E-05) ** 2 + error(nmssm_ext_zz1_10) ** 2)
printf "Expecting 1.4934907E-02"
show(integral(nmssm_ext_zz1_10))
real pull = abs (integral (nmssm_ext_zz1_10) - 1.4934907E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_10) == 1.4934907E-02)
printf "************************************************************************"
printf "* Checking Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.07E-02) ** 2 + error(nmssm_ext_zz1_11) ** 2)
printf "Expecting 1.3975055E+01"
show(integral(nmssm_ext_zz1_11))
real pull = abs (integral (nmssm_ext_zz1_11) - 1.3975055E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn11,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_11) == 1.3975055E+01)
printf "************************************************************************"
printf "* Checking Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.08E-02) ** 2 + error(nmssm_ext_zz1_12) ** 2)
printf "Expecting 1.4030331E+01"
show(integral(nmssm_ext_zz1_12))
real pull = abs (integral (nmssm_ext_zz1_12) - 1.4030331E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn21,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_12) == 1.4030331E+01)
printf "************************************************************************"
printf "* Checking Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.10E-02) ** 2 + error(nmssm_ext_zz1_13) ** 2)
printf "Expecting 1.3961302E+01"
show(integral(nmssm_ext_zz1_13))
real pull = abs (integral (nmssm_ext_zz1_13) - 1.3961302E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sn31,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_13) == 1.3961302E+01)
printf "************************************************************************"
printf "* Checking Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-03) ** 2 + error(nmssm_ext_zz1_14) ** 2)
printf "Expecting 4.6361968E+00"
show(integral(nmssm_ext_zz1_14))
real pull = abs (integral (nmssm_ext_zz1_14) - 4.6361968E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_14) == 4.6361968E+00)
printf "************************************************************************"
printf "* Checking Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.05E-05) ** 2 + error(nmssm_ext_zz1_15) ** 2)
printf "Expecting 3.0433837E-01"
show(integral(nmssm_ext_zz1_15))
real pull = abs (integral (nmssm_ext_zz1_15) - 3.0433837E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_15) == 3.0433837E-01)
printf "************************************************************************"
printf "* Checking Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.69E-04) ** 2 + error(nmssm_ext_zz1_16) ** 2)
printf "Expecting 4.6341941E+00"
show(integral(nmssm_ext_zz1_16))
real pull = abs (integral (nmssm_ext_zz1_16) - 4.6341941E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_16) == 4.6341941E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.31E-05) ** 2 + error(nmssm_ext_zz1_17) ** 2)
printf "Expecting 3.0390402E-01"
show(integral(nmssm_ext_zz1_17))
real pull = abs (integral (nmssm_ext_zz1_17) - 3.0390402E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_17) == 3.0390402E-01)
printf "************************************************************************"
printf "* Checking Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.10E-02) ** 2 + error(nmssm_ext_zz1_18) ** 2)
printf "Expecting 4.7421516E+02"
show(integral(nmssm_ext_zz1_18))
real pull = abs (integral (nmssm_ext_zz1_18) - 4.7421516E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_18) == 4.7421516E+02)
printf "************************************************************************"
printf "* Checking Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.58E-02) ** 2 + error(nmssm_ext_zz1_19) ** 2)
printf "Expecting 4.3095314E+01"
show(integral(nmssm_ext_zz1_19))
real pull = abs (integral (nmssm_ext_zz1_19) - 4.3095314E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_19) == 4.3095314E+01)
printf "************************************************************************"
printf "* Checking Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.78E-03) ** 2 + error(nmssm_ext_zz1_20) ** 2)
printf "Expecting 6.1038412E+00"
show(integral(nmssm_ext_zz1_20))
real pull = abs (integral (nmssm_ext_zz1_20) - 6.1038412E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_20) == 6.1038412E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.95E-03) ** 2 + error(nmssm_ext_zz1_21) ** 2)
printf "Expecting 1.0001657E+01"
show(integral(nmssm_ext_zz1_21))
real pull = abs (integral (nmssm_ext_zz1_21) - 1.0001657E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_21) == 1.0001657E+01)
printf "************************************************************************"
printf "* Checking Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.57E-05) ** 2 + error(nmssm_ext_zz1_22) ** 2)
printf "Expecting 4.5302150E-02"
show(integral(nmssm_ext_zz1_22))
real pull = abs (integral (nmssm_ext_zz1_22) - 4.5302150E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_22) == 4.5302150E-02)
printf "************************************************************************"
printf "* Checking Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.05E-03) ** 2 + error(nmssm_ext_zz1_23) ** 2)
printf "Expecting 1.0002384E+01"
show(integral(nmssm_ext_zz1_23))
real pull = abs (integral (nmssm_ext_zz1_23) - 1.0002384E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_23) == 1.0002384E+01)
printf "************************************************************************"
printf "* Checking Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.61E-05) ** 2 + error(nmssm_ext_zz1_24) ** 2)
printf "Expecting 4.5282252E-02"
show(integral(nmssm_ext_zz1_24))
real pull = abs (integral (nmssm_ext_zz1_24) - 4.5282252E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_24) == 4.5282252E-02)
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.54E-04) ** 2 + error(nmssm_ext_zz1_25) ** 2)
printf "Expecting 2.7847591E+00"
show(integral(nmssm_ext_zz1_25))
real pull = abs (integral (nmssm_ext_zz1_25) - 2.7847591E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_25) == 2.7847591E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.16E-03) ** 2 + error(nmssm_ext_zz1_26) ** 2)
printf "Expecting 7.1965945E+00"
show(integral(nmssm_ext_zz1_26))
real pull = abs (integral (nmssm_ext_zz1_26) - 7.1965945E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_26) == 7.1965945E+00)
printf "************************************************************************"
printf "* Checking Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.51E-04) ** 2 + error(nmssm_ext_zz1_27) ** 2)
printf "Expecting 2.1561519E+00"
show(integral(nmssm_ext_zz1_27))
real pull = abs (integral (nmssm_ext_zz1_27) - 2.1561519E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_27) == 2.1561519E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.61E-03) ** 2 + error(nmssm_ext_zz1_28) ** 2)
printf "Expecting 1.4992185E+00"
show(integral(nmssm_ext_zz1_28))
real pull = abs (integral (nmssm_ext_zz1_28) - 1.4992185E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_28) == 1.4992185E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.24E-03) ** 2 + error(nmssm_ext_zz1_29) ** 2)
printf "Expecting 1.8048862E+00"
show(integral(nmssm_ext_zz1_29))
real pull = abs (integral (nmssm_ext_zz1_29) - 1.8048862E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_29) == 1.8048862E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.59E-03) ** 2 + error(nmssm_ext_zz1_30) ** 2)
printf "Expecting 3.3510535E+00"
show(integral(nmssm_ext_zz1_30))
real pull = abs (integral (nmssm_ext_zz1_30) - 3.3510535E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_30) == 3.3510535E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E-02) ** 2 + error(nmssm_ext_zz1_31) ** 2)
printf "Expecting 1.3589698E+01"
show(integral(nmssm_ext_zz1_31))
real pull = abs (integral (nmssm_ext_zz1_31) - 1.3589698E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_31) == 1.3589698E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.32E-04) ** 2 + error(nmssm_ext_zz1_32) ** 2)
printf "Expecting 2.5461034E-01"
show(integral(nmssm_ext_zz1_32))
real pull = abs (integral (nmssm_ext_zz1_32) - 2.5461034E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu1,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_32) == 2.5461034E-01)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.74E-02) ** 2 + error(nmssm_ext_zz1_33) ** 2)
printf "Expecting 1.2924366E+01"
show(integral(nmssm_ext_zz1_33))
real pull = abs (integral (nmssm_ext_zz1_33) - 1.2924366E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_33) == 1.2924366E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-02) ** 2 + error(nmssm_ext_zz1_34) ** 2)
printf "Expecting 9.5629250E+00"
show(integral(nmssm_ext_zz1_34))
real pull = abs (integral (nmssm_ext_zz1_34) - 9.5629250E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_34) == 9.5629250E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.67E-03) ** 2 + error(nmssm_ext_zz1_35) ** 2)
printf "Expecting 8.3508117E+00"
show(integral(nmssm_ext_zz1_35))
real pull = abs (integral (nmssm_ext_zz1_35) - 8.3508117E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_35) == 8.3508117E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.33E-02) ** 2 + error(nmssm_ext_zz1_36) ** 2)
printf "Expecting 4.5508369E+01"
show(integral(nmssm_ext_zz1_36))
real pull = abs (integral (nmssm_ext_zz1_36) - 4.5508369E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu2,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_36) == 4.5508369E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.88E-03) ** 2 + error(nmssm_ext_zz1_37) ** 2)
printf "Expecting 2.4555420E+00"
show(integral(nmssm_ext_zz1_37))
real pull = abs (integral (nmssm_ext_zz1_37) - 2.4555420E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_37) == 2.4555420E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.44E-02) ** 2 + error(nmssm_ext_zz1_38) ** 2)
printf "Expecting 1.5611183E+01"
show(integral(nmssm_ext_zz1_38))
real pull = abs (integral (nmssm_ext_zz1_38) - 1.5611183E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_38) == 1.5611183E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.18E-02) ** 2 + error(nmssm_ext_zz1_39) ** 2)
printf "Expecting 1.2425948E+01"
show(integral(nmssm_ext_zz1_39))
real pull = abs (integral (nmssm_ext_zz1_39) - 1.2425948E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu3,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_39) == 1.2425948E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.12E-02) ** 2 + error(nmssm_ext_zz1_40) ** 2)
printf "Expecting 7.8120553E+01"
show(integral(nmssm_ext_zz1_40))
real pull = abs (integral (nmssm_ext_zz1_40) - 7.8120553E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu4,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_40) == 7.8120553E+01)
printf "************************************************************************"
printf "* Checking Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.92E-03) ** 2 + error(nmssm_ext_zz1_41) ** 2)
printf "Expecting 1.5341093E+00"
show(integral(nmssm_ext_zz1_41))
real pull = abs (integral (nmssm_ext_zz1_41) - 1.5341093E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu4,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_41) == 1.5341093E+00)
printf "************************************************************************"
printf "* Checking Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.28E-02) ** 2 + error(nmssm_ext_zz1_42) ** 2)
printf "Expecting 5.5808973E+01"
show(integral(nmssm_ext_zz1_42))
real pull = abs (integral (nmssm_ext_zz1_42) - 5.5808973E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => neu5,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_42) == 5.5808973E+01)
printf "************************************************************************"
printf "* Checking Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.52E-01) ** 2 + error(nmssm_ext_zz1_43) ** 2)
printf "Expecting 7.9878873E+02"
show(integral(nmssm_ext_zz1_43))
real pull = abs (integral (nmssm_ext_zz1_43) - 7.9878873E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch1+,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_43) == 7.9878873E+02)
printf "************************************************************************"
printf "* Checking Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.88E-02) ** 2 + error(nmssm_ext_zz1_44) ** 2)
printf "Expecting 1.6371703E+02"
show(integral(nmssm_ext_zz1_44))
real pull = abs (integral (nmssm_ext_zz1_44) - 1.6371703E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch1+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_44) == 1.6371703E+02)
printf "************************************************************************"
printf "* Checking Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.70E-02) ** 2 + error(nmssm_ext_zz1_45) ** 2)
printf "Expecting 3.5201258E+01"
show(integral(nmssm_ext_zz1_45))
real pull = abs (integral (nmssm_ext_zz1_45) - 3.5201258E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => ch2+,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_45) == 3.5201258E+01)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.60E+01) ** 2 + error(nmssm_ext_zz1_46) ** 2)
printf "Expecting 7.4261286E+03"
show(integral(nmssm_ext_zz1_46))
real pull = abs (integral (nmssm_ext_zz1_46) - 7.4261286E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_46) == 7.4261286E+03)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.81E-01) ** 2 + error(nmssm_ext_zz1_47) ** 2)
printf "Expecting 3.2236214E+02"
show(integral(nmssm_ext_zz1_47))
real pull = abs (integral (nmssm_ext_zz1_47) - 3.2236214E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_47) == 3.2236214E+02)
printf "************************************************************************"
printf "* Checking Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.39E-03) ** 2 + error(nmssm_ext_zz1_48) ** 2)
printf "Expecting 2.7714982E+00"
show(integral(nmssm_ext_zz1_48))
real pull = abs (integral (nmssm_ext_zz1_48) - 2.7714982E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_48) == 2.7714982E+00)
printf "************************************************************************"
printf "* Checking Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.17E-02) ** 2 + error(nmssm_ext_zz1_49) ** 2)
printf "Expecting 8.1417077E+00"
show(integral(nmssm_ext_zz1_49))
real pull = abs (integral (nmssm_ext_zz1_49) - 8.1417077E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_49) == 8.1417077E+00)
printf "************************************************************************"
printf "* Checking Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.00E-03) ** 2 + error(nmssm_ext_zz1_50) ** 2)
printf "Expecting 1.5115585E+00"
show(integral(nmssm_ext_zz1_50))
real pull = abs (integral (nmssm_ext_zz1_50) - 1.5115585E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_50) == 1.5115585E+00)
printf "************************************************************************"
printf "* Checking Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.70E-03) ** 2 + error(nmssm_ext_zz1_51) ** 2)
printf "Expecting 3.2205750E+00"
show(integral(nmssm_ext_zz1_51))
real pull = abs (integral (nmssm_ext_zz1_51) - 3.2205750E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => h03,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_51) == 3.2205750E+00)
printf "************************************************************************"
printf "* Checking Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.38E-03) ** 2 + error(nmssm_ext_zz1_52) ** 2)
printf "Expecting 6.5038707E+00"
show(integral(nmssm_ext_zz1_52))
real pull = abs (integral (nmssm_ext_zz1_52) - 6.5038707E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A01,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_52) == 6.5038707E+00)
printf "************************************************************************"
printf "* Checking Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.68E-03) ** 2 + error(nmssm_ext_zz1_53) ** 2)
printf "Expecting 2.0536918E+00"
show(integral(nmssm_ext_zz1_53))
real pull = abs (integral (nmssm_ext_zz1_53) - 2.0536918E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A01,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_53) == 2.0536918E+00)
printf "************************************************************************"
printf "* Checking Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.19E-03) ** 2 + error(nmssm_ext_zz1_54) ** 2)
printf "Expecting 2.9014956E+00"
show(integral(nmssm_ext_zz1_54))
real pull = abs (integral (nmssm_ext_zz1_54) - 2.9014956E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => A02,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_54) == 2.9014956E+00)
printf "************************************************************************"
printf "* Checking Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.28E-06) ** 2 + error(nmssm_ext_zz1_55) ** 2)
printf "Expecting 1.8464988E-03"
show(integral(nmssm_ext_zz1_55))
real pull = abs (integral (nmssm_ext_zz1_55) - 1.8464988E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,A01		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_55) == 1.8464988E-03)
printf "************************************************************************"
printf "* Checking Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.34E-04) ** 2 + error(nmssm_ext_zz1_56) ** 2)
printf "Expecting 2.9668334E-01"
show(integral(nmssm_ext_zz1_56))
real pull = abs (integral (nmssm_ext_zz1_56) - 2.9668334E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Z,A02	   	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_56) == 2.9668334E-01)
printf "************************************************************************"
printf "* Checking Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.64E-05) ** 2 + error(nmssm_ext_zz1_57) ** 2)
printf "Expecting 4.1675255E-01"
show(integral(nmssm_ext_zz1_57))
real pull = abs (integral (nmssm_ext_zz1_57) - 4.1675255E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Z,Z => Hp,Hm	   	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_zz1_57) == 4.1675255E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
