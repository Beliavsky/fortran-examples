

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-bb1.m4 1758 2010-02-11 13:27:04Z ohl $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -----------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                 -----
! -----------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -----------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
show(real)
! -----------------------------------------------------------------------
iterations = 3:200000
! -----------------------------------------------------------------------






































































! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_bb1_1 = b,B => n1,N1	      
process nmssm_ext_bb1_2 = b,B => n2,N2	      
process nmssm_ext_bb1_3 = b,B => n3,N3	      
process nmssm_ext_bb1_4 = b,B => t,T	      
process nmssm_ext_bb1_5 = b,B => Wp,Wm	      
process nmssm_ext_bb1_6 = b,B => Z,Z	      
process nmssm_ext_bb1_7 = b,B => se1,SE1      
process nmssm_ext_bb1_8 = b,B => se2,SE2      
process nmssm_ext_bb1_9 = b,B => smu1,SMU1    
process nmssm_ext_bb1_10 = b,B => smu2,SMU2    
process nmssm_ext_bb1_11 = b,B => stau1,STAU1  
process nmssm_ext_bb1_12 = b,B => stau2,STAU2  
process nmssm_ext_bb1_13 = b,B => stau1,STAU2  
process nmssm_ext_bb1_14 = b,B => sn11,SN11    
process nmssm_ext_bb1_15 = b,B => sn21,SN21    
process nmssm_ext_bb1_16 = b,B => sn31,SN31    
process nmssm_ext_bb1_17 = b,B => su1,su1c     
process nmssm_ext_bb1_18 = b,B => su2,su2c     
process nmssm_ext_bb1_19 = b,B => sc1,sc1c     
process nmssm_ext_bb1_20 = b,B => sc2,sc2c     
process nmssm_ext_bb1_21 = b,B => st1,st1c     
process nmssm_ext_bb1_22 = b,B => st2,st2c     
process nmssm_ext_bb1_23 = b,B => st1,st2c     
process nmssm_ext_bb1_24 = b,B => sd1,sd1c     
process nmssm_ext_bb1_25 = b,B => sd2,sd2c     
process nmssm_ext_bb1_26 = b,B => ss1,ss1c     
process nmssm_ext_bb1_27 = b,B => ss2,ss2c     
process nmssm_ext_bb1_28 = b,B => sb1,sb1c     
process nmssm_ext_bb1_29 = b,B => sb2,sb2c     
process nmssm_ext_bb1_30 = b,B => sb1,sb2c     
process nmssm_ext_bb1_31 = b,B => neu1,neu1    
process nmssm_ext_bb1_32 = b,B => neu1,neu2    
process nmssm_ext_bb1_33 = b,B => neu1,neu3    
process nmssm_ext_bb1_34 = b,B => neu1,neu4    
process nmssm_ext_bb1_35 = b,B => neu1,neu5    
process nmssm_ext_bb1_36 = b,B => neu2,neu2    
process nmssm_ext_bb1_37 = b,B => neu2,neu3    
process nmssm_ext_bb1_38 = b,B => neu2,neu4    
process nmssm_ext_bb1_39 = b,B => neu2,neu5    
process nmssm_ext_bb1_40 = b,B => neu3,neu3    
process nmssm_ext_bb1_41 = b,B => neu3,neu4    
process nmssm_ext_bb1_42 = b,B => neu3,neu5    
process nmssm_ext_bb1_43 = b,B => neu4,neu4    
process nmssm_ext_bb1_44 = b,B => neu4,neu5    
process nmssm_ext_bb1_45 = b,B => neu5,neu5    
process nmssm_ext_bb1_46 = b,B => "ch1+","ch1-"
process nmssm_ext_bb1_47 = b,B => "ch2+","ch2-"
process nmssm_ext_bb1_48 = b,B => "ch1+","ch2-"
process nmssm_ext_bb1_49 = b,B => sgl,sgl      
process nmssm_ext_bb1_50 = b,B => Z,h01        
process nmssm_ext_bb1_51 = b,B => Z,h02        
process nmssm_ext_bb1_52 = b,B => Z,h03        
process nmssm_ext_bb1_53 = b,B => A01,h01      
process nmssm_ext_bb1_54 = b,B => A01,h02      
process nmssm_ext_bb1_55 = b,B => A01,h03      
process nmssm_ext_bb1_56 = b,B => A02,h01      
process nmssm_ext_bb1_57 = b,B => A02,h02      
process nmssm_ext_bb1_58 = b,B => A02,h03      
process nmssm_ext_bb1_59 = b,B => Hp,Hm        
process nmssm_ext_bb1_60 = b,B => Z,A01        
process nmssm_ext_bb1_61 = b,B => Z,A02        
process nmssm_ext_bb1_62 = b,B => h01,h01      
process nmssm_ext_bb1_63 = b,B => h01,h02      
process nmssm_ext_bb1_64 = b,B => h01,h03      
process nmssm_ext_bb1_65 = b,B => h02,h02      
process nmssm_ext_bb1_66 = b,B => h02,h03      
process nmssm_ext_bb1_67 = b,B => h03,h03      
process nmssm_ext_bb1_68 = b,B => A01,A01      
process nmssm_ext_bb1_69 = b,B => A01,A02      
process nmssm_ext_bb1_70 = b,B => A02,A02      
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_1)
printf "************************************************************************"
printf "* Integrating b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_2)
printf "************************************************************************"
printf "* Integrating b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_3)
printf "************************************************************************"
printf "* Integrating b,B => t,T	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_4)
printf "************************************************************************"
printf "* Integrating b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_5)
printf "************************************************************************"
printf "* Integrating b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_6)
printf "************************************************************************"
printf "* Integrating b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_7)
printf "************************************************************************"
printf "* Integrating b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_8)
printf "************************************************************************"
printf "* Integrating b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_9)
printf "************************************************************************"
printf "* Integrating b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_10)
printf "************************************************************************"
printf "* Integrating b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_11)
printf "************************************************************************"
printf "* Integrating b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_12)
printf "************************************************************************"
printf "* Integrating b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_13)
printf "************************************************************************"
printf "* Integrating b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_14)
printf "************************************************************************"
printf "* Integrating b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_15)
printf "************************************************************************"
printf "* Integrating b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_16)
printf "************************************************************************"
printf "* Integrating b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_17)
printf "************************************************************************"
printf "* Integrating b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_18)
printf "************************************************************************"
printf "* Integrating b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_19)
printf "************************************************************************"
printf "* Integrating b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_20)
printf "************************************************************************"
printf "* Integrating b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_21)
printf "************************************************************************"
printf "* Integrating b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_22)
printf "************************************************************************"
printf "* Integrating b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_23)
printf "************************************************************************"
printf "* Integrating b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_24)
printf "************************************************************************"
printf "* Integrating b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_25)
printf "************************************************************************"
printf "* Integrating b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_26)
printf "************************************************************************"
printf "* Integrating b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_27)
printf "************************************************************************"
printf "* Integrating b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_28)
printf "************************************************************************"
printf "* Integrating b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_29)
printf "************************************************************************"
printf "* Integrating b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_30)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_31)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_32)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_33)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_34)
printf "************************************************************************"
printf "* Integrating b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_35)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_36)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_37)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_38)
printf "************************************************************************"
printf "* Integrating b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_39)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_40)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_41)
printf "************************************************************************"
printf "* Integrating b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_42)
printf "************************************************************************"
printf "* Integrating b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_43)
printf "************************************************************************"
printf "* Integrating b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_44)
printf "************************************************************************"
printf "* Integrating b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_45)
printf "************************************************************************"
printf "* Integrating b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_46)
printf "************************************************************************"
printf "* Integrating b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_47)
printf "************************************************************************"
printf "* Integrating b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_48)
printf "************************************************************************"
printf "* Integrating b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_49)
printf "************************************************************************"
printf "* Integrating b,B => Z,h01         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_50)
printf "************************************************************************"
printf "* Integrating b,B => Z,h02         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_51)
printf "************************************************************************"
printf "* Integrating b,B => Z,h03         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_52)
printf "************************************************************************"
printf "* Integrating b,B => A01,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_53)
printf "************************************************************************"
printf "* Integrating b,B => A01,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_54)
printf "************************************************************************"
printf "* Integrating b,B => A01,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_55)
printf "************************************************************************"
printf "* Integrating b,B => A02,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_56)
printf "************************************************************************"
printf "* Integrating b,B => A02,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_57)
printf "************************************************************************"
printf "* Integrating b,B => A02,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_58)
printf "************************************************************************"
printf "* Integrating b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_59)
printf "************************************************************************"
printf "* Integrating b,B => Z,A01         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_60)
printf "************************************************************************"
printf "* Integrating b,B => Z,A02         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_61)
printf "************************************************************************"
printf "* Integrating b,B => h01,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_62)
printf "************************************************************************"
printf "* Integrating b,B => h01,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_63)
printf "************************************************************************"
printf "* Integrating b,B => h01,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_64)
printf "************************************************************************"
printf "* Integrating b,B => h02,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_65)
printf "************************************************************************"
printf "* Integrating b,B => h02,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_66)
printf "************************************************************************"
printf "* Integrating b,B => h03,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_67)
printf "************************************************************************"
printf "* Integrating b,B => A01,A01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_68)
printf "************************************************************************"
printf "* Integrating b,B => A01,A02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_69)
printf "************************************************************************"
printf "* Integrating b,B => A02,A02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = b,B
seed = 0
integrate (nmssm_ext_bb1_70)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.09E-04) ** 2 + error(nmssm_ext_bb1_1) ** 2)
printf "Expecting 1.3267831E+00"
show(integral(nmssm_ext_bb1_1))
real pull = abs (integral (nmssm_ext_bb1_1) - 1.3267831E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n1,N1	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_1) == 1.3267831E+00)
printf "************************************************************************"
printf "* Checking b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.88E-04) ** 2 + error(nmssm_ext_bb1_2) ** 2)
printf "Expecting 1.3293584E+00"
show(integral(nmssm_ext_bb1_2))
real pull = abs (integral (nmssm_ext_bb1_2) - 1.3293584E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n2,N2	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_2) == 1.3293584E+00)
printf "************************************************************************"
printf "* Checking b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.08E-04) ** 2 + error(nmssm_ext_bb1_3) ** 2)
printf "Expecting 1.3273127E+00"
show(integral(nmssm_ext_bb1_3))
real pull = abs (integral (nmssm_ext_bb1_3) - 1.3273127E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => n3,N3	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_3) == 1.3273127E+00)
printf "************************************************************************"
printf "* Checking b,B => t,T	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.48E+02) ** 2 + error(nmssm_ext_bb1_4) ** 2)
printf "Expecting 5.2144408E+04"
show(integral(nmssm_ext_bb1_4))
real pull = abs (integral (nmssm_ext_bb1_4) - 5.2144408E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => t,T	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => t,T	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => t,T	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => t,T	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => t,T	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_4) == 5.2144408E+04)
printf "************************************************************************"
printf "* Checking b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.20E-01) ** 2 + error(nmssm_ext_bb1_5) ** 2)
printf "Expecting 3.3903881E+02"
show(integral(nmssm_ext_bb1_5))
real pull = abs (integral (nmssm_ext_bb1_5) - 3.3903881E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Wp,Wm	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_5) == 3.3903881E+02)
printf "************************************************************************"
printf "* Checking b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.21E-02) ** 2 + error(nmssm_ext_bb1_6) ** 2)
printf "Expecting 2.9872868E+01"
show(integral(nmssm_ext_bb1_6))
real pull = abs (integral (nmssm_ext_bb1_6) - 2.9872868E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,Z	       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_6) == 2.9872868E+01)
printf "************************************************************************"
printf "* Checking b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.71E-04) ** 2 + error(nmssm_ext_bb1_7) ** 2)
printf "Expecting 4.3638043E-01"
show(integral(nmssm_ext_bb1_7))
real pull = abs (integral (nmssm_ext_bb1_7) - 4.3638043E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => se1,SE1       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_7) == 4.3638043E-01)
printf "************************************************************************"
printf "* Checking b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.06E-05) ** 2 + error(nmssm_ext_bb1_8) ** 2)
printf "Expecting 1.0634283E-01"
show(integral(nmssm_ext_bb1_8))
real pull = abs (integral (nmssm_ext_bb1_8) - 1.0634283E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => se2,SE2       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_8) == 1.0634283E-01)
printf "************************************************************************"
printf "* Checking b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.70E-04) ** 2 + error(nmssm_ext_bb1_9) ** 2)
printf "Expecting 4.3661518E-01"
show(integral(nmssm_ext_bb1_9))
real pull = abs (integral (nmssm_ext_bb1_9) - 4.3661518E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => smu1,SMU1     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_9) == 4.3661518E-01)
printf "************************************************************************"
printf "* Checking b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.00E-05) ** 2 + error(nmssm_ext_bb1_10) ** 2)
printf "Expecting 1.0632861E-01"
show(integral(nmssm_ext_bb1_10))
real pull = abs (integral (nmssm_ext_bb1_10) - 1.0632861E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => smu2,SMU2     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_10) == 1.0632861E-01)
printf "************************************************************************"
printf "* Checking b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.13E-05) ** 2 + error(nmssm_ext_bb1_11) ** 2)
printf "Expecting 1.0801117E-01"
show(integral(nmssm_ext_bb1_11))
real pull = abs (integral (nmssm_ext_bb1_11) - 1.0801117E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau1,STAU1   @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_11) == 1.0801117E-01)
printf "************************************************************************"
printf "* Checking b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.47E-05) ** 2 + error(nmssm_ext_bb1_12) ** 2)
printf "Expecting 1.1187495E-01"
show(integral(nmssm_ext_bb1_12))
real pull = abs (integral (nmssm_ext_bb1_12) - 1.1187495E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau2,STAU2   @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_12) == 1.1187495E-01)
printf "************************************************************************"
printf "* Checking b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.36E-04) ** 2 + error(nmssm_ext_bb1_13) ** 2)
printf "Expecting 1.6168606E-01"
show(integral(nmssm_ext_bb1_13))
real pull = abs (integral (nmssm_ext_bb1_13) - 1.6168606E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => stau1,STAU2   @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_13) == 1.6168606E-01)
printf "************************************************************************"
printf "* Checking b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.62E-04) ** 2 + error(nmssm_ext_bb1_14) ** 2)
printf "Expecting 6.4716889E-01"
show(integral(nmssm_ext_bb1_14))
real pull = abs (integral (nmssm_ext_bb1_14) - 6.4716889E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn11,SN11     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_14) == 6.4716889E-01)
printf "************************************************************************"
printf "* Checking b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.56E-04) ** 2 + error(nmssm_ext_bb1_15) ** 2)
printf "Expecting 6.4761916E-01"
show(integral(nmssm_ext_bb1_15))
real pull = abs (integral (nmssm_ext_bb1_15) - 6.4761916E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn21,SN21     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_15) == 6.4761916E-01)
printf "************************************************************************"
printf "* Checking b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.58E-04) ** 2 + error(nmssm_ext_bb1_16) ** 2)
printf "Expecting 6.4714271E-01"
show(integral(nmssm_ext_bb1_16))
real pull = abs (integral (nmssm_ext_bb1_16) - 6.4714271E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sn31,SN31     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_16) == 6.4714271E-01)
printf "************************************************************************"
printf "* Checking b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.78E-02) ** 2 + error(nmssm_ext_bb1_17) ** 2)
printf "Expecting 5.5742041E+01"
show(integral(nmssm_ext_bb1_17))
real pull = abs (integral (nmssm_ext_bb1_17) - 5.5742041E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => su1,su1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_17) == 5.5742041E+01)
printf "************************************************************************"
printf "* Checking b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-02) ** 2 + error(nmssm_ext_bb1_18) ** 2)
printf "Expecting 5.5159550E+01"
show(integral(nmssm_ext_bb1_18))
real pull = abs (integral (nmssm_ext_bb1_18) - 5.5159550E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => su2,su2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_18) == 5.5159550E+01)
printf "************************************************************************"
printf "* Checking b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.74E-02) ** 2 + error(nmssm_ext_bb1_19) ** 2)
printf "Expecting 5.5797214E+01"
show(integral(nmssm_ext_bb1_19))
real pull = abs (integral (nmssm_ext_bb1_19) - 5.5797214E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sc1,sc1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_19) == 5.5797214E+01)
printf "************************************************************************"
printf "* Checking b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.74E-02) ** 2 + error(nmssm_ext_bb1_20) ** 2)
printf "Expecting 5.5156147E+01"
show(integral(nmssm_ext_bb1_20))
real pull = abs (integral (nmssm_ext_bb1_20) - 5.5156147E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sc2,sc2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_20) == 5.5156147E+01)
printf "************************************************************************"
printf "* Checking b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.06E-01) ** 2 + error(nmssm_ext_bb1_21) ** 2)
printf "Expecting 1.7348251E+02"
show(integral(nmssm_ext_bb1_21))
real pull = abs (integral (nmssm_ext_bb1_21) - 1.7348251E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st1,st1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_21) == 1.7348251E+02)
printf "************************************************************************"
printf "* Checking b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.73E-02) ** 2 + error(nmssm_ext_bb1_22) ** 2)
printf "Expecting 4.3466051E+01"
show(integral(nmssm_ext_bb1_22))
real pull = abs (integral (nmssm_ext_bb1_22) - 4.3466051E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st2,st2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_22) == 4.3466051E+01)
printf "************************************************************************"
printf "* Checking b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.94E-02) ** 2 + error(nmssm_ext_bb1_23) ** 2)
printf "Expecting 2.0700610E+01"
show(integral(nmssm_ext_bb1_23))
real pull = abs (integral (nmssm_ext_bb1_23) - 2.0700610E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => st1,st2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_23) == 2.0700610E+01)
printf "************************************************************************"
printf "* Checking b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.74E-02) ** 2 + error(nmssm_ext_bb1_24) ** 2)
printf "Expecting 5.5636486E+01"
show(integral(nmssm_ext_bb1_24))
real pull = abs (integral (nmssm_ext_bb1_24) - 5.5636486E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sd1,sd1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_24) == 5.5636486E+01)
printf "************************************************************************"
printf "* Checking b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.65E-02) ** 2 + error(nmssm_ext_bb1_25) ** 2)
printf "Expecting 5.5081261E+01"
show(integral(nmssm_ext_bb1_25))
real pull = abs (integral (nmssm_ext_bb1_25) - 5.5081261E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sd2,sd2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_25) == 5.5081261E+01)
printf "************************************************************************"
printf "* Checking b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-02) ** 2 + error(nmssm_ext_bb1_26) ** 2)
printf "Expecting 5.5611371E+01"
show(integral(nmssm_ext_bb1_26))
real pull = abs (integral (nmssm_ext_bb1_26) - 5.5611371E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ss1,ss1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_26) == 5.5611371E+01)
printf "************************************************************************"
printf "* Checking b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-02) ** 2 + error(nmssm_ext_bb1_27) ** 2)
printf "Expecting 5.5025180E+01"
show(integral(nmssm_ext_bb1_27))
real pull = abs (integral (nmssm_ext_bb1_27) - 5.5025180E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ss2,ss2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_27) == 5.5025180E+01)
printf "************************************************************************"
printf "* Checking b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.29E-01) ** 2 + error(nmssm_ext_bb1_28) ** 2)
printf "Expecting 3.8501685E+02"
show(integral(nmssm_ext_bb1_28))
real pull = abs (integral (nmssm_ext_bb1_28) - 3.8501685E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb1,sb1c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_28) == 3.8501685E+02)
printf "************************************************************************"
printf "* Checking b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.11E-01) ** 2 + error(nmssm_ext_bb1_29) ** 2)
printf "Expecting 3.7789934E+02"
show(integral(nmssm_ext_bb1_29))
real pull = abs (integral (nmssm_ext_bb1_29) - 3.7789934E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb2,sb2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_bb1_29) == 3.7789934E+02)
printf "************************************************************************"
printf "* Checking b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.60E-01) ** 2 + error(nmssm_ext_bb1_30) ** 2)
printf "Expecting 2.8687609E+02"
show(integral(nmssm_ext_bb1_30))
real pull = abs (integral (nmssm_ext_bb1_30) - 2.8687609E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sb1,sb2c      @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_30) == 2.8687609E+02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.44E-05) ** 2 + error(nmssm_ext_bb1_31) ** 2)
printf "Expecting 4.3922016E-02"
show(integral(nmssm_ext_bb1_31))
real pull = abs (integral (nmssm_ext_bb1_31) - 4.3922016E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu1     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_31) == 4.3922016E-02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E-05) ** 2 + error(nmssm_ext_bb1_32) ** 2)
printf "Expecting 2.7778895E-02"
show(integral(nmssm_ext_bb1_32))
real pull = abs (integral (nmssm_ext_bb1_32) - 2.7778895E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu2     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_32) == 2.7778895E-02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.45E-04) ** 2 + error(nmssm_ext_bb1_33) ** 2)
printf "Expecting 2.6056866E-01"
show(integral(nmssm_ext_bb1_33))
real pull = abs (integral (nmssm_ext_bb1_33) - 2.6056866E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu3     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_33) == 2.6056866E-01)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.28E-06) ** 2 + error(nmssm_ext_bb1_34) ** 2)
printf "Expecting 1.7624684E-02"
show(integral(nmssm_ext_bb1_34))
real pull = abs (integral (nmssm_ext_bb1_34) - 1.7624684E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu4     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_34) == 1.7624684E-02)
printf "************************************************************************"
printf "* Checking b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-05) ** 2 + error(nmssm_ext_bb1_35) ** 2)
printf "Expecting 5.0275637E-02"
show(integral(nmssm_ext_bb1_35))
real pull = abs (integral (nmssm_ext_bb1_35) - 5.0275637E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu1,neu5     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_35) == 5.0275637E-02)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.05E-05) ** 2 + error(nmssm_ext_bb1_36) ** 2)
printf "Expecting 2.5812694E-02"
show(integral(nmssm_ext_bb1_36))
real pull = abs (integral (nmssm_ext_bb1_36) - 2.5812694E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu2     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_36) == 2.5812694E-02)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.53E-05) ** 2 + error(nmssm_ext_bb1_37) ** 2)
printf "Expecting 1.4246248E-01"
show(integral(nmssm_ext_bb1_37))
real pull = abs (integral (nmssm_ext_bb1_37) - 1.4246248E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu3     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_37) == 1.4246248E-01)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.78E-05) ** 2 + error(nmssm_ext_bb1_38) ** 2)
printf "Expecting 1.3964712E-01"
show(integral(nmssm_ext_bb1_38))
real pull = abs (integral (nmssm_ext_bb1_38) - 1.3964712E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu4     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_38) == 1.3964712E-01)
printf "************************************************************************"
printf "* Checking b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.02E-05) ** 2 + error(nmssm_ext_bb1_39) ** 2)
printf "Expecting 1.2972948E-01"
show(integral(nmssm_ext_bb1_39))
real pull = abs (integral (nmssm_ext_bb1_39) - 1.2972948E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu2,neu5     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_39) == 1.2972948E-01)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.58E-04) ** 2 + error(nmssm_ext_bb1_40) ** 2)
printf "Expecting 1.3271518E+00"
show(integral(nmssm_ext_bb1_40))
real pull = abs (integral (nmssm_ext_bb1_40) - 1.3271518E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu3     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_40) == 1.3271518E+00)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-04) ** 2 + error(nmssm_ext_bb1_41) ** 2)
printf "Expecting 2.2735489E-01"
show(integral(nmssm_ext_bb1_41))
real pull = abs (integral (nmssm_ext_bb1_41) - 2.2735489E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu4     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_41) == 2.2735489E-01)
printf "************************************************************************"
printf "* Checking b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.97E-05) ** 2 + error(nmssm_ext_bb1_42) ** 2)
printf "Expecting 1.0490707E-01"
show(integral(nmssm_ext_bb1_42))
real pull = abs (integral (nmssm_ext_bb1_42) - 1.0490707E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu3,neu5     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_42) == 1.0490707E-01)
printf "************************************************************************"
printf "* Checking b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.60E-06) ** 2 + error(nmssm_ext_bb1_43) ** 2)
printf "Expecting 4.8621366E-03"
show(integral(nmssm_ext_bb1_43))
real pull = abs (integral (nmssm_ext_bb1_43) - 4.8621366E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu4,neu4     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_43) == 4.8621366E-03)
printf "************************************************************************"
printf "* Checking b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.18E-04) ** 2 + error(nmssm_ext_bb1_44) ** 2)
printf "Expecting 2.3416438E+00"
show(integral(nmssm_ext_bb1_44))
real pull = abs (integral (nmssm_ext_bb1_44) - 2.3416438E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu4,neu5     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_44) == 2.3416438E+00)
printf "************************************************************************"
printf "* Checking b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.39E-06) ** 2 + error(nmssm_ext_bb1_45) ** 2)
printf "Expecting 8.2010808E-03"
show(integral(nmssm_ext_bb1_45))
real pull = abs (integral (nmssm_ext_bb1_45) - 8.2010808E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => neu5,neu5     @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_45) == 8.2010808E-03)
printf "************************************************************************"
printf "* Checking b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.75E-03) ** 2 + error(nmssm_ext_bb1_46) ** 2)
printf "Expecting 5.5580555E+00"
show(integral(nmssm_ext_bb1_46))
real pull = abs (integral (nmssm_ext_bb1_46) - 5.5580555E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch1+,ch1- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_46) == 5.5580555E+00)
printf "************************************************************************"
printf "* Checking b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.62E-02) ** 2 + error(nmssm_ext_bb1_47) ** 2)
printf "Expecting 4.8828820E+01"
show(integral(nmssm_ext_bb1_47))
real pull = abs (integral (nmssm_ext_bb1_47) - 4.8828820E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch2+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_47) == 4.8828820E+01)
printf "************************************************************************"
printf "* Checking b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.07E-03) ** 2 + error(nmssm_ext_bb1_48) ** 2)
printf "Expecting 1.7992620E+00"
show(integral(nmssm_ext_bb1_48))
real pull = abs (integral (nmssm_ext_bb1_48) - 1.7992620E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => ch1+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_48) == 1.7992620E+00)
printf "************************************************************************"
printf "* Checking b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.54E-01) ** 2 + error(nmssm_ext_bb1_49) ** 2)
printf "Expecting 6.5001243E+02"
show(integral(nmssm_ext_bb1_49))
real pull = abs (integral (nmssm_ext_bb1_49) - 6.5001243E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => sgl,sgl       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_49) == 6.5001243E+02)
printf "************************************************************************"
printf "* Checking b,B => Z,h01         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.13E-03) ** 2 + error(nmssm_ext_bb1_50) ** 2)
printf "Expecting 7.3219932E-01"
show(integral(nmssm_ext_bb1_50))
real pull = abs (integral (nmssm_ext_bb1_50) - 7.3219932E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h01         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h01         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h01         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h01         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h01         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_50) == 7.3219932E-01)
printf "************************************************************************"
printf "* Checking b,B => Z,h02         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.18E-05) ** 2 + error(nmssm_ext_bb1_51) ** 2)
printf "Expecting 1.8317299E-02"
show(integral(nmssm_ext_bb1_51))
real pull = abs (integral (nmssm_ext_bb1_51) - 1.8317299E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h02         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h02         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h02         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h02         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h02         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_51) == 1.8317299E-02)
printf "************************************************************************"
printf "* Checking b,B => Z,h03         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.76E-04) ** 2 + error(nmssm_ext_bb1_52) ** 2)
printf "Expecting 2.6999897E-01"
show(integral(nmssm_ext_bb1_52))
real pull = abs (integral (nmssm_ext_bb1_52) - 2.6999897E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,h03         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,h03         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,h03         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,h03         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,h03         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_52) == 2.6999897E-01)
printf "************************************************************************"
printf "* Checking b,B => A01,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-05) ** 2 + error(nmssm_ext_bb1_53) ** 2)
printf "Expecting 9.1885371E-03"
show(integral(nmssm_ext_bb1_53))
real pull = abs (integral (nmssm_ext_bb1_53) - 9.1885371E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h01       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_53) == 9.1885371E-03)
printf "************************************************************************"
printf "* Checking b,B => A01,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E-06) ** 2 + error(nmssm_ext_bb1_54) ** 2)
printf "Expecting 9.5026501E-04"
show(integral(nmssm_ext_bb1_54))
real pull = abs (integral (nmssm_ext_bb1_54) - 9.5026501E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_54) == 9.5026501E-04)
printf "************************************************************************"
printf "* Checking b,B => A01,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.06E-06) ** 2 + error(nmssm_ext_bb1_55) ** 2)
printf "Expecting 3.4858710E-03"
show(integral(nmssm_ext_bb1_55))
real pull = abs (integral (nmssm_ext_bb1_55) - 3.4858710E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,h03       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_55) == 3.4858710E-03)
printf "************************************************************************"
printf "* Checking b,B => A02,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.54E-06) ** 2 + error(nmssm_ext_bb1_56) ** 2)
printf "Expecting 1.8883303E-03"
show(integral(nmssm_ext_bb1_56))
real pull = abs (integral (nmssm_ext_bb1_56) - 1.8883303E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h01       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_56) == 1.8883303E-03)
printf "************************************************************************"
printf "* Checking b,B => A02,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.84E-05) ** 2 + error(nmssm_ext_bb1_57) ** 2)
printf "Expecting 1.8364076E-02"
show(integral(nmssm_ext_bb1_57))
real pull = abs (integral (nmssm_ext_bb1_57) - 1.8364076E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_57) == 1.8364076E-02)
printf "************************************************************************"
printf "* Checking b,B => A02,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-04) ** 2 + error(nmssm_ext_bb1_58) ** 2)
printf "Expecting 7.2089059E-02"
show(integral(nmssm_ext_bb1_58))
real pull = abs (integral (nmssm_ext_bb1_58) - 7.2089059E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,h03       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_58) == 7.2089059E-02)
printf "************************************************************************"
printf "* Checking b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-03) ** 2 + error(nmssm_ext_bb1_59) ** 2)
printf "Expecting 1.0213147E+00"
show(integral(nmssm_ext_bb1_59))
real pull = abs (integral (nmssm_ext_bb1_59) - 1.0213147E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Hp,Hm         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_59) == 1.0213147E+00)
printf "************************************************************************"
printf "* Checking b,B => Z,A01         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.13E-05) ** 2 + error(nmssm_ext_bb1_60) ** 2)
printf "Expecting 1.2044804E-02"
show(integral(nmssm_ext_bb1_60))
real pull = abs (integral (nmssm_ext_bb1_60) - 1.2044804E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,A01         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,A01         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,A01         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,A01         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,A01         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_60) == 1.2044804E-02)
printf "************************************************************************"
printf "* Checking b,B => Z,A02         @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.72E-04) ** 2 + error(nmssm_ext_bb1_61) ** 2)
printf "Expecting 2.6926666E-01"
show(integral(nmssm_ext_bb1_61))
real pull = abs (integral (nmssm_ext_bb1_61) - 2.6926666E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => Z,A02         @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => Z,A02         @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => Z,A02         @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => Z,A02         @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => Z,A02         @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_61) == 2.6926666E-01)
printf "************************************************************************"
printf "* Checking b,B => h01,h01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.57E-07) ** 2 + error(nmssm_ext_bb1_62) ** 2)
printf "Expecting 1.2010048E-04"
show(integral(nmssm_ext_bb1_62))
real pull = abs (integral (nmssm_ext_bb1_62) - 1.2010048E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h01       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h01       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_62) == 1.2010048E-04)
printf "************************************************************************"
printf "* Checking b,B => h01,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.18E-06) ** 2 + error(nmssm_ext_bb1_63) ** 2)
printf "Expecting 4.1045455E-03"
show(integral(nmssm_ext_bb1_63))
real pull = abs (integral (nmssm_ext_bb1_63) - 4.1045455E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_63) == 4.1045455E-03)
printf "************************************************************************"
printf "* Checking b,B => h01,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.67E-06) ** 2 + error(nmssm_ext_bb1_64) ** 2)
printf "Expecting 1.3237779E-03"
show(integral(nmssm_ext_bb1_64))
real pull = abs (integral (nmssm_ext_bb1_64) - 1.3237779E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h01,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h01,h03       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_64) == 1.3237779E-03)
printf "************************************************************************"
printf "* Checking b,B => h02,h02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.42E-06) ** 2 + error(nmssm_ext_bb1_65) ** 2)
printf "Expecting 9.4370065E-04"
show(integral(nmssm_ext_bb1_65))
real pull = abs (integral (nmssm_ext_bb1_65) - 9.4370065E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h02,h02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h02,h02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_65) == 9.4370065E-04)
printf "************************************************************************"
printf "* Checking b,B => h02,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.64E-05) ** 2 + error(nmssm_ext_bb1_66) ** 2)
printf "Expecting 1.7181224E-02"
show(integral(nmssm_ext_bb1_66))
real pull = abs (integral (nmssm_ext_bb1_66) - 1.7181224E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h02,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h02,h03       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_66) == 1.7181224E-02)
printf "************************************************************************"
printf "* Checking b,B => h03,h03       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-07) ** 2 + error(nmssm_ext_bb1_67) ** 2)
printf "Expecting 1.5900755E-04"
show(integral(nmssm_ext_bb1_67))
real pull = abs (integral (nmssm_ext_bb1_67) - 1.5900755E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => h03,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => h03,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => h03,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => h03,h03       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => h03,h03       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_67) == 1.5900755E-04)
printf "************************************************************************"
printf "* Checking b,B => A01,A01       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.02E-09) ** 2 + error(nmssm_ext_bb1_68) ** 2)
printf "Expecting 3.7700752E-06"
show(integral(nmssm_ext_bb1_68))
real pull = abs (integral (nmssm_ext_bb1_68) - 3.7700752E-06) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,A01       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,A01       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,A01       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,A01       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,A01       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_68) == 3.7700752E-06)
printf "************************************************************************"
printf "* Checking b,B => A01,A02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.07E-06) ** 2 + error(nmssm_ext_bb1_69) ** 2)
printf "Expecting 1.3715377E-03"
show(integral(nmssm_ext_bb1_69))
real pull = abs (integral (nmssm_ext_bb1_69) - 1.3715377E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A01,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A01,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A01,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A01,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A01,A02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_69) == 1.3715377E-03)
printf "************************************************************************"
printf "* Checking b,B => A02,A02       @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.76E-08) ** 2 + error(nmssm_ext_bb1_70) ** 2)
printf "Expecting 3.5838597E-05"
show(integral(nmssm_ext_bb1_70))
real pull = abs (integral (nmssm_ext_bb1_70) - 3.5838597E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in b,B => A02,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in b,B => A02,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in b,B => A02,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in b,B => A02,A02       @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in b,B => A02,A02       @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_bb1_70) == 3.5838597E-05)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
