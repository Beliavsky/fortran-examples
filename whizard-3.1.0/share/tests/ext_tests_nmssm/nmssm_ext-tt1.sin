

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-tt1.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------





































































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_tt1_1 = e3,E3 => n1,N1	
process nmssm_ext_tt1_2 = e3,E3 => n2,N2	
process nmssm_ext_tt1_3 = e3,E3 => n3,N3	
process nmssm_ext_tt1_4 = e3,E3 => t,T	 	
process nmssm_ext_tt1_5 = e3,E3 => Wp,Wm	
process nmssm_ext_tt1_6 = e3,E3 => Z,Z		
process nmssm_ext_tt1_7 = e3,E3 => se1,SE1	
process nmssm_ext_tt1_8 = e3,E3 => se2,SE2	
process nmssm_ext_tt1_9 = e3,E3 => smu1,SMU1	
process nmssm_ext_tt1_10 = e3,E3 => smu2,SMU2	
process nmssm_ext_tt1_11 = e3,E3 => stau1,STAU1	
process nmssm_ext_tt1_12 = e3,E3 => stau2,STAU2	
process nmssm_ext_tt1_13 = e3,E3 => stau1,STAU2	
process nmssm_ext_tt1_14 = e3,E3 => sn11,SN11	
process nmssm_ext_tt1_15 = e3,E3 => sn21,SN21	
process nmssm_ext_tt1_16 = e3,E3 => sn31,SN31	
process nmssm_ext_tt1_17 = e3,E3 => su1,su1c	
process nmssm_ext_tt1_18 = e3,E3 => su2,su2c	
process nmssm_ext_tt1_19 = e3,E3 => sc1,sc1c	
process nmssm_ext_tt1_20 = e3,E3 => sc2,sc2c	
process nmssm_ext_tt1_21 = e3,E3 => st1,st1c	
process nmssm_ext_tt1_22 = e3,E3 => st2,st2c	
process nmssm_ext_tt1_23 = e3,E3 => st1,st2c	
process nmssm_ext_tt1_24 = e3,E3 => sd1,sd1c	
process nmssm_ext_tt1_25 = e3,E3 => sd2,sd2c	
process nmssm_ext_tt1_26 = e3,E3 => ss1,ss1c	
process nmssm_ext_tt1_27 = e3,E3 => ss2,ss2c	
process nmssm_ext_tt1_28 = e3,E3 => sb1,sb1c	
process nmssm_ext_tt1_29 = e3,E3 => sb2,sb2c	
process nmssm_ext_tt1_30 = e3,E3 => sb1,sb2c	
process nmssm_ext_tt1_31 = e3,E3 => neu1,neu1	
process nmssm_ext_tt1_32 = e3,E3 => neu1,neu2	
process nmssm_ext_tt1_33 = e3,E3 => neu1,neu3	
process nmssm_ext_tt1_34 = e3,E3 => neu1,neu4	
process nmssm_ext_tt1_35 = e3,E3 => neu1,neu5	
process nmssm_ext_tt1_36 = e3,E3 => neu2,neu2	
process nmssm_ext_tt1_37 = e3,E3 => neu2,neu3	
process nmssm_ext_tt1_38 = e3,E3 => neu2,neu4	
process nmssm_ext_tt1_39 = e3,E3 => neu2,neu5	
process nmssm_ext_tt1_40 = e3,E3 => neu3,neu3	
process nmssm_ext_tt1_41 = e3,E3 => neu3,neu4	
process nmssm_ext_tt1_42 = e3,E3 => neu3,neu5	
process nmssm_ext_tt1_43 = e3,E3 => neu4,neu4	
process nmssm_ext_tt1_44 = e3,E3 => neu4,neu5	
process nmssm_ext_tt1_45 = e3,E3 => neu5,neu5	
process nmssm_ext_tt1_46 = e3,E3 => "ch1+","ch1-"
process nmssm_ext_tt1_47 = e3,E3 => "ch2+","ch2-"
process nmssm_ext_tt1_48 = e3,E3 => "ch1+","ch2-"
process nmssm_ext_tt1_49 = e3,E3 => h01,h01	
process nmssm_ext_tt1_50 = e3,E3 => h01,h02	
process nmssm_ext_tt1_51 = e3,E3 => h01,h03	
process nmssm_ext_tt1_52 = e3,E3 => h02,h02	
process nmssm_ext_tt1_53 = e3,E3 => h02,h03	
process nmssm_ext_tt1_54 = e3,E3 => h03,h03	
process nmssm_ext_tt1_55 = e3,E3 => A01,A01	
process nmssm_ext_tt1_56 = e3,E3 => A01,A02	
process nmssm_ext_tt1_57 = e3,E3 => A02,A02	
process nmssm_ext_tt1_58 = e3,E3 => Z,h01	
process nmssm_ext_tt1_59 = e3,E3 => Z,h02	
process nmssm_ext_tt1_60 = e3,E3 => Z,h03	
process nmssm_ext_tt1_61 = e3,E3 => Z,A01	
process nmssm_ext_tt1_62 = e3,E3 => Z,A02	
process nmssm_ext_tt1_63 = e3,E3 => A01,h01	
process nmssm_ext_tt1_64 = e3,E3 => A01,h02	
process nmssm_ext_tt1_65 = e3,E3 => A01,h03	
process nmssm_ext_tt1_66 = e3,E3 => A02,h01	
process nmssm_ext_tt1_67 = e3,E3 => A02,h02	
process nmssm_ext_tt1_68 = e3,E3 => A02,h03	
process nmssm_ext_tt1_69 = e3,E3 => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_1)
printf "************************************************************************"
printf "* Integrating e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_2)
printf "************************************************************************"
printf "* Integrating e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_3)
printf "************************************************************************"
printf "* Integrating e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_4)
printf "************************************************************************"
printf "* Integrating e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_5)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_6)
printf "************************************************************************"
printf "* Integrating e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_7)
printf "************************************************************************"
printf "* Integrating e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_8)
printf "************************************************************************"
printf "* Integrating e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_9)
printf "************************************************************************"
printf "* Integrating e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_10)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_11)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_12)
printf "************************************************************************"
printf "* Integrating e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_13)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_14)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_15)
printf "************************************************************************"
printf "* Integrating e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_16)
printf "************************************************************************"
printf "* Integrating e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_17)
printf "************************************************************************"
printf "* Integrating e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_18)
printf "************************************************************************"
printf "* Integrating e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_19)
printf "************************************************************************"
printf "* Integrating e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_20)
printf "************************************************************************"
printf "* Integrating e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_21)
printf "************************************************************************"
printf "* Integrating e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_22)
printf "************************************************************************"
printf "* Integrating e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_23)
printf "************************************************************************"
printf "* Integrating e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_24)
printf "************************************************************************"
printf "* Integrating e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_25)
printf "************************************************************************"
printf "* Integrating e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_26)
printf "************************************************************************"
printf "* Integrating e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_27)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_28)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_29)
printf "************************************************************************"
printf "* Integrating e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_30)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_31)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_32)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_33)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_34)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_35)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_36)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_37)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_38)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_39)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_40)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_41)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_42)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_43)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_44)
printf "************************************************************************"
printf "* Integrating e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_45)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_46)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_47)
printf "************************************************************************"
printf "* Integrating e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_48)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_49)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_50)
printf "************************************************************************"
printf "* Integrating e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_51)
printf "************************************************************************"
printf "* Integrating e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_52)
printf "************************************************************************"
printf "* Integrating e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_53)
printf "************************************************************************"
printf "* Integrating e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_54)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_55)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_56)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_57)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_58)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_59)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_60)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_61)
printf "************************************************************************"
printf "* Integrating e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_62)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_63)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_64)
printf "************************************************************************"
printf "* Integrating e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_65)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_66)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_67)
printf "************************************************************************"
printf "* Integrating e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_68)
printf "************************************************************************"
printf "* Integrating e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e3,E3
seed = 0
integrate (nmssm_ext_tt1_69)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.72E-04) ** 2 + error(nmssm_ext_tt1_1) ** 2)
printf "Expecting 2.7145945E+00"
show(integral(nmssm_ext_tt1_1))
real pull = abs (integral (nmssm_ext_tt1_1) - 2.7145945E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n1,N1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_1) == 2.7145945E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.46E-04) ** 2 + error(nmssm_ext_tt1_2) ** 2)
printf "Expecting 2.7156229E+00"
show(integral(nmssm_ext_tt1_2))
real pull = abs (integral (nmssm_ext_tt1_2) - 2.7156229E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n2,N2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_2) == 2.7156229E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E+02) ** 2 + error(nmssm_ext_tt1_3) ** 2)
printf "Expecting 5.3273824E+04"
show(integral(nmssm_ext_tt1_3))
real pull = abs (integral (nmssm_ext_tt1_3) - 5.3273824E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => n3,N3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_3) == 5.3273824E+04)
printf "************************************************************************"
printf "* Checking e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.70E-03) ** 2 + error(nmssm_ext_tt1_4) ** 2)
printf "Expecting 1.9730048E+01"
show(integral(nmssm_ext_tt1_4))
real pull = abs (integral (nmssm_ext_tt1_4) - 1.9730048E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => t,T	 	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_4) == 1.9730048E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.19E-01) ** 2 + error(nmssm_ext_tt1_5) ** 2)
printf "Expecting 4.5525676E+02"
show(integral(nmssm_ext_tt1_5))
real pull = abs (integral (nmssm_ext_tt1_5) - 4.5525676E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Wp,Wm	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_5) == 4.5525676E+02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.74E-02) ** 2 + error(nmssm_ext_tt1_6) ** 2)
printf "Expecting 2.4815330E+01"
show(integral(nmssm_ext_tt1_6))
real pull = abs (integral (nmssm_ext_tt1_6) - 2.4815330E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_6) == 2.4815330E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.77E-03) ** 2 + error(nmssm_ext_tt1_7) ** 2)
printf "Expecting 3.1958583E+00"
show(integral(nmssm_ext_tt1_7))
real pull = abs (integral (nmssm_ext_tt1_7) - 3.1958583E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_7) == 3.1958583E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.48E-03) ** 2 + error(nmssm_ext_tt1_8) ** 2)
printf "Expecting 2.8655474E+00"
show(integral(nmssm_ext_tt1_8))
real pull = abs (integral (nmssm_ext_tt1_8) - 2.8655474E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_8) == 2.8655474E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.75E-03) ** 2 + error(nmssm_ext_tt1_9) ** 2)
printf "Expecting 3.1952694E+00"
show(integral(nmssm_ext_tt1_9))
real pull = abs (integral (nmssm_ext_tt1_9) - 3.1952694E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_9) == 3.1952694E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.43E-03) ** 2 + error(nmssm_ext_tt1_10) ** 2)
printf "Expecting 2.8687442E+00"
show(integral(nmssm_ext_tt1_10))
real pull = abs (integral (nmssm_ext_tt1_10) - 2.8687442E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_10) == 2.8687442E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.01E-02) ** 2 + error(nmssm_ext_tt1_11) ** 2)
printf "Expecting 3.1478840E+01"
show(integral(nmssm_ext_tt1_11))
real pull = abs (integral (nmssm_ext_tt1_11) - 3.1478840E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_11) == 3.1478840E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.88E-02) ** 2 + error(nmssm_ext_tt1_12) ** 2)
printf "Expecting 3.0631791E+01"
show(integral(nmssm_ext_tt1_12))
real pull = abs (integral (nmssm_ext_tt1_12) - 3.0631791E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_12) == 3.0631791E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.89E-02) ** 2 + error(nmssm_ext_tt1_13) ** 2)
printf "Expecting 3.5761187E+01"
show(integral(nmssm_ext_tt1_13))
real pull = abs (integral (nmssm_ext_tt1_13) - 3.5761187E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_13) == 3.5761187E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-03) ** 2 + error(nmssm_ext_tt1_14) ** 2)
printf "Expecting 1.3231619E+00"
show(integral(nmssm_ext_tt1_14))
real pull = abs (integral (nmssm_ext_tt1_14) - 1.3231619E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn11,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_14) == 1.3231619E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-03) ** 2 + error(nmssm_ext_tt1_15) ** 2)
printf "Expecting 1.3238730E+00"
show(integral(nmssm_ext_tt1_15))
real pull = abs (integral (nmssm_ext_tt1_15) - 1.3238730E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn21,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_15) == 1.3238730E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.11E-01) ** 2 + error(nmssm_ext_tt1_16) ** 2)
printf "Expecting 1.7333889E+02"
show(integral(nmssm_ext_tt1_16))
real pull = abs (integral (nmssm_ext_tt1_16) - 1.7333889E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sn31,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_16) == 1.7333889E+02)
printf "************************************************************************"
printf "* Checking e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.03E-03) ** 2 + error(nmssm_ext_tt1_17) ** 2)
printf "Expecting 2.3832865E+00"
show(integral(nmssm_ext_tt1_17))
real pull = abs (integral (nmssm_ext_tt1_17) - 2.3832865E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_17) == 2.3832865E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.36E-03) ** 2 + error(nmssm_ext_tt1_18) ** 2)
printf "Expecting 1.5642847E+00"
show(integral(nmssm_ext_tt1_18))
real pull = abs (integral (nmssm_ext_tt1_18) - 1.5642847E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_18) == 1.5642847E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.05E-03) ** 2 + error(nmssm_ext_tt1_19) ** 2)
printf "Expecting 2.3804980E+00"
show(integral(nmssm_ext_tt1_19))
real pull = abs (integral (nmssm_ext_tt1_19) - 2.3804980E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_19) == 2.3804980E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.34E-03) ** 2 + error(nmssm_ext_tt1_20) ** 2)
printf "Expecting 1.5651887E+00"
show(integral(nmssm_ext_tt1_20))
real pull = abs (integral (nmssm_ext_tt1_20) - 1.5651887E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_20) == 1.5651887E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.04E-03) ** 2 + error(nmssm_ext_tt1_21) ** 2)
printf "Expecting 2.3961737E+00"
show(integral(nmssm_ext_tt1_21))
real pull = abs (integral (nmssm_ext_tt1_21) - 2.3961737E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_21) == 2.3961737E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.83E-04) ** 2 + error(nmssm_ext_tt1_22) ** 2)
printf "Expecting 8.0062838E-01"
show(integral(nmssm_ext_tt1_22))
real pull = abs (integral (nmssm_ext_tt1_22) - 8.0062838E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_22) == 8.0062838E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.42E-04) ** 2 + error(nmssm_ext_tt1_23) ** 2)
printf "Expecting 4.0595365E-01"
show(integral(nmssm_ext_tt1_23))
real pull = abs (integral (nmssm_ext_tt1_23) - 4.0595365E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_23) == 4.0595365E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.36E-03) ** 2 + error(nmssm_ext_tt1_24) ** 2)
printf "Expecting 1.6059001E+00"
show(integral(nmssm_ext_tt1_24))
real pull = abs (integral (nmssm_ext_tt1_24) - 1.6059001E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_24) == 1.6059001E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.31E-04) ** 2 + error(nmssm_ext_tt1_25) ** 2)
printf "Expecting 3.9077742E-01"
show(integral(nmssm_ext_tt1_25))
real pull = abs (integral (nmssm_ext_tt1_25) - 3.9077742E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_25) == 3.9077742E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.37E-03) ** 2 + error(nmssm_ext_tt1_26) ** 2)
printf "Expecting 1.6040548E+00"
show(integral(nmssm_ext_tt1_26))
real pull = abs (integral (nmssm_ext_tt1_26) - 1.6040548E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_26) == 1.6040548E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.38E-04) ** 2 + error(nmssm_ext_tt1_27) ** 2)
printf "Expecting 3.9050065E-01"
show(integral(nmssm_ext_tt1_27))
real pull = abs (integral (nmssm_ext_tt1_27) - 3.9050065E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_27) == 3.9050065E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.70E-04) ** 2 + error(nmssm_ext_tt1_28) ** 2)
printf "Expecting 5.4589993E-01"
show(integral(nmssm_ext_tt1_28))
real pull = abs (integral (nmssm_ext_tt1_28) - 5.4589993E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_28) == 5.4589993E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.56E-04) ** 2 + error(nmssm_ext_tt1_29) ** 2)
printf "Expecting 6.4672358E-01"
show(integral(nmssm_ext_tt1_29))
real pull = abs (integral (nmssm_ext_tt1_29) - 6.4672358E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_29) == 6.4672358E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.43E-04) ** 2 + error(nmssm_ext_tt1_30) ** 2)
printf "Expecting 4.0165701E-01"
show(integral(nmssm_ext_tt1_30))
real pull = abs (integral (nmssm_ext_tt1_30) - 4.0165701E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_30) == 4.0165701E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-02) ** 2 + error(nmssm_ext_tt1_31) ** 2)
printf "Expecting 1.2073446E+01"
show(integral(nmssm_ext_tt1_31))
real pull = abs (integral (nmssm_ext_tt1_31) - 1.2073446E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_31) == 1.2073446E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.01E-03) ** 2 + error(nmssm_ext_tt1_32) ** 2)
printf "Expecting 1.7025344E+00"
show(integral(nmssm_ext_tt1_32))
real pull = abs (integral (nmssm_ext_tt1_32) - 1.7025344E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_32) == 1.7025344E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.86E-03) ** 2 + error(nmssm_ext_tt1_33) ** 2)
printf "Expecting 3.2959035E+00"
show(integral(nmssm_ext_tt1_33))
real pull = abs (integral (nmssm_ext_tt1_33) - 3.2959035E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_33) == 3.2959035E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.67E-04) ** 2 + error(nmssm_ext_tt1_34) ** 2)
printf "Expecting 2.4716418E-01"
show(integral(nmssm_ext_tt1_34))
real pull = abs (integral (nmssm_ext_tt1_34) - 2.4716418E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_34) == 2.4716418E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.05E-04) ** 2 + error(nmssm_ext_tt1_35) ** 2)
printf "Expecting 1.1051274E-01"
show(integral(nmssm_ext_tt1_35))
real pull = abs (integral (nmssm_ext_tt1_35) - 1.1051274E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu1,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_35) == 1.1051274E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.04E-04) ** 2 + error(nmssm_ext_tt1_36) ** 2)
printf "Expecting 2.6260245E-01"
show(integral(nmssm_ext_tt1_36))
real pull = abs (integral (nmssm_ext_tt1_36) - 2.6260245E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_36) == 2.6260245E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.92E-03) ** 2 + error(nmssm_ext_tt1_37) ** 2)
printf "Expecting 2.4921765E+00"
show(integral(nmssm_ext_tt1_37))
real pull = abs (integral (nmssm_ext_tt1_37) - 2.4921765E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_37) == 2.4921765E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.78E-04) ** 2 + error(nmssm_ext_tt1_38) ** 2)
printf "Expecting 1.8711468E-01"
show(integral(nmssm_ext_tt1_38))
real pull = abs (integral (nmssm_ext_tt1_38) - 1.8711468E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_38) == 1.8711468E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.13E-04) ** 2 + error(nmssm_ext_tt1_39) ** 2)
printf "Expecting 1.1176564E-01"
show(integral(nmssm_ext_tt1_39))
real pull = abs (integral (nmssm_ext_tt1_39) - 1.1176564E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu2,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_39) == 1.1176564E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.02E-02) ** 2 + error(nmssm_ext_tt1_40) ** 2)
printf "Expecting 8.3805914E+00"
show(integral(nmssm_ext_tt1_40))
real pull = abs (integral (nmssm_ext_tt1_40) - 8.3805914E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_40) == 8.3805914E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.62E-04) ** 2 + error(nmssm_ext_tt1_41) ** 2)
printf "Expecting 4.9803015E-01"
show(integral(nmssm_ext_tt1_41))
real pull = abs (integral (nmssm_ext_tt1_41) - 4.9803015E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_41) == 4.9803015E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.56E-04) ** 2 + error(nmssm_ext_tt1_42) ** 2)
printf "Expecting 1.7336478E-01"
show(integral(nmssm_ext_tt1_42))
real pull = abs (integral (nmssm_ext_tt1_42) - 1.7336478E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu3,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_42) == 1.7336478E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.77E-06) ** 2 + error(nmssm_ext_tt1_43) ** 2)
printf "Expecting 4.8029379E-03"
show(integral(nmssm_ext_tt1_43))
real pull = abs (integral (nmssm_ext_tt1_43) - 4.8029379E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu4,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_43) == 4.8029379E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.75E-03) ** 2 + error(nmssm_ext_tt1_44) ** 2)
printf "Expecting 4.8487241E+00"
show(integral(nmssm_ext_tt1_44))
real pull = abs (integral (nmssm_ext_tt1_44) - 4.8487241E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu4,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_44) == 4.8487241E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.67E-06) ** 2 + error(nmssm_ext_tt1_45) ** 2)
printf "Expecting 4.2191208E-03"
show(integral(nmssm_ext_tt1_45))
real pull = abs (integral (nmssm_ext_tt1_45) - 4.2191208E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => neu5,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_45) == 4.2191208E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.90E-02) ** 2 + error(nmssm_ext_tt1_46) ** 2)
printf "Expecting 2.2812760E+01"
show(integral(nmssm_ext_tt1_46))
real pull = abs (integral (nmssm_ext_tt1_46) - 2.2812760E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch1+,ch1- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_46) == 2.2812760E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.03E-02) ** 2 + error(nmssm_ext_tt1_47) ** 2)
printf "Expecting 1.2589218E+01"
show(integral(nmssm_ext_tt1_47))
real pull = abs (integral (nmssm_ext_tt1_47) - 1.2589218E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch2+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_47) == 1.2589218E+01)
printf "************************************************************************"
printf "* Checking e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.34E-04) ** 2 + error(nmssm_ext_tt1_48) ** 2)
printf "Expecting 7.5689892E-01"
show(integral(nmssm_ext_tt1_48))
real pull = abs (integral (nmssm_ext_tt1_48) - 7.5689892E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => ch1+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_48) == 7.5689892E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.30E-08) ** 2 + error(nmssm_ext_tt1_49) ** 2)
printf "Expecting 1.2810537E-05"
show(integral(nmssm_ext_tt1_49))
real pull = abs (integral (nmssm_ext_tt1_49) - 1.2810537E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_49) == 1.2810537E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.29E-06) ** 2 + error(nmssm_ext_tt1_50) ** 2)
printf "Expecting 2.1913209E-03"
show(integral(nmssm_ext_tt1_50))
real pull = abs (integral (nmssm_ext_tt1_50) - 2.1913209E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_50) == 2.1913209E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.99E-07) ** 2 + error(nmssm_ext_tt1_51) ** 2)
printf "Expecting 5.5587321E-04"
show(integral(nmssm_ext_tt1_51))
real pull = abs (integral (nmssm_ext_tt1_51) - 5.5587321E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_51) == 5.5587321E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.82E-07) ** 2 + error(nmssm_ext_tt1_52) ** 2)
printf "Expecting 4.9996639E-04"
show(integral(nmssm_ext_tt1_52))
real pull = abs (integral (nmssm_ext_tt1_52) - 4.9996639E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_tt1_52) == 4.9996639E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-05) ** 2 + error(nmssm_ext_tt1_53) ** 2)
printf "Expecting 9.1787245E-03"
show(integral(nmssm_ext_tt1_53))
real pull = abs (integral (nmssm_ext_tt1_53) - 9.1787245E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_53) == 9.1787245E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.12E-07) ** 2 + error(nmssm_ext_tt1_54) ** 2)
printf "Expecting 7.3340440E-05"
show(integral(nmssm_ext_tt1_54))
real pull = abs (integral (nmssm_ext_tt1_54) - 7.3340440E-05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => h03,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_54) == 7.3340440E-05)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.90E-09) ** 2 + error(nmssm_ext_tt1_55) ** 2)
printf "Expecting 1.9560453E-06"
show(integral(nmssm_ext_tt1_55))
real pull = abs (integral (nmssm_ext_tt1_55) - 1.9560453E-06) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_55) == 1.9560453E-06)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.10E-06) ** 2 + error(nmssm_ext_tt1_56) ** 2)
printf "Expecting 7.2787463E-04"
show(integral(nmssm_ext_tt1_56))
real pull = abs (integral (nmssm_ext_tt1_56) - 7.2787463E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_56) == 7.2787463E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E-08) ** 2 + error(nmssm_ext_tt1_57) ** 2)
printf "Expecting 9.6466011E-06"
show(integral(nmssm_ext_tt1_57))
real pull = abs (integral (nmssm_ext_tt1_57) - 9.6466011E-06) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_57) == 9.6466011E-06)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.42E-03) ** 2 + error(nmssm_ext_tt1_58) ** 2)
printf "Expecting 1.3600289E+00"
show(integral(nmssm_ext_tt1_58))
real pull = abs (integral (nmssm_ext_tt1_58) - 1.3600289E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_58) == 1.3600289E+00)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.67E-05) ** 2 + error(nmssm_ext_tt1_59) ** 2)
printf "Expecting 3.0832631E-02"
show(integral(nmssm_ext_tt1_59))
real pull = abs (integral (nmssm_ext_tt1_59) - 3.0832631E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_59) == 3.0832631E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.48E-04) ** 2 + error(nmssm_ext_tt1_60) ** 2)
printf "Expecting 8.7948382E-02"
show(integral(nmssm_ext_tt1_60))
real pull = abs (integral (nmssm_ext_tt1_60) - 8.7948382E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_60) == 8.7948382E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.72E-06) ** 2 + error(nmssm_ext_tt1_61) ** 2)
printf "Expecting 5.9808786E-03"
show(integral(nmssm_ext_tt1_61))
real pull = abs (integral (nmssm_ext_tt1_61) - 5.9808786E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_61) == 5.9808786E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.46E-04) ** 2 + error(nmssm_ext_tt1_62) ** 2)
printf "Expecting 8.8054045E-02"
show(integral(nmssm_ext_tt1_62))
real pull = abs (integral (nmssm_ext_tt1_62) - 8.8054045E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Z,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_62) == 8.8054045E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.42E-06) ** 2 + error(nmssm_ext_tt1_63) ** 2)
printf "Expecting 4.8926322E-03"
show(integral(nmssm_ext_tt1_63))
real pull = abs (integral (nmssm_ext_tt1_63) - 4.8926322E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_63) == 4.8926322E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.09E-07) ** 2 + error(nmssm_ext_tt1_64) ** 2)
printf "Expecting 5.3028073E-04"
show(integral(nmssm_ext_tt1_64))
real pull = abs (integral (nmssm_ext_tt1_64) - 5.3028073E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_64) == 5.3028073E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.03E-05) ** 2 + error(nmssm_ext_tt1_65) ** 2)
printf "Expecting 5.6160530E-03"
show(integral(nmssm_ext_tt1_65))
real pull = abs (integral (nmssm_ext_tt1_65) - 5.6160530E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_65) == 5.6160530E-03)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.23E-06) ** 2 + error(nmssm_ext_tt1_66) ** 2)
printf "Expecting 8.3238915E-04"
show(integral(nmssm_ext_tt1_66))
real pull = abs (integral (nmssm_ext_tt1_66) - 8.3238915E-04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_66) == 8.3238915E-04)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.82E-05) ** 2 + error(nmssm_ext_tt1_67) ** 2)
printf "Expecting 1.1460292E-02"
show(integral(nmssm_ext_tt1_67))
real pull = abs (integral (nmssm_ext_tt1_67) - 1.1460292E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_67) == 1.1460292E-02)
printf "************************************************************************"
printf "* Checking e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.99E-04) ** 2 + error(nmssm_ext_tt1_68) ** 2)
printf "Expecting 1.5714039E-01"
show(integral(nmssm_ext_tt1_68))
real pull = abs (integral (nmssm_ext_tt1_68) - 1.5714039E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => A02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_68) == 1.5714039E-01)
printf "************************************************************************"
printf "* Checking e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.36E-04) ** 2 + error(nmssm_ext_tt1_69) ** 2)
printf "Expecting 3.9487341E-01"
show(integral(nmssm_ext_tt1_69))
real pull = abs (integral (nmssm_ext_tt1_69) - 3.9487341E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e3,E3 => Hp,Hm	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_tt1_69) == 3.9487341E-01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
