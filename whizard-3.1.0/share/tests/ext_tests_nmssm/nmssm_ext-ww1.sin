

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-ww1.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 5:100000
! -------------------------------------------------------------------------































































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_ww1_1 = Wm,Wp => t,T		
process nmssm_ext_ww1_2 = Wm,Wp => Z,Z		
process nmssm_ext_ww1_3 = Wm,Wp => se1,SE1	
process nmssm_ext_ww1_4 = Wm,Wp => se2,SE2	
process nmssm_ext_ww1_5 = Wm,Wp => smu1,SMU1	
process nmssm_ext_ww1_6 = Wm,Wp => smu2,SMU2	
process nmssm_ext_ww1_7 = Wm,Wp => stau1,STAU1	
process nmssm_ext_ww1_8 = Wm,Wp => stau2,STAU2	
process nmssm_ext_ww1_9 = Wm,Wp => stau1,STAU2	
process nmssm_ext_ww1_10 = Wm,Wp => sn11,SN11	
process nmssm_ext_ww1_11 = Wm,Wp => sn21,SN21	
process nmssm_ext_ww1_12 = Wm,Wp => sn31,SN31	
process nmssm_ext_ww1_13 = Wm,Wp => su1,su1c	
process nmssm_ext_ww1_14 = Wm,Wp => su2,su2c	
process nmssm_ext_ww1_15 = Wm,Wp => sc1,sc1c	
process nmssm_ext_ww1_16 = Wm,Wp => sc2,sc2c	
process nmssm_ext_ww1_17 = Wm,Wp => st1,st1c	
process nmssm_ext_ww1_18 = Wm,Wp => st2,st2c	
process nmssm_ext_ww1_19 = Wm,Wp => st1,st2c	
process nmssm_ext_ww1_20 = Wm,Wp => sd1,sd1c	
process nmssm_ext_ww1_21 = Wm,Wp => sd2,sd2c	
process nmssm_ext_ww1_22 = Wm,Wp => ss1,ss1c	
process nmssm_ext_ww1_23 = Wm,Wp => ss2,ss2c	
process nmssm_ext_ww1_24 = Wm,Wp => sb1,sb1c	
process nmssm_ext_ww1_25 = Wm,Wp => sb2,sb2c	
process nmssm_ext_ww1_26 = Wm,Wp => sb1,sb2c	
process nmssm_ext_ww1_27 = Wm,Wp => neu1,neu1	
process nmssm_ext_ww1_28 = Wm,Wp => neu1,neu2	
process nmssm_ext_ww1_29 = Wm,Wp => neu1,neu3	
process nmssm_ext_ww1_30 = Wm,Wp => neu1,neu4	
process nmssm_ext_ww1_31 = Wm,Wp => neu1,neu5	
process nmssm_ext_ww1_32 = Wm,Wp => neu2,neu2	
process nmssm_ext_ww1_33 = Wm,Wp => neu2,neu3	
process nmssm_ext_ww1_34 = Wm,Wp => neu2,neu4	
process nmssm_ext_ww1_35 = Wm,Wp => neu2,neu5	
process nmssm_ext_ww1_36 = Wm,Wp => neu3,neu3	
process nmssm_ext_ww1_37 = Wm,Wp => neu3,neu4	
process nmssm_ext_ww1_38 = Wm,Wp => neu3,neu5	
process nmssm_ext_ww1_39 = Wm,Wp => neu4,neu4	
process nmssm_ext_ww1_40 = Wm,Wp => neu4,neu5	
process nmssm_ext_ww1_41 = Wm,Wp => neu5,neu5	
process nmssm_ext_ww1_42 = Wm,Wp => "ch1+","ch1-"
process nmssm_ext_ww1_43 = Wm,Wp => "ch2+","ch2-"
process nmssm_ext_ww1_44 = Wm,Wp => "ch1+","ch2-"
process nmssm_ext_ww1_45 = Wm,Wp => h01,h01	
process nmssm_ext_ww1_46 = Wm,Wp => h01,h02	
process nmssm_ext_ww1_47 = Wm,Wp => h01,h03	
process nmssm_ext_ww1_48 = Wm,Wp => h02,h02	
process nmssm_ext_ww1_49 = Wm,Wp => h02,h03	
process nmssm_ext_ww1_50 = Wm,Wp => h03,h03	
process nmssm_ext_ww1_51 = Wm,Wp => A01,A01	
process nmssm_ext_ww1_52 = Wm,Wp => A01,A02	
process nmssm_ext_ww1_53 = Wm,Wp => A02,A02	
process nmssm_ext_ww1_54 = Wm,Wp => Z,h01	
process nmssm_ext_ww1_55 = Wm,Wp => Z,h02	
process nmssm_ext_ww1_56 = Wm,Wp => Z,h03	
process nmssm_ext_ww1_57 = Wm,Wp => A01,h01	
process nmssm_ext_ww1_58 = Wm,Wp => A01,h02	
process nmssm_ext_ww1_59 = Wm,Wp => A01,h03	
process nmssm_ext_ww1_60 = Wm,Wp => A02,h01	
process nmssm_ext_ww1_61 = Wm,Wp => A02,h02	
process nmssm_ext_ww1_62 = Wm,Wp => A02,h03	
process nmssm_ext_ww1_63 = Wm,Wp => Hp,Hm	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_1)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_2)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_3)
printf "************************************************************************"
printf "* Integrating Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_4)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_5)
printf "************************************************************************"
printf "* Integrating Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_6)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_7)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_8)
printf "************************************************************************"
printf "* Integrating Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_9)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_10)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_11)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_12)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_13)
printf "************************************************************************"
printf "* Integrating Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_14)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_15)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_16)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_17)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_18)
printf "************************************************************************"
printf "* Integrating Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_19)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_20)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_21)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_22)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_23)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_24)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_25)
printf "************************************************************************"
printf "* Integrating Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_26)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_27)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_28)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_29)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_30)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_31)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_32)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_33)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_34)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_35)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_36)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_37)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_38)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_39)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_40)
printf "************************************************************************"
printf "* Integrating Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_41)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_42)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_43)
printf "************************************************************************"
printf "* Integrating Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_44)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_45)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_46)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_47)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_48)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_49)
printf "************************************************************************"
printf "* Integrating Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_50)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_51)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_52)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_53)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_54)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_55)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_56)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_57)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_58)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_59)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_60)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_61)
printf "************************************************************************"
printf "* Integrating Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_62)
printf "************************************************************************"
printf "* Integrating Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = Wm,Wp
seed = 0
integrate (nmssm_ext_ww1_63)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.12E+00) ** 2 + error(nmssm_ext_ww1_1) ** 2)
printf "Expecting 5.2959795E+03"
show(integral(nmssm_ext_ww1_1))
real pull = abs (integral (nmssm_ext_ww1_1) - 5.2959795E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => t,T		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_1) == 5.2959795E+03)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.89E+02) ** 2 + error(nmssm_ext_ww1_2) ** 2)
printf "Expecting 3.0247597E+05"
show(integral(nmssm_ext_ww1_2))
real pull = abs (integral (nmssm_ext_ww1_2) - 3.0247597E+05) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,Z		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_2) == 3.0247597E+05)
printf "************************************************************************"
printf "* Checking Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.10E-02) ** 2 + error(nmssm_ext_ww1_3) ** 2)
printf "Expecting 1.1329904E+01"
show(integral(nmssm_ext_ww1_3))
real pull = abs (integral (nmssm_ext_ww1_3) - 1.1329904E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se1,SE1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_3) == 1.1329904E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.80E-04) ** 2 + error(nmssm_ext_ww1_4) ** 2)
printf "Expecting 2.7012580E-01"
show(integral(nmssm_ext_ww1_4))
real pull = abs (integral (nmssm_ext_ww1_4) - 2.7012580E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => se2,SE2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_4) == 2.7012580E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.39E-04) ** 2 + error(nmssm_ext_ww1_5) ** 2)
printf "Expecting 1.1135872E+01"
show(integral(nmssm_ext_ww1_5))
real pull = abs (integral (nmssm_ext_ww1_5) - 1.1135872E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu1,SMU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_5) == 1.1135872E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.83E-04) ** 2 + error(nmssm_ext_ww1_6) ** 2)
printf "Expecting 2.7000110E-01"
show(integral(nmssm_ext_ww1_6))
real pull = abs (integral (nmssm_ext_ww1_6) - 2.7000110E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => smu2,SMU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_6) == 2.7000110E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.57E-03) ** 2 + error(nmssm_ext_ww1_7) ** 2)
printf "Expecting 2.8487449E+00"
show(integral(nmssm_ext_ww1_7))
real pull = abs (integral (nmssm_ext_ww1_7) - 2.8487449E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_7) == 2.8487449E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.77E-03) ** 2 + error(nmssm_ext_ww1_8) ** 2)
printf "Expecting 2.9971964E+00"
show(integral(nmssm_ext_ww1_8))
real pull = abs (integral (nmssm_ext_ww1_8) - 2.9971964E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau2,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_8) == 2.9971964E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.87E-03) ** 2 + error(nmssm_ext_ww1_9) ** 2)
printf "Expecting 2.9221293E+00"
show(integral(nmssm_ext_ww1_9))
real pull = abs (integral (nmssm_ext_ww1_9) - 2.9221293E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => stau1,STAU2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_9) == 2.9221293E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.29E-02) ** 2 + error(nmssm_ext_ww1_10) ** 2)
printf "Expecting 1.0571424E+01"
show(integral(nmssm_ext_ww1_10))
real pull = abs (integral (nmssm_ext_ww1_10) - 1.0571424E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn11,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_10) == 1.0571424E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.72E-04) ** 2 + error(nmssm_ext_ww1_11) ** 2)
printf "Expecting 1.0459269E+01"
show(integral(nmssm_ext_ww1_11))
real pull = abs (integral (nmssm_ext_ww1_11) - 1.0459269E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn21,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_11) == 1.0459269E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.32E-02) ** 2 + error(nmssm_ext_ww1_12) ** 2)
printf "Expecting 1.0537059E+01"
show(integral(nmssm_ext_ww1_12))
real pull = abs (integral (nmssm_ext_ww1_12) - 1.0537059E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sn31,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_12) == 1.0537059E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.03E-02) ** 2 + error(nmssm_ext_ww1_13) ** 2)
printf "Expecting 1.3906157E+01"
show(integral(nmssm_ext_ww1_13))
real pull = abs (integral (nmssm_ext_ww1_13) - 1.3906157E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su1,su1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_13) == 1.3906157E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.18E-04) ** 2 + error(nmssm_ext_ww1_14) ** 2)
printf "Expecting 2.0989466E-01"
show(integral(nmssm_ext_ww1_14))
real pull = abs (integral (nmssm_ext_ww1_14) - 2.0989466E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => su2,su2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_14) == 2.0989466E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.05E-02) ** 2 + error(nmssm_ext_ww1_15) ** 2)
printf "Expecting 1.3893551E+01"
show(integral(nmssm_ext_ww1_15))
real pull = abs (integral (nmssm_ext_ww1_15) - 1.3893551E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc1,sc1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_15) == 1.3893551E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.21E-04) ** 2 + error(nmssm_ext_ww1_16) ** 2)
printf "Expecting 2.0939722E-01"
show(integral(nmssm_ext_ww1_16))
real pull = abs (integral (nmssm_ext_ww1_16) - 2.0939722E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sc2,sc2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_16) == 2.0939722E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.62E-01) ** 2 + error(nmssm_ext_ww1_17) ** 2)
printf "Expecting 3.4799086E+02"
show(integral(nmssm_ext_ww1_17))
real pull = abs (integral (nmssm_ext_ww1_17) - 3.4799086E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_17) == 3.4799086E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.20E-02) ** 2 + error(nmssm_ext_ww1_18) ** 2)
printf "Expecting 1.1205768E+02"
show(integral(nmssm_ext_ww1_18))
real pull = abs (integral (nmssm_ext_ww1_18) - 1.1205768E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st2,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_18) == 1.1205768E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-01) ** 2 + error(nmssm_ext_ww1_19) ** 2)
printf "Expecting 1.3950058E+02"
show(integral(nmssm_ext_ww1_19))
real pull = abs (integral (nmssm_ext_ww1_19) - 1.3950058E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => st1,st2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_19) == 1.3950058E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.98E-03) ** 2 + error(nmssm_ext_ww1_20) ** 2)
printf "Expecting 1.3417266E+01"
show(integral(nmssm_ext_ww1_20))
real pull = abs (integral (nmssm_ext_ww1_20) - 1.3417266E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd1,sd1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_20) == 1.3417266E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.48E-05) ** 2 + error(nmssm_ext_ww1_21) ** 2)
printf "Expecting 5.2428831E-02"
show(integral(nmssm_ext_ww1_21))
real pull = abs (integral (nmssm_ext_ww1_21) - 5.2428831E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sd2,sd2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_21) == 5.2428831E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.94E-03) ** 2 + error(nmssm_ext_ww1_22) ** 2)
printf "Expecting 1.3419887E+01"
show(integral(nmssm_ext_ww1_22))
real pull = abs (integral (nmssm_ext_ww1_22) - 1.3419887E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss1,ss1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_22) == 1.3419887E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.35E-05) ** 2 + error(nmssm_ext_ww1_23) ** 2)
printf "Expecting 5.2525094E-02"
show(integral(nmssm_ext_ww1_23))
real pull = abs (integral (nmssm_ext_ww1_23) - 5.2525094E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ss2,ss2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_23) == 5.2525094E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.23E-02) ** 2 + error(nmssm_ext_ww1_24) ** 2)
printf "Expecting 1.0074353E+02"
show(integral(nmssm_ext_ww1_24))
real pull = abs (integral (nmssm_ext_ww1_24) - 1.0074353E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb1c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_24) == 1.0074353E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.20E-01) ** 2 + error(nmssm_ext_ww1_25) ** 2)
printf "Expecting 1.0224847E+02"
show(integral(nmssm_ext_ww1_25))
real pull = abs (integral (nmssm_ext_ww1_25) - 1.0224847E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb2,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_25) == 1.0224847E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-01) ** 2 + error(nmssm_ext_ww1_26) ** 2)
printf "Expecting 1.0507622E+02"
show(integral(nmssm_ext_ww1_26))
real pull = abs (integral (nmssm_ext_ww1_26) - 1.0507622E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => sb1,sb2c	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_26) == 1.0507622E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.66E-04) ** 2 + error(nmssm_ext_ww1_27) ** 2)
printf "Expecting 8.2937872E-01"
show(integral(nmssm_ext_ww1_27))
real pull = abs (integral (nmssm_ext_ww1_27) - 8.2937872E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu1	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_27) == 8.2937872E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.43E-03) ** 2 + error(nmssm_ext_ww1_28) ** 2)
printf "Expecting 9.3181396E+00"
show(integral(nmssm_ext_ww1_28))
real pull = abs (integral (nmssm_ext_ww1_28) - 9.3181396E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_28) == 9.3181396E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.47E-02) ** 2 + error(nmssm_ext_ww1_29) ** 2)
printf "Expecting 2.7325608E+01"
show(integral(nmssm_ext_ww1_29))
real pull = abs (integral (nmssm_ext_ww1_29) - 2.7325608E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_29) == 2.7325608E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.14E-03) ** 2 + error(nmssm_ext_ww1_30) ** 2)
printf "Expecting 6.9325380E+00"
show(integral(nmssm_ext_ww1_30))
real pull = abs (integral (nmssm_ext_ww1_30) - 6.9325380E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_30) == 6.9325380E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.14E-03) ** 2 + error(nmssm_ext_ww1_31) ** 2)
printf "Expecting 8.1595608E+00"
show(integral(nmssm_ext_ww1_31))
real pull = abs (integral (nmssm_ext_ww1_31) - 8.1595608E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu1,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_31) == 8.1595608E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.93E-02) ** 2 + error(nmssm_ext_ww1_32) ** 2)
printf "Expecting 2.3267567E+01"
show(integral(nmssm_ext_ww1_32))
real pull = abs (integral (nmssm_ext_ww1_32) - 2.3267567E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu2	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_32) == 2.3267567E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.95E-02) ** 2 + error(nmssm_ext_ww1_33) ** 2)
printf "Expecting 1.1910560E+02"
show(integral(nmssm_ext_ww1_33))
real pull = abs (integral (nmssm_ext_ww1_33) - 1.1910560E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_33) == 1.1910560E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.10E-02) ** 2 + error(nmssm_ext_ww1_34) ** 2)
printf "Expecting 5.9961958E+01"
show(integral(nmssm_ext_ww1_34))
real pull = abs (integral (nmssm_ext_ww1_34) - 5.9961958E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_34) == 5.9961958E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.82E-02) ** 2 + error(nmssm_ext_ww1_35) ** 2)
printf "Expecting 5.8876960E+01"
show(integral(nmssm_ext_ww1_35))
real pull = abs (integral (nmssm_ext_ww1_35) - 5.8876960E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu2,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_35) == 5.8876960E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.23E-01) ** 2 + error(nmssm_ext_ww1_36) ** 2)
printf "Expecting 5.9103675E+02"
show(integral(nmssm_ext_ww1_36))
real pull = abs (integral (nmssm_ext_ww1_36) - 5.9103675E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu3	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_36) == 5.9103675E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.39E-02) ** 2 + error(nmssm_ext_ww1_37) ** 2)
printf "Expecting 2.1384803E+02"
show(integral(nmssm_ext_ww1_37))
real pull = abs (integral (nmssm_ext_ww1_37) - 2.1384803E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_37) == 2.1384803E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.53E-02) ** 2 + error(nmssm_ext_ww1_38) ** 2)
printf "Expecting 2.0551958E+02"
show(integral(nmssm_ext_ww1_38))
real pull = abs (integral (nmssm_ext_ww1_38) - 2.0551958E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu3,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_38) == 2.0551958E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.82E-02) ** 2 + error(nmssm_ext_ww1_39) ** 2)
printf "Expecting 3.9232297E+01"
show(integral(nmssm_ext_ww1_39))
real pull = abs (integral (nmssm_ext_ww1_39) - 3.9232297E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu4,neu4	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_39) == 3.9232297E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.26E-02) ** 2 + error(nmssm_ext_ww1_40) ** 2)
printf "Expecting 5.5256662E+01"
show(integral(nmssm_ext_ww1_40))
real pull = abs (integral (nmssm_ext_ww1_40) - 5.5256662E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu4,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_40) == 5.5256662E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.44E-02) ** 2 + error(nmssm_ext_ww1_41) ** 2)
printf "Expecting 3.4148657E+01"
show(integral(nmssm_ext_ww1_41))
real pull = abs (integral (nmssm_ext_ww1_41) - 3.4148657E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => neu5,neu5	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_41) == 3.4148657E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.54E-01) ** 2 + error(nmssm_ext_ww1_42) ** 2)
printf "Expecting 6.2084243E+02"
show(integral(nmssm_ext_ww1_42))
real pull = abs (integral (nmssm_ext_ww1_42) - 6.2084243E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch1- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_42) == 6.2084243E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.32E-01) ** 2 + error(nmssm_ext_ww1_43) ** 2)
printf "Expecting 1.8256030E+02"
show(integral(nmssm_ext_ww1_43))
real pull = abs (integral (nmssm_ext_ww1_43) - 1.8256030E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch2+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_43) == 1.8256030E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.14E-01) ** 2 + error(nmssm_ext_ww1_44) ** 2)
printf "Expecting 8.7939214E+01"
show(integral(nmssm_ext_ww1_44))
real pull = abs (integral (nmssm_ext_ww1_44) - 8.7939214E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => ch1+,ch2- @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_44) == 8.7939214E+01)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.39E+01) ** 2 + error(nmssm_ext_ww1_45) ** 2)
printf "Expecting 5.7425857E+03"
show(integral(nmssm_ext_ww1_45))
real pull = abs (integral (nmssm_ext_ww1_45) - 5.7425857E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_45) == 5.7425857E+03)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.99E+00) ** 2 + error(nmssm_ext_ww1_46) ** 2)
printf "Expecting 2.4757009E+02"
show(integral(nmssm_ext_ww1_46))
real pull = abs (integral (nmssm_ext_ww1_46) - 2.4757009E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_46) == 2.4757009E+02)
printf "************************************************************************"
printf "* Checking Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.06E-03) ** 2 + error(nmssm_ext_ww1_47) ** 2)
printf "Expecting 2.8255891E+00"
show(integral(nmssm_ext_ww1_47))
real pull = abs (integral (nmssm_ext_ww1_47) - 2.8255891E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_47) == 2.8255891E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.88E-02) ** 2 + error(nmssm_ext_ww1_48) ** 2)
printf "Expecting 7.9026180E+00"
show(integral(nmssm_ext_ww1_48))
real pull = abs (integral (nmssm_ext_ww1_48) - 7.9026180E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_48) == 7.9026180E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.87E-04) ** 2 + error(nmssm_ext_ww1_49) ** 2)
printf "Expecting 1.1093989E+00"
show(integral(nmssm_ext_ww1_49))
real pull = abs (integral (nmssm_ext_ww1_49) - 1.1093989E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_49) == 1.1093989E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.52E-03) ** 2 + error(nmssm_ext_ww1_50) ** 2)
printf "Expecting 5.4109278E+00"
show(integral(nmssm_ext_ww1_50))
real pull = abs (integral (nmssm_ext_ww1_50) - 5.4109278E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => h03,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_50) == 5.4109278E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.38E-03) ** 2 + error(nmssm_ext_ww1_51) ** 2)
printf "Expecting 6.5571884E+00"
show(integral(nmssm_ext_ww1_51))
real pull = abs (integral (nmssm_ext_ww1_51) - 6.5571884E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,A01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_51) == 6.5571884E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.89E-04) ** 2 + error(nmssm_ext_ww1_52) ** 2)
printf "Expecting 1.4810855E+00"
show(integral(nmssm_ext_ww1_52))
real pull = abs (integral (nmssm_ext_ww1_52) - 1.4810855E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_52) == 1.4810855E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.04E-03) ** 2 + error(nmssm_ext_ww1_53) ** 2)
printf "Expecting 7.6283505E+00"
show(integral(nmssm_ext_ww1_53))
real pull = abs (integral (nmssm_ext_ww1_53) - 7.6283505E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,A02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_53) == 7.6283505E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.86E+02) ** 2 + error(nmssm_ext_ww1_54) ** 2)
printf "Expecting 8.2814733E+04"
show(integral(nmssm_ext_ww1_54))
real pull = abs (integral (nmssm_ext_ww1_54) - 8.2814733E+04) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_54) == 8.2814733E+04)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.99E+00) ** 2 + error(nmssm_ext_ww1_55) ** 2)
printf "Expecting 1.7735179E+03"
show(integral(nmssm_ext_ww1_55))
real pull = abs (integral (nmssm_ext_ww1_55) - 1.7735179E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_55) == 1.7735179E+03)
printf "************************************************************************"
printf "* Checking Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.34E-05) ** 2 + error(nmssm_ext_ww1_56) ** 2)
printf "Expecting 3.5660809E-02"
show(integral(nmssm_ext_ww1_56))
real pull = abs (integral (nmssm_ext_ww1_56) - 3.5660809E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Z,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_56) == 3.5660809E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.74E-06) ** 2 + error(nmssm_ext_ww1_57) ** 2)
printf "Expecting 5.8535711E-03"
show(integral(nmssm_ext_ww1_57))
real pull = abs (integral (nmssm_ext_ww1_57) - 5.8535711E-03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_57) == 5.8535711E-03)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.83E-04) ** 2 + error(nmssm_ext_ww1_58) ** 2)
printf "Expecting 2.2991862E-01"
show(integral(nmssm_ext_ww1_58))
real pull = abs (integral (nmssm_ext_ww1_58) - 2.2991862E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_58) == 2.2991862E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.25E-04) ** 2 + error(nmssm_ext_ww1_59) ** 2)
printf "Expecting 1.0786432E+00"
show(integral(nmssm_ext_ww1_59))
real pull = abs (integral (nmssm_ext_ww1_59) - 1.0786432E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A01,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_59) == 1.0786432E+00)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.04E-05) ** 2 + error(nmssm_ext_ww1_60) ** 2)
printf "Expecting 1.1968002E-02"
show(integral(nmssm_ext_ww1_60))
real pull = abs (integral (nmssm_ext_ww1_60) - 1.1968002E-02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h01	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_60) == 1.1968002E-02)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.02E-04) ** 2 + error(nmssm_ext_ww1_61) ** 2)
printf "Expecting 4.6867557E-01"
show(integral(nmssm_ext_ww1_61))
real pull = abs (integral (nmssm_ext_ww1_61) - 4.6867557E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h02	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_61) == 4.6867557E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.08E-04) ** 2 + error(nmssm_ext_ww1_62) ** 2)
printf "Expecting 2.9370314E-01"
show(integral(nmssm_ext_ww1_62))
real pull = abs (integral (nmssm_ext_ww1_62) - 2.9370314E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => A02,h03	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_62) == 2.9370314E-01)
printf "************************************************************************"
printf "* Checking Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.24E-02) ** 2 + error(nmssm_ext_ww1_63) ** 2)
printf "Expecting 1.4338390E+01"
show(integral(nmssm_ext_ww1_63))
real pull = abs (integral (nmssm_ext_ww1_63) - 1.4338390E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in Wm,Wp => Hp,Hm	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_ww1_63) == 1.4338390E+01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
