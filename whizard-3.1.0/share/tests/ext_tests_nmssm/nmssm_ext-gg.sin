

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-gg.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                -----
! ----------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! ----------------------------------------------------------------------
helicity_selection_threshold = 1.E7
helicity_selection_cutoff = 20000
show(real)
! ----------------------------------------------------------------------
iterations = 3:50000
! ----------------------------------------------------------------------




























! ----------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_gg_1 = gl,gl => t,T	   
process nmssm_ext_gg_2 = gl,gl => sgl,sgl 
process nmssm_ext_gg_3 = gl,gl => su1,su1c
process nmssm_ext_gg_4 = gl,gl => su2,su2c
process nmssm_ext_gg_5 = gl,gl => sc1,sc1c
process nmssm_ext_gg_6 = gl,gl => sc2,sc2c
process nmssm_ext_gg_7 = gl,gl => st1,st1c
process nmssm_ext_gg_8 = gl,gl => st2,st2c
process nmssm_ext_gg_9 = gl,gl => sd1,sd1c
process nmssm_ext_gg_10 = gl,gl => sd2,sd2c
process nmssm_ext_gg_11 = gl,gl => ss1,ss1c
process nmssm_ext_gg_12 = gl,gl => ss2,ss2c
process nmssm_ext_gg_13 = gl,gl => sb1,sb1c
process nmssm_ext_gg_14 = gl,gl => sb2,sb2c
process nmssm_ext_gg_15 = gl,gl => t,T	   
process nmssm_ext_gg_16 = gl,gl => sgl,sgl 
process nmssm_ext_gg_17 = gl,gl => su1,su1c
process nmssm_ext_gg_18 = gl,gl => su2,su2c
process nmssm_ext_gg_19 = gl,gl => sc1,sc1c
process nmssm_ext_gg_20 = gl,gl => sc2,sc2c
process nmssm_ext_gg_21 = gl,gl => st1,st1c
process nmssm_ext_gg_22 = gl,gl => st2,st2c
process nmssm_ext_gg_23 = gl,gl => sd1,sd1c
process nmssm_ext_gg_24 = gl,gl => sd2,sd2c
process nmssm_ext_gg_25 = gl,gl => ss1,ss1c
process nmssm_ext_gg_26 = gl,gl => ss2,ss2c
process nmssm_ext_gg_27 = gl,gl => sb1,sb1c
process nmssm_ext_gg_28 = gl,gl => sb2,sb2c
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_1)
printf "************************************************************************"
printf "* Integrating gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_2)
printf "************************************************************************"
printf "* Integrating gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_3)
printf "************************************************************************"
printf "* Integrating gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_4)
printf "************************************************************************"
printf "* Integrating gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_5)
printf "************************************************************************"
printf "* Integrating gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_6)
printf "************************************************************************"
printf "* Integrating gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_7)
printf "************************************************************************"
printf "* Integrating gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_8)
printf "************************************************************************"
printf "* Integrating gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_9)
printf "************************************************************************"
printf "* Integrating gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_10)
printf "************************************************************************"
printf "* Integrating gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_11)
printf "************************************************************************"
printf "* Integrating gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_12)
printf "************************************************************************"
printf "* Integrating gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_13)
printf "************************************************************************"
printf "* Integrating gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_14)
printf "************************************************************************"
printf "* Integrating gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_15)
printf "************************************************************************"
printf "* Integrating gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_16)
printf "************************************************************************"
printf "* Integrating gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_17)
printf "************************************************************************"
printf "* Integrating gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_18)
printf "************************************************************************"
printf "* Integrating gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_19)
printf "************************************************************************"
printf "* Integrating gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_20)
printf "************************************************************************"
printf "* Integrating gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_21)
printf "************************************************************************"
printf "* Integrating gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_22)
printf "************************************************************************"
printf "* Integrating gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_23)
printf "************************************************************************"
printf "* Integrating gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_24)
printf "************************************************************************"
printf "* Integrating gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_25)
printf "************************************************************************"
printf "* Integrating gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_26)
printf "************************************************************************"
printf "* Integrating gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_27)
printf "************************************************************************"
printf "* Integrating gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = gl,gl
seed = 0
integrate (nmssm_ext_gg_28)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.95E+00) ** 2 + error(nmssm_ext_gg_1) ** 2)
printf "Expecting 2.5081146E+03"
show(integral(nmssm_ext_gg_1))
real pull = abs (integral (nmssm_ext_gg_1) - 2.5081146E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => t,T	    @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_1) == 2.5081146E+03)
printf "************************************************************************"
printf "* Checking gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.91E+00) ** 2 + error(nmssm_ext_gg_2) ** 2)
printf "Expecting 9.1938444E+03"
show(integral(nmssm_ext_gg_2))
real pull = abs (integral (nmssm_ext_gg_2) - 9.1938444E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sgl,sgl  @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_2) == 9.1938444E+03)
printf "************************************************************************"
printf "* Checking gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.04E-03) ** 2 + error(nmssm_ext_gg_3) ** 2)
printf "Expecting 7.0232438E+01"
show(integral(nmssm_ext_gg_3))
real pull = abs (integral (nmssm_ext_gg_3) - 7.0232438E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => su1,su1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_3) == 7.0232438E+01)
printf "************************************************************************"
printf "* Checking gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.07E-03) ** 2 + error(nmssm_ext_gg_4) ** 2)
printf "Expecting 7.0202127E+01"
show(integral(nmssm_ext_gg_4))
real pull = abs (integral (nmssm_ext_gg_4) - 7.0202127E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => su2,su2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_4) == 7.0202127E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.97E-03) ** 2 + error(nmssm_ext_gg_5) ** 2)
printf "Expecting 7.0238595E+01"
show(integral(nmssm_ext_gg_5))
real pull = abs (integral (nmssm_ext_gg_5) - 7.0238595E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sc1,sc1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_5) == 7.0238595E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.42E-03) ** 2 + error(nmssm_ext_gg_6) ** 2)
printf "Expecting 7.0211786E+01"
show(integral(nmssm_ext_gg_6))
real pull = abs (integral (nmssm_ext_gg_6) - 7.0211786E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sc2,sc2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_6) == 7.0211786E+01)
printf "************************************************************************"
printf "* Checking gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.66E-02) ** 2 + error(nmssm_ext_gg_7) ** 2)
printf "Expecting 8.6198986E+01"
show(integral(nmssm_ext_gg_7))
real pull = abs (integral (nmssm_ext_gg_7) - 8.6198986E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => st1,st1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_7) == 8.6198986E+01)
printf "************************************************************************"
printf "* Checking gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.81E-03) ** 2 + error(nmssm_ext_gg_8) ** 2)
printf "Expecting 6.0369126E+01"
show(integral(nmssm_ext_gg_8))
real pull = abs (integral (nmssm_ext_gg_8) - 6.0369126E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => st2,st2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_8) == 6.0369126E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.97E-03) ** 2 + error(nmssm_ext_gg_9) ** 2)
printf "Expecting 7.0127359E+01"
show(integral(nmssm_ext_gg_9))
real pull = abs (integral (nmssm_ext_gg_9) - 7.0127359E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sd1,sd1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_9) == 7.0127359E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((7.01E-03) ** 2 + error(nmssm_ext_gg_10) ** 2)
printf "Expecting 7.0163549E+01"
show(integral(nmssm_ext_gg_10))
real pull = abs (integral (nmssm_ext_gg_10) - 7.0163549E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sd2,sd2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_10) == 7.0163549E+01)
printf "************************************************************************"
printf "* Checking gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.95E-03) ** 2 + error(nmssm_ext_gg_11) ** 2)
printf "Expecting 7.0133800E+01"
show(integral(nmssm_ext_gg_11))
real pull = abs (integral (nmssm_ext_gg_11) - 7.0133800E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => ss1,ss1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_11) == 7.0133800E+01)
printf "************************************************************************"
printf "* Checking gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.20E-03) ** 2 + error(nmssm_ext_gg_12) ** 2)
printf "Expecting 7.0182724E+01"
show(integral(nmssm_ext_gg_12))
real pull = abs (integral (nmssm_ext_gg_12) - 7.0182724E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => ss2,ss2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_12) == 7.0182724E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.53E-03) ** 2 + error(nmssm_ext_gg_13) ** 2)
printf "Expecting 7.0400739E+01"
show(integral(nmssm_ext_gg_13))
real pull = abs (integral (nmssm_ext_gg_13) - 7.0400739E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sb1,sb1c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_13) == 7.0400739E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.72E-03) ** 2 + error(nmssm_ext_gg_14) ** 2)
printf "Expecting 6.9920822E+01"
show(integral(nmssm_ext_gg_14))
real pull = abs (integral (nmssm_ext_gg_14) - 6.9920822E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sb2,sb2c @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_14) == 6.9920822E+01)
printf "************************************************************************"
printf "* Checking gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((8.53E-02) ** 2 + error(nmssm_ext_gg_15) ** 2)
printf "Expecting 1.1247848E+03"
show(integral(nmssm_ext_gg_15))
real pull = abs (integral (nmssm_ext_gg_15) - 1.1247848E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => t,T	    @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_15) == 1.1247848E+03)
printf "************************************************************************"
printf "* Checking gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.21E-01) ** 2 + error(nmssm_ext_gg_16) ** 2)
printf "Expecting 4.6574401E+03"
show(integral(nmssm_ext_gg_16))
real pull = abs (integral (nmssm_ext_gg_16) - 4.6574401E+03) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sgl,sgl  @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_16) == 4.6574401E+03)
printf "************************************************************************"
printf "* Checking gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-03) ** 2 + error(nmssm_ext_gg_17) ** 2)
printf "Expecting 3.8821548E+01"
show(integral(nmssm_ext_gg_17))
real pull = abs (integral (nmssm_ext_gg_17) - 3.8821548E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => su1,su1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_17) == 3.8821548E+01)
printf "************************************************************************"
printf "* Checking gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_gg_18) ** 2)
printf "Expecting 3.8810184E+01"
show(integral(nmssm_ext_gg_18))
real pull = abs (integral (nmssm_ext_gg_18) - 3.8810184E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => su2,su2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_18) == 3.8810184E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-03) ** 2 + error(nmssm_ext_gg_19) ** 2)
printf "Expecting 3.8819174E+01"
show(integral(nmssm_ext_gg_19))
real pull = abs (integral (nmssm_ext_gg_19) - 3.8819174E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sc1,sc1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_19) == 3.8819174E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-03) ** 2 + error(nmssm_ext_gg_20) ** 2)
printf "Expecting 3.8807131E+01"
show(integral(nmssm_ext_gg_20))
real pull = abs (integral (nmssm_ext_gg_20) - 3.8807131E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sc2,sc2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_20) == 3.8807131E+01)
printf "************************************************************************"
printf "* Checking gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.10E-03) ** 2 + error(nmssm_ext_gg_21) ** 2)
printf "Expecting 4.5800799E+01"
show(integral(nmssm_ext_gg_21))
real pull = abs (integral (nmssm_ext_gg_21) - 4.5800799E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => st1,st1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_21) == 4.5800799E+01)
printf "************************************************************************"
printf "* Checking gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.27E-04) ** 2 + error(nmssm_ext_gg_22) ** 2)
printf "Expecting 3.3557935E+01"
show(integral(nmssm_ext_gg_22))
real pull = abs (integral (nmssm_ext_gg_22) - 3.3557935E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => st2,st2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_22) == 3.3557935E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_gg_23) ** 2)
printf "Expecting 3.8766493E+01"
show(integral(nmssm_ext_gg_23))
real pull = abs (integral (nmssm_ext_gg_23) - 3.8766493E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sd1,sd1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_23) == 3.8766493E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-03) ** 2 + error(nmssm_ext_gg_24) ** 2)
printf "Expecting 3.8793026E+01"
show(integral(nmssm_ext_gg_24))
real pull = abs (integral (nmssm_ext_gg_24) - 3.8793026E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sd2,sd2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_24) == 3.8793026E+01)
printf "************************************************************************"
printf "* Checking gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_gg_25) ** 2)
printf "Expecting 3.8769950E+01"
show(integral(nmssm_ext_gg_25))
real pull = abs (integral (nmssm_ext_gg_25) - 3.8769950E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => ss1,ss1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_25) == 3.8769950E+01)
printf "************************************************************************"
printf "* Checking gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.40E-03) ** 2 + error(nmssm_ext_gg_26) ** 2)
printf "Expecting 3.8790550E+01"
show(integral(nmssm_ext_gg_26))
real pull = abs (integral (nmssm_ext_gg_26) - 3.8790550E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => ss2,ss2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_26) == 3.8790550E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.41E-03) ** 2 + error(nmssm_ext_gg_27) ** 2)
printf "Expecting 3.8911090E+01"
show(integral(nmssm_ext_gg_27))
real pull = abs (integral (nmssm_ext_gg_27) - 3.8911090E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sb1,sb1c @ sqrt(s) = 5000 GeV"
endif
tolerance = 4 * error_sum
expect (integral (nmssm_ext_gg_27) == 3.8911090E+01)
printf "************************************************************************"
printf "* Checking gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.39E-03) ** 2 + error(nmssm_ext_gg_28) ** 2)
printf "Expecting 3.8650275E+01"
show(integral(nmssm_ext_gg_28))
real pull = abs (integral (nmssm_ext_gg_28) - 3.8650275E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in gl,gl => sb2,sb2c @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_gg_28) == 3.8650275E+01)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
