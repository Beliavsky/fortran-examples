

! Whizard test suite.  Do not edit.  Generated automatically from
! $Id: nmssm_ext-en.m4 $
! by the macros in
! $Id: testsuite.m4 5205 2014-01-30 14:17:39Z jr_reuter $
! ----------------------------------------------------------------------
! -------------------------------------------------------------------------
! ----- Passed 5 checks with different random seeds                   -----
! -------------------------------------------------------------------------
model = NMSSM
read_slha ("nmssm.slha")
?vis_history = false
! -------------------------------------------------------------------------
!helicity_selection_threshold = 1.E7
!helicity_selection_cutoff = 20000
!show(real)
! -------------------------------------------------------------------------
iterations = 3:50000
! -------------------------------------------------------------------------
































! -------------------------------------------------------------------------
! ----------------------------------------------------------------------
! Define the process
! ----------------------------------------------------------------------
process nmssm_ext_en_1 = e1,N1 => Z,Wm		
process nmssm_ext_en_2 = e1,N1 => se1,SN11	
process nmssm_ext_en_3 = e1,N1 => se2,SN11	
process nmssm_ext_en_4 = e1,N1 => smu1,SN21	
process nmssm_ext_en_5 = e1,N1 => stau1,SN31	
process nmssm_ext_en_6 = e1,N1 => stau2,SN31	
process nmssm_ext_en_7 = e1,N1 => neu1,"ch1-"	
process nmssm_ext_en_8 = e1,N1 => neu2,"ch1-"	
process nmssm_ext_en_9 = e1,N1 => neu3,"ch1-"	
process nmssm_ext_en_10 = e1,N1 => neu4,"ch1-"	
process nmssm_ext_en_11 = e1,N1 => neu5,"ch1-"	
process nmssm_ext_en_12 = e1,N1 => neu1,"ch2-"	
process nmssm_ext_en_13 = e1,N1 => neu2,"ch2-"	
process nmssm_ext_en_14 = e1,N1 => neu3,"ch2-"	
process nmssm_ext_en_15 = e1,N1 => neu4,"ch2-"	
process nmssm_ext_en_16 = e1,N1 => neu5,"ch2-"	
process nmssm_ext_en_17 = e1,N1 => Z,Wm		
process nmssm_ext_en_18 = e1,N1 => se1,SN11	
process nmssm_ext_en_19 = e1,N1 => se2,SN11	
process nmssm_ext_en_20 = e1,N1 => smu1,SN21	
process nmssm_ext_en_21 = e1,N1 => stau1,SN31	
process nmssm_ext_en_22 = e1,N1 => stau2,SN31	
process nmssm_ext_en_23 = e1,N1 => neu1,"ch1-"	
process nmssm_ext_en_24 = e1,N1 => neu2,"ch1-"	
process nmssm_ext_en_25 = e1,N1 => neu3,"ch1-"	
process nmssm_ext_en_26 = e1,N1 => neu4,"ch1-"	
process nmssm_ext_en_27 = e1,N1 => neu5,"ch1-"	
process nmssm_ext_en_28 = e1,N1 => neu1,"ch2-"	
process nmssm_ext_en_29 = e1,N1 => neu2,"ch2-"	
process nmssm_ext_en_30 = e1,N1 => neu3,"ch2-"	
process nmssm_ext_en_31 = e1,N1 => neu4,"ch2-"	
process nmssm_ext_en_32 = e1,N1 => neu5,"ch2-"	
! ----------------------------------------------------------------------
! Compile the processes
! ----------------------------------------------------------------------
compile
! ----------------------------------------------------------------------
! Integrate the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Integrating e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_1)
printf "************************************************************************"
printf "* Integrating e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_2)
printf "************************************************************************"
printf "* Integrating e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_3)
printf "************************************************************************"
printf "* Integrating e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_4)
printf "************************************************************************"
printf "* Integrating e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_5)
printf "************************************************************************"
printf "* Integrating e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_6)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_7)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_8)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_9)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_10)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_11)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_12)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_13)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_14)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_15)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
sqrts = 3000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_16)
printf "************************************************************************"
printf "* Integrating e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_17)
printf "************************************************************************"
printf "* Integrating e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_18)
printf "************************************************************************"
printf "* Integrating e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_19)
printf "************************************************************************"
printf "* Integrating e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_20)
printf "************************************************************************"
printf "* Integrating e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_21)
printf "************************************************************************"
printf "* Integrating e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_22)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_23)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_24)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_25)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_26)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_27)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_28)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_29)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_30)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_31)
printf "************************************************************************"
printf "* Integrating e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
sqrts = 5000 GeV
beams = e1,N1
seed = 0
integrate (nmssm_ext_en_32)
! ----------------------------------------------------------------------
! Check the processes
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Checking e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.28E+00) ** 2 + error(nmssm_ext_en_1) ** 2)
printf "Expecting 7.1180098E+02"
show(integral(nmssm_ext_en_1))
real pull = abs (integral (nmssm_ext_en_1) - 7.1180098E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => Z,Wm		 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_1) == 7.1180098E+02)
printf "************************************************************************"
printf "* Checking e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.76E-02) ** 2 + error(nmssm_ext_en_2) ** 2)
printf "Expecting 7.1516406E+01"
show(integral(nmssm_ext_en_2))
real pull = abs (integral (nmssm_ext_en_2) - 7.1516406E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => se1,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_2) == 7.1516406E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.64E-03) ** 2 + error(nmssm_ext_en_3) ** 2)
printf "Expecting 6.6334194E+00"
show(integral(nmssm_ext_en_3))
real pull = abs (integral (nmssm_ext_en_3) - 6.6334194E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => se2,SN11	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_3) == 6.6334194E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.38E-02) ** 2 + error(nmssm_ext_en_4) ** 2)
printf "Expecting 1.2385832E+01"
show(integral(nmssm_ext_en_4))
real pull = abs (integral (nmssm_ext_en_4) - 1.2385832E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => smu1,SN21	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_4) == 1.2385832E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.22E-03) ** 2 + error(nmssm_ext_en_5) ** 2)
printf "Expecting 6.1062640E+00"
show(integral(nmssm_ext_en_5))
real pull = abs (integral (nmssm_ext_en_5) - 6.1062640E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => stau1,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_5) == 6.1062640E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((5.28E-03) ** 2 + error(nmssm_ext_en_6) ** 2)
printf "Expecting 6.2641030E+00"
show(integral(nmssm_ext_en_6))
real pull = abs (integral (nmssm_ext_en_6) - 6.2641030E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => stau2,SN31	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_6) == 6.2641030E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.40E-02) ** 2 + error(nmssm_ext_en_7) ** 2)
printf "Expecting 2.0380748E+01"
show(integral(nmssm_ext_en_7))
real pull = abs (integral (nmssm_ext_en_7) - 2.0380748E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_7) == 2.0380748E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.08E-03) ** 2 + error(nmssm_ext_en_8) ** 2)
printf "Expecting 2.7937816E+00"
show(integral(nmssm_ext_en_8))
real pull = abs (integral (nmssm_ext_en_8) - 2.7937816E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_8) == 2.7937816E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.02E-02) ** 2 + error(nmssm_ext_en_9) ** 2)
printf "Expecting 2.0499984E+01"
show(integral(nmssm_ext_en_9))
real pull = abs (integral (nmssm_ext_en_9) - 2.0499984E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_9) == 2.0499984E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.14E-04) ** 2 + error(nmssm_ext_en_10) ** 2)
printf "Expecting 1.1242076E+00"
show(integral(nmssm_ext_en_10))
real pull = abs (integral (nmssm_ext_en_10) - 1.1242076E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_10) == 1.1242076E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.54E-04) ** 2 + error(nmssm_ext_en_11) ** 2)
printf "Expecting 6.9004088E-01"
show(integral(nmssm_ext_en_11))
real pull = abs (integral (nmssm_ext_en_11) - 6.9004088E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_11) == 6.9004088E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.64E-03) ** 2 + error(nmssm_ext_en_12) ** 2)
printf "Expecting 9.9103088E-01"
show(integral(nmssm_ext_en_12))
real pull = abs (integral (nmssm_ext_en_12) - 9.9103088E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_12) == 9.9103088E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.98E-04) ** 2 + error(nmssm_ext_en_13) ** 2)
printf "Expecting 6.9465414E-01"
show(integral(nmssm_ext_en_13))
real pull = abs (integral (nmssm_ext_en_13) - 6.9465414E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_13) == 6.9465414E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.64E-03) ** 2 + error(nmssm_ext_en_14) ** 2)
printf "Expecting 1.0220287E+00"
show(integral(nmssm_ext_en_14))
real pull = abs (integral (nmssm_ext_en_14) - 1.0220287E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_14) == 1.0220287E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.32E-02) ** 2 + error(nmssm_ext_en_15) ** 2)
printf "Expecting 2.3385982E+01"
show(integral(nmssm_ext_en_15))
real pull = abs (integral (nmssm_ext_en_15) - 2.3385982E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_15) == 2.3385982E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.16E-02) ** 2 + error(nmssm_ext_en_16) ** 2)
printf "Expecting 2.3691116E+01"
show(integral(nmssm_ext_en_16))
real pull = abs (integral (nmssm_ext_en_16) - 2.3691116E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 3000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_16) == 2.3691116E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((6.36E-01) ** 2 + error(nmssm_ext_en_17) ** 2)
printf "Expecting 3.0162326E+02"
show(integral(nmssm_ext_en_17))
real pull = abs (integral (nmssm_ext_en_17) - 3.0162326E+02) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => Z,Wm		 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_17) == 3.0162326E+02)
printf "************************************************************************"
printf "* Checking e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.56E-02) ** 2 + error(nmssm_ext_en_18) ** 2)
printf "Expecting 2.9475778E+01"
show(integral(nmssm_ext_en_18))
real pull = abs (integral (nmssm_ext_en_18) - 2.9475778E+01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => se1,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_18) == 2.9475778E+01)
printf "************************************************************************"
printf "* Checking e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.74E-03) ** 2 + error(nmssm_ext_en_19) ** 2)
printf "Expecting 2.4708784E+00"
show(integral(nmssm_ext_en_19))
real pull = abs (integral (nmssm_ext_en_19) - 2.4708784E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => se2,SN11	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_19) == 2.4708784E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.92E-03) ** 2 + error(nmssm_ext_en_20) ** 2)
printf "Expecting 4.5180620E+00"
show(integral(nmssm_ext_en_20))
real pull = abs (integral (nmssm_ext_en_20) - 4.5180620E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => smu1,SN21	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_20) == 4.5180620E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.90E-03) ** 2 + error(nmssm_ext_en_21) ** 2)
printf "Expecting 2.2310762E+00"
show(integral(nmssm_ext_en_21))
real pull = abs (integral (nmssm_ext_en_21) - 2.2310762E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => stau1,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_21) == 2.2310762E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.98E-03) ** 2 + error(nmssm_ext_en_22) ** 2)
printf "Expecting 2.2900994E+00"
show(integral(nmssm_ext_en_22))
real pull = abs (integral (nmssm_ext_en_22) - 2.2900994E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => stau2,SN31	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_22) == 2.2900994E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.36E-03) ** 2 + error(nmssm_ext_en_23) ** 2)
printf "Expecting 7.5554683E+00"
show(integral(nmssm_ext_en_23))
real pull = abs (integral (nmssm_ext_en_23) - 7.5554683E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu1,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_23) == 7.5554683E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.60E-03) ** 2 + error(nmssm_ext_en_24) ** 2)
printf "Expecting 1.0443521E+00"
show(integral(nmssm_ext_en_24))
real pull = abs (integral (nmssm_ext_en_24) - 1.0443521E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu2,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_24) == 1.0443521E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((1.20E-02) ** 2 + error(nmssm_ext_en_25) ** 2)
printf "Expecting 7.8134296E+00"
show(integral(nmssm_ext_en_25))
real pull = abs (integral (nmssm_ext_en_25) - 7.8134296E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu3,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_25) == 7.8134296E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.18E-04) ** 2 + error(nmssm_ext_en_26) ** 2)
printf "Expecting 3.5623320E-01"
show(integral(nmssm_ext_en_26))
real pull = abs (integral (nmssm_ext_en_26) - 3.5623320E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu4,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_26) == 3.5623320E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.74E-04) ** 2 + error(nmssm_ext_en_27) ** 2)
printf "Expecting 2.5540244E-01"
show(integral(nmssm_ext_en_27))
real pull = abs (integral (nmssm_ext_en_27) - 2.5540244E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu5,ch1-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_27) == 2.5540244E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((4.24E-04) ** 2 + error(nmssm_ext_en_28) ** 2)
printf "Expecting 3.5589178E-01"
show(integral(nmssm_ext_en_28))
real pull = abs (integral (nmssm_ext_en_28) - 3.5589178E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu1,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_28) == 3.5589178E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((2.78E-04) ** 2 + error(nmssm_ext_en_29) ** 2)
printf "Expecting 2.5129162E-01"
show(integral(nmssm_ext_en_29))
real pull = abs (integral (nmssm_ext_en_29) - 2.5129162E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu2,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_29) == 2.5129162E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((3.00E-04) ** 2 + error(nmssm_ext_en_30) ** 2)
printf "Expecting 3.3349600E-01"
show(integral(nmssm_ext_en_30))
real pull = abs (integral (nmssm_ext_en_30) - 3.3349600E-01) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu3,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_30) == 3.3349600E-01)
printf "************************************************************************"
printf "* Checking e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.70E-03) ** 2 + error(nmssm_ext_en_31) ** 2)
printf "Expecting 8.6121750E+00"
show(integral(nmssm_ext_en_31))
real pull = abs (integral (nmssm_ext_en_31) - 8.6121750E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu4,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_31) == 8.6121750E+00)
printf "************************************************************************"
printf "* Checking e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
printf "************************************************************************"
real error_sum = sqrt ((9.08E-03) ** 2 + error(nmssm_ext_en_32) ** 2)
printf "Expecting 8.5984160E+00"
show(integral(nmssm_ext_en_32))
real pull = abs (integral (nmssm_ext_en_32) - 8.5984160E+00) / error_sum
if (pull > 6) then
  printf "SEVERE:  pull > 6 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 5) then
  printf "SEVERE:  pull > 5 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 4) then
  printf "ERROR:   pull > 4 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 3) then
  printf "WARNING: pull > 3 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
elsif (pull > 2) then
  printf "NOTICE:  pull > 2 in e1,N1 => neu5,ch2-	 @ sqrt(s) = 5000 GeV"
endif
tolerance = 3 * error_sum
expect (integral (nmssm_ext_en_32) == 8.5984160E+00)
! ----------------------------------------------------------------------
! Done
! ----------------------------------------------------------------------
printf "************************************************************************"
printf "* Done."
printf "************************************************************************"
